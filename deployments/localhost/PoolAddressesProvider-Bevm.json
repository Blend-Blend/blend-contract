{
  "address": "0x84eA74d481Ee0A5332c457a4d796187F6Ba67fEB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "marketId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "ACLAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "ACLManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "AddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldImplementationAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImplementationAddress",
          "type": "address"
        }
      ],
      "name": "AddressSetAsProxy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "oldMarketId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "newMarketId",
          "type": "string"
        }
      ],
      "name": "MarketIdSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "PoolConfiguratorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "PoolDataProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "PoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "PriceOracleSentinelUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "PriceOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxyAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementationAddress",
          "type": "address"
        }
      ],
      "name": "ProxyCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getACLAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getACLManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolConfigurator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolDataProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceOracleSentinel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAclAdmin",
          "type": "address"
        }
      ],
      "name": "setACLAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAclManager",
          "type": "address"
        }
      ],
      "name": "setACLManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "setAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newImplementationAddress",
          "type": "address"
        }
      ],
      "name": "setAddressAsProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newMarketId",
          "type": "string"
        }
      ],
      "name": "setMarketId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPoolConfiguratorImpl",
          "type": "address"
        }
      ],
      "name": "setPoolConfiguratorImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDataProvider",
          "type": "address"
        }
      ],
      "name": "setPoolDataProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPoolImpl",
          "type": "address"
        }
      ],
      "name": "setPoolImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPriceOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPriceOracleSentinel",
          "type": "address"
        }
      ],
      "name": "setPriceOracleSentinel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xec877ded557d9b09e45b48b4ff15253e118fb8a30b3cd3da9a279b59b29fe9dd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x84eA74d481Ee0A5332c457a4d796187F6Ba67fEB",
    "transactionIndex": 0,
    "gasUsed": "1618803",
    "logsBloom": "0x
    "blockHash": "0xeab4649b395ef66dc091736eface4dfb03105ccda2d296b3763a7aa5ce11b873",
    "transactionHash": "0xec877ded557d9b09e45b48b4ff15253e118fb8a30b3cd3da9a279b59b29fe9dd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 33,
        "transactionHash": "0xec877ded557d9b09e45b48b4ff15253e118fb8a30b3cd3da9a279b59b29fe9dd",
        "address": "0x84eA74d481Ee0A5332c457a4d796187F6Ba67fEB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xeab4649b395ef66dc091736eface4dfb03105ccda2d296b3763a7aa5ce11b873"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 33,
        "transactionHash": "0xec877ded557d9b09e45b48b4ff15253e118fb8a30b3cd3da9a279b59b29fe9dd",
        "address": "0x84eA74d481Ee0A5332c457a4d796187F6Ba67fEB",
        "topics": [
          "0xe685c8cdecc6030c45030fd54778812cb84ed8e4467c38294403d68ba7860823",
          "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
          "0x66ea9782e87b08bebc2d36bc4da42ddd33206cd7e8462810c51d495289d1e5c4"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xeab4649b395ef66dc091736eface4dfb03105ccda2d296b3763a7aa5ce11b873"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 33,
        "transactionHash": "0xec877ded557d9b09e45b48b4ff15253e118fb8a30b3cd3da9a279b59b29fe9dd",
        "address": "0x84eA74d481Ee0A5332c457a4d796187F6Ba67fEB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xeab4649b395ef66dc091736eface4dfb03105ccda2d296b3763a7aa5ce11b873"
      }
    ],
    "blockNumber": 33,
    "cumulativeGasUsed": "1618803",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Commons Blend Market",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "c351ce62b62f76bd5a8479a8f9cf6c24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ACLAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ACLManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementationAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementationAddress\",\"type\":\"address\"}],\"name\":\"AddressSetAsProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"oldMarketId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newMarketId\",\"type\":\"string\"}],\"name\":\"MarketIdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PoolConfiguratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PoolDataProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PriceOracleSentinelUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PriceOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementationAddress\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getACLAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getACLManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolConfigurator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolDataProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOracleSentinel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAclAdmin\",\"type\":\"address\"}],\"name\":\"setACLAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAclManager\",\"type\":\"address\"}],\"name\":\"setACLManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newImplementationAddress\",\"type\":\"address\"}],\"name\":\"setAddressAsProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newMarketId\",\"type\":\"string\"}],\"name\":\"setMarketId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPoolConfiguratorImpl\",\"type\":\"address\"}],\"name\":\"setPoolConfiguratorImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDataProvider\",\"type\":\"address\"}],\"name\":\"setPoolDataProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPoolImpl\",\"type\":\"address\"}],\"name\":\"setPoolImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPriceOracleSentinel\",\"type\":\"address\"}],\"name\":\"setPriceOracleSentinel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave\",\"details\":\"Acts as factory of proxies and admin of those, so with right to change its implementationsOwned by the Aave Governance\",\"events\":{\"ACLAdminUpdated(address,address)\":{\"details\":\"Emitted when the ACL admin is updated.\",\"params\":{\"newAddress\":\"The new address of the ACLAdmin\",\"oldAddress\":\"The old address of the ACLAdmin\"}},\"ACLManagerUpdated(address,address)\":{\"details\":\"Emitted when the ACL manager is updated.\",\"params\":{\"newAddress\":\"The new address of the ACLManager\",\"oldAddress\":\"The old address of the ACLManager\"}},\"AddressSet(bytes32,address,address)\":{\"details\":\"Emitted when a new non-proxied contract address is registered.\",\"params\":{\"id\":\"The identifier of the contract\",\"newAddress\":\"The address of the new contract\",\"oldAddress\":\"The address of the old contract\"}},\"AddressSetAsProxy(bytes32,address,address,address)\":{\"details\":\"Emitted when the implementation of the proxy registered with id is updated\",\"params\":{\"id\":\"The identifier of the contract\",\"newImplementationAddress\":\"The address of the new implementation contract\",\"oldImplementationAddress\":\"The address of the old implementation contract\",\"proxyAddress\":\"The address of the proxy contract\"}},\"MarketIdSet(string,string)\":{\"details\":\"Emitted when the market identifier is updated.\",\"params\":{\"newMarketId\":\"The new id of the market\",\"oldMarketId\":\"The old id of the market\"}},\"PoolConfiguratorUpdated(address,address)\":{\"details\":\"Emitted when the pool configurator is updated.\",\"params\":{\"newAddress\":\"The new address of the PoolConfigurator\",\"oldAddress\":\"The old address of the PoolConfigurator\"}},\"PoolDataProviderUpdated(address,address)\":{\"details\":\"Emitted when the pool data provider is updated.\",\"params\":{\"newAddress\":\"The new address of the PoolDataProvider\",\"oldAddress\":\"The old address of the PoolDataProvider\"}},\"PoolUpdated(address,address)\":{\"details\":\"Emitted when the pool is updated.\",\"params\":{\"newAddress\":\"The new address of the Pool\",\"oldAddress\":\"The old address of the Pool\"}},\"PriceOracleSentinelUpdated(address,address)\":{\"details\":\"Emitted when the price oracle sentinel is updated.\",\"params\":{\"newAddress\":\"The new address of the PriceOracleSentinel\",\"oldAddress\":\"The old address of the PriceOracleSentinel\"}},\"PriceOracleUpdated(address,address)\":{\"details\":\"Emitted when the price oracle is updated.\",\"params\":{\"newAddress\":\"The new address of the PriceOracle\",\"oldAddress\":\"The old address of the PriceOracle\"}},\"ProxyCreated(bytes32,address,address)\":{\"details\":\"Emitted when a new proxy is created.\",\"params\":{\"id\":\"The identifier of the proxy\",\"implementationAddress\":\"The address of the implementation contract\",\"proxyAddress\":\"The address of the created proxy contract\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"marketId\":\"The identifier of the market.\",\"owner\":\"The owner address of this contract.\"}},\"getACLAdmin()\":{\"returns\":{\"_0\":\"The address of the ACL admin\"}},\"getACLManager()\":{\"returns\":{\"_0\":\"The address of the ACLManager\"}},\"getAddress(bytes32)\":{\"details\":\"The returned address might be an EOA or a contract, potentially proxiedIt returns ZERO if there is no registered address with the given id\",\"params\":{\"id\":\"The id\"},\"returns\":{\"_0\":\"The address of the registered for the specified id\"}},\"getMarketId()\":{\"returns\":{\"_0\":\"The market id\"}},\"getPool()\":{\"returns\":{\"_0\":\"The Pool proxy address\"}},\"getPoolConfigurator()\":{\"returns\":{\"_0\":\"The PoolConfigurator proxy address\"}},\"getPoolDataProvider()\":{\"returns\":{\"_0\":\"The address of the DataProvider\"}},\"getPriceOracle()\":{\"returns\":{\"_0\":\"The address of the PriceOracle\"}},\"getPriceOracleSentinel()\":{\"returns\":{\"_0\":\"The address of the PriceOracleSentinel\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setACLAdmin(address)\":{\"params\":{\"newAclAdmin\":\"The address of the new ACL admin\"}},\"setACLManager(address)\":{\"params\":{\"newAclManager\":\"The address of the new ACLManager\"}},\"setAddress(bytes32,address)\":{\"details\":\"IMPORTANT Use this function carefully, as it will do a hard replacement\",\"params\":{\"id\":\"The id\",\"newAddress\":\"The address to set\"}},\"setAddressAsProxy(bytes32,address)\":{\"details\":\"IMPORTANT Use this function carefully, only for ids that don't have an explicit setter function, in order to avoid unexpected consequences\",\"params\":{\"id\":\"The id\",\"newImplementationAddress\":\"The address of the new implementation\"}},\"setMarketId(string)\":{\"details\":\"This can be used to create an onchain registry of PoolAddressesProviders to identify and validate multiple Aave markets.\",\"params\":{\"newMarketId\":\"The market id\"}},\"setPoolConfiguratorImpl(address)\":{\"params\":{\"newPoolConfiguratorImpl\":\"The new PoolConfigurator implementation\"}},\"setPoolDataProvider(address)\":{\"params\":{\"newDataProvider\":\"The address of the new DataProvider\"}},\"setPoolImpl(address)\":{\"params\":{\"newPoolImpl\":\"The new Pool implementation\"}},\"setPriceOracle(address)\":{\"params\":{\"newPriceOracle\":\"The address of the new PriceOracle\"}},\"setPriceOracleSentinel(address)\":{\"params\":{\"newPriceOracleSentinel\":\"The address of the new PriceOracleSentinel\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PoolAddressesProvider\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getACLAdmin()\":{\"notice\":\"Returns the address of the ACL admin.\"},\"getACLManager()\":{\"notice\":\"Returns the address of the ACL manager.\"},\"getAddress(bytes32)\":{\"notice\":\"Returns an address by its identifier.\"},\"getMarketId()\":{\"notice\":\"Returns the id of the Aave market to which this contract points to.\"},\"getPool()\":{\"notice\":\"Returns the address of the Pool proxy.\"},\"getPoolConfigurator()\":{\"notice\":\"Returns the address of the PoolConfigurator proxy.\"},\"getPoolDataProvider()\":{\"notice\":\"Returns the address of the data provider.\"},\"getPriceOracle()\":{\"notice\":\"Returns the address of the price oracle.\"},\"getPriceOracleSentinel()\":{\"notice\":\"Returns the address of the price oracle sentinel.\"},\"setACLAdmin(address)\":{\"notice\":\"Updates the address of the ACL admin.\"},\"setACLManager(address)\":{\"notice\":\"Updates the address of the ACL manager.\"},\"setAddress(bytes32,address)\":{\"notice\":\"Sets an address for an id replacing the address saved in the addresses map.\"},\"setAddressAsProxy(bytes32,address)\":{\"notice\":\"General function to update the implementation of a proxy registered with certain `id`. If there is no proxy registered, it will instantiate one and set as implementation the `newImplementationAddress`.\"},\"setMarketId(string)\":{\"notice\":\"Associates an id with a specific PoolAddressesProvider.\"},\"setPoolConfiguratorImpl(address)\":{\"notice\":\"Updates the implementation of the PoolConfigurator, or creates a proxy setting the new `PoolConfigurator` implementation when the function is called for the first time.\"},\"setPoolDataProvider(address)\":{\"notice\":\"Updates the address of the data provider.\"},\"setPoolImpl(address)\":{\"notice\":\"Updates the implementation of the Pool, or creates a proxy setting the new `pool` implementation when the function is called for the first time.\"},\"setPriceOracle(address)\":{\"notice\":\"Updates the address of the price oracle.\"},\"setPriceOracleSentinel(address)\":{\"notice\":\"Updates the address of the price oracle sentinel.\"}},\"notice\":\"Main registry of addresses part of or connected to the protocol, including permissioned roles\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/configuration/PoolAddressesProvider.sol\":\"PoolAddressesProvider\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize, which returns 0 for contracts in\\r\\n    // construction, since the code is only stored at the end of the\\r\\n    // constructor execution.\\r\\n\\r\\n    uint256 size;\\r\\n    assembly {\\r\\n      size := extcodesize(account)\\r\\n    }\\r\\n    return size > 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\r\\n\\r\\n    (bool success, ) = recipient.call{value: amount}('');\\r\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a Solidity function call using a low level `call`. A\\r\\n   * plain `call` is an unsafe replacement for a function call: use this\\r\\n   * function instead.\\r\\n   *\\r\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n   * function (like regular Solidity function calls).\\r\\n   *\\r\\n   * Returns the raw returned data. To convert to the expected return value,\\r\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `target` must be a contract.\\r\\n   * - calling `target` with `data` must not revert.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionCall(target, data, 'Address: low-level call failed');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but also transferring `value` wei to `target`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the calling contract must have an ETH balance of at least `value`.\\r\\n   * - the called Solidity function must be `payable`.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(address(this).balance >= value, 'Address: insufficient balance for call');\\r\\n    require(isContract(target), 'Address: call to non-contract');\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data\\r\\n  ) internal view returns (bytes memory) {\\r\\n    return functionStaticCall(target, data, 'Address: low-level static call failed');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    require(isContract(target), 'Address: static call to non-contract');\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionDelegateCall(target, data, 'Address: low-level delegate call failed');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(isContract(target), 'Address: delegate call to non-contract');\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n   * revert reason using the provided one.\\r\\n   *\\r\\n   * _Available since v4.3._\\r\\n   */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xc9d51898843a36129e38e83a6ff67c4b4047b00e476f5c217476a6d27e7050ed\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n  function _msgSender() internal view virtual returns (address payable) {\\r\\n    return payable(msg.sender);\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view virtual returns (bytes memory) {\\r\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n    return msg.data;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x58e76abc9cac3909e67c990d0b1f781a845cd294c0fc91a5b3b000510e2043bf\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './Context.sol';\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n  address private _owner;\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n   */\\r\\n  constructor() {\\r\\n    address msgSender = _msgSender();\\r\\n    _owner = msgSender;\\r\\n    emit OwnershipTransferred(address(0), msgSender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Leaves the contract without owner. It will not be possible to call\\r\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n   * thereby removing any functionality that is only available to the owner.\\r\\n   */\\r\\n  function renounceOwnership() public virtual onlyOwner {\\r\\n    emit OwnershipTransferred(_owner, address(0));\\r\\n    _owner = address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\r\\n    emit OwnershipTransferred(_owner, newOwner);\\r\\n    _owner = newOwner;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xac1c6c6375d3eb342bb747f761286a5422d21f8fdd79deca503f64f2464558d6\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './Proxy.sol';\\r\\nimport '../contracts/Address.sol';\\r\\n\\r\\n/**\\r\\n * @title BaseUpgradeabilityProxy\\r\\n * @dev This contract implements a proxy that allows to change the\\r\\n * implementation address to which it will delegate.\\r\\n * Such a change is called an implementation upgrade.\\r\\n */\\r\\ncontract BaseUpgradeabilityProxy is Proxy {\\r\\n  /**\\r\\n   * @dev Emitted when the implementation is upgraded.\\r\\n   * @param implementation Address of the new implementation.\\r\\n   */\\r\\n  event Upgraded(address indexed implementation);\\r\\n\\r\\n  /**\\r\\n   * @dev Storage slot with the address of the current implementation.\\r\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\r\\n   * validated in the constructor.\\r\\n   */\\r\\n  bytes32 internal constant IMPLEMENTATION_SLOT =\\r\\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current implementation.\\r\\n   * @return impl Address of the current implementation\\r\\n   */\\r\\n  function _implementation() internal view override returns (address impl) {\\r\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\r\\n    //solium-disable-next-line\\r\\n    assembly {\\r\\n      impl := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Upgrades the proxy to a new implementation.\\r\\n   * @param newImplementation Address of the new implementation.\\r\\n   */\\r\\n  function _upgradeTo(address newImplementation) internal {\\r\\n    _setImplementation(newImplementation);\\r\\n    emit Upgraded(newImplementation);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the implementation address of the proxy.\\r\\n   * @param newImplementation Address of the new implementation.\\r\\n   */\\r\\n  function _setImplementation(address newImplementation) internal {\\r\\n    require(\\r\\n      Address.isContract(newImplementation),\\r\\n      'Cannot set a proxy implementation to a non-contract address'\\r\\n    );\\r\\n\\r\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\r\\n\\r\\n    //solium-disable-next-line\\r\\n    assembly {\\r\\n      sstore(slot, newImplementation)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x2abd216da6820c75bb53fa36400115bb24042fc903c5db5f84384c8ca04eee82\",\"license\":\"AGPL-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './BaseUpgradeabilityProxy.sol';\\r\\n\\r\\n/**\\r\\n * @title InitializableUpgradeabilityProxy\\r\\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\\r\\n * implementation and init data.\\r\\n */\\r\\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\\r\\n  /**\\r\\n   * @dev Contract initializer.\\r\\n   * @param _logic Address of the initial implementation.\\r\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\r\\n   * It should include the signature and the parameters of the function to be called, as described in\\r\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\r\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\r\\n   */\\r\\n  function initialize(address _logic, bytes memory _data) public payable {\\r\\n    require(_implementation() == address(0));\\r\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\r\\n    _setImplementation(_logic);\\r\\n    if (_data.length > 0) {\\r\\n      (bool success, ) = _logic.delegatecall(_data);\\r\\n      require(success);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x7fcf26a5de2aebe94615bd21b7c5eb304460e9d0bb17a65e5a5a5e2359dadc12\",\"license\":\"AGPL-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Proxy\\r\\n * @dev Implements delegation of calls to other contracts, with proper\\r\\n * forwarding of return values and bubbling of failures.\\r\\n * It defines a fallback function that delegates all calls to the address\\r\\n * returned by the abstract _implementation() internal function.\\r\\n */\\r\\nabstract contract Proxy {\\r\\n  /**\\r\\n   * @dev Fallback function.\\r\\n   * Will run if no other function in the contract matches the call data.\\r\\n   * Implemented entirely in `_fallback`.\\r\\n   */\\r\\n  fallback() external payable {\\r\\n    _fallback();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return The Address of the implementation.\\r\\n   */\\r\\n  function _implementation() internal view virtual returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Delegates execution to an implementation contract.\\r\\n   * This is a low level function that doesn't return to its internal call site.\\r\\n   * It will return to the external caller whatever the implementation returns.\\r\\n   * @param implementation Address to delegate.\\r\\n   */\\r\\n  function _delegate(address implementation) internal {\\r\\n    //solium-disable-next-line\\r\\n    assembly {\\r\\n      // Copy msg.data. We take full control of memory in this inline assembly\\r\\n      // block because it will not return to Solidity code. We overwrite the\\r\\n      // Solidity scratch pad at memory position 0.\\r\\n      calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n      // Call the implementation.\\r\\n      // out and outsize are 0 because we don't know the size yet.\\r\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\r\\n\\r\\n      // Copy the returned data.\\r\\n      returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n      switch result\\r\\n      // delegatecall returns 0 on error.\\r\\n      case 0 {\\r\\n        revert(0, returndatasize())\\r\\n      }\\r\\n      default {\\r\\n        return(0, returndatasize())\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Function that is run as the first thing in the fallback function.\\r\\n   * Can be redefined in derived contracts to add functionality.\\r\\n   * Redefinitions must call super._willFallback().\\r\\n   */\\r\\n  function _willFallback() internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev fallback implementation.\\r\\n   * Extracted to enable manual triggering.\\r\\n   */\\r\\n  function _fallback() internal {\\r\\n    _willFallback();\\r\\n    _delegate(_implementation());\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xa222280f4717492204d63d7d730add020b0efd939092ea513782a41c9d714e0e\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IPoolAddressesProvider\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\r\\n */\\r\\ninterface IPoolAddressesProvider {\\r\\n  /**\\r\\n   * @dev Emitted when the market identifier is updated.\\r\\n   * @param oldMarketId The old id of the market\\r\\n   * @param newMarketId The new id of the market\\r\\n   */\\r\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pool is updated.\\r\\n   * @param oldAddress The old address of the Pool\\r\\n   * @param newAddress The new address of the Pool\\r\\n   */\\r\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pool configurator is updated.\\r\\n   * @param oldAddress The old address of the PoolConfigurator\\r\\n   * @param newAddress The new address of the PoolConfigurator\\r\\n   */\\r\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the price oracle is updated.\\r\\n   * @param oldAddress The old address of the PriceOracle\\r\\n   * @param newAddress The new address of the PriceOracle\\r\\n   */\\r\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the ACL manager is updated.\\r\\n   * @param oldAddress The old address of the ACLManager\\r\\n   * @param newAddress The new address of the ACLManager\\r\\n   */\\r\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the ACL admin is updated.\\r\\n   * @param oldAddress The old address of the ACLAdmin\\r\\n   * @param newAddress The new address of the ACLAdmin\\r\\n   */\\r\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the price oracle sentinel is updated.\\r\\n   * @param oldAddress The old address of the PriceOracleSentinel\\r\\n   * @param newAddress The new address of the PriceOracleSentinel\\r\\n   */\\r\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pool data provider is updated.\\r\\n   * @param oldAddress The old address of the PoolDataProvider\\r\\n   * @param newAddress The new address of the PoolDataProvider\\r\\n   */\\r\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a new proxy is created.\\r\\n   * @param id The identifier of the proxy\\r\\n   * @param proxyAddress The address of the created proxy contract\\r\\n   * @param implementationAddress The address of the implementation contract\\r\\n   */\\r\\n  event ProxyCreated(\\r\\n    bytes32 indexed id,\\r\\n    address indexed proxyAddress,\\r\\n    address indexed implementationAddress\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a new non-proxied contract address is registered.\\r\\n   * @param id The identifier of the contract\\r\\n   * @param oldAddress The address of the old contract\\r\\n   * @param newAddress The address of the new contract\\r\\n   */\\r\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\r\\n   * @param id The identifier of the contract\\r\\n   * @param proxyAddress The address of the proxy contract\\r\\n   * @param oldImplementationAddress The address of the old implementation contract\\r\\n   * @param newImplementationAddress The address of the new implementation contract\\r\\n   */\\r\\n  event AddressSetAsProxy(\\r\\n    bytes32 indexed id,\\r\\n    address indexed proxyAddress,\\r\\n    address oldImplementationAddress,\\r\\n    address indexed newImplementationAddress\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the id of the Aave market to which this contract points to.\\r\\n   * @return The market id\\r\\n   */\\r\\n  function getMarketId() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\r\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\r\\n   * identify and validate multiple Aave markets.\\r\\n   * @param newMarketId The market id\\r\\n   */\\r\\n  function setMarketId(string calldata newMarketId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns an address by its identifier.\\r\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\r\\n   * @dev It returns ZERO if there is no registered address with the given id\\r\\n   * @param id The id\\r\\n   * @return The address of the registered for the specified id\\r\\n   */\\r\\n  function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice General function to update the implementation of a proxy registered with\\r\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\r\\n   * set as implementation the `newImplementationAddress`.\\r\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\r\\n   * setter function, in order to avoid unexpected consequences\\r\\n   * @param id The id\\r\\n   * @param newImplementationAddress The address of the new implementation\\r\\n   */\\r\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\r\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\r\\n   * @param id The id\\r\\n   * @param newAddress The address to set\\r\\n   */\\r\\n  function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the Pool proxy.\\r\\n   * @return The Pool proxy address\\r\\n   */\\r\\n  function getPool() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\r\\n   * setting the new `pool` implementation when the function is called for the first time.\\r\\n   * @param newPoolImpl The new Pool implementation\\r\\n   */\\r\\n  function setPoolImpl(address newPoolImpl) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the PoolConfigurator proxy.\\r\\n   * @return The PoolConfigurator proxy address\\r\\n   */\\r\\n  function getPoolConfigurator() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\r\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\r\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\r\\n   */\\r\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the price oracle.\\r\\n   * @return The address of the PriceOracle\\r\\n   */\\r\\n  function getPriceOracle() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the price oracle.\\r\\n   * @param newPriceOracle The address of the new PriceOracle\\r\\n   */\\r\\n  function setPriceOracle(address newPriceOracle) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the ACL manager.\\r\\n   * @return The address of the ACLManager\\r\\n   */\\r\\n  function getACLManager() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the ACL manager.\\r\\n   * @param newAclManager The address of the new ACLManager\\r\\n   */\\r\\n  function setACLManager(address newAclManager) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the ACL admin.\\r\\n   * @return The address of the ACL admin\\r\\n   */\\r\\n  function getACLAdmin() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the ACL admin.\\r\\n   * @param newAclAdmin The address of the new ACL admin\\r\\n   */\\r\\n  function setACLAdmin(address newAclAdmin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the price oracle sentinel.\\r\\n   * @return The address of the PriceOracleSentinel\\r\\n   */\\r\\n  function getPriceOracleSentinel() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the price oracle sentinel.\\r\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\r\\n   */\\r\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the data provider.\\r\\n   * @return The address of the DataProvider\\r\\n   */\\r\\n  function getPoolDataProvider() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the data provider.\\r\\n   * @param newDataProvider The address of the new DataProvider\\r\\n   */\\r\\n  function setPoolDataProvider(address newDataProvider) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf37b9fdb389d45783acfc16664c06f28af953d4a409d1059bdf10b917d41fd4a\",\"license\":\"AGPL-3.0\"},\"contracts/protocol/configuration/PoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {Ownable} from '../../dependencies/openzeppelin/contracts/Ownable.sol';\\r\\nimport {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';\\r\\nimport {InitializableImmutableAdminUpgradeabilityProxy} from '../libraries/upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol';\\r\\n\\r\\n/**\\r\\n * @title PoolAddressesProvider\\r\\n * @author Aave\\r\\n * @notice Main registry of addresses part of or connected to the protocol, including permissioned roles\\r\\n * @dev Acts as factory of proxies and admin of those, so with right to change its implementations\\r\\n * @dev Owned by the Aave Governance\\r\\n */\\r\\ncontract PoolAddressesProvider is Ownable, IPoolAddressesProvider {\\r\\n  // Identifier of the Aave Market\\r\\n  string private _marketId;\\r\\n\\r\\n  // Map of registered addresses (identifier => registeredAddress)\\r\\n  mapping(bytes32 => address) private _addresses;\\r\\n\\r\\n  // Main identifiers\\r\\n  bytes32 private constant POOL = 'POOL';\\r\\n  bytes32 private constant POOL_CONFIGURATOR = 'POOL_CONFIGURATOR';\\r\\n  bytes32 private constant PRICE_ORACLE = 'PRICE_ORACLE';\\r\\n  bytes32 private constant ACL_MANAGER = 'ACL_MANAGER';\\r\\n  bytes32 private constant ACL_ADMIN = 'ACL_ADMIN';\\r\\n  bytes32 private constant PRICE_ORACLE_SENTINEL = 'PRICE_ORACLE_SENTINEL';\\r\\n  bytes32 private constant DATA_PROVIDER = 'DATA_PROVIDER';\\r\\n\\r\\n  /**\\r\\n   * @dev Constructor.\\r\\n   * @param marketId The identifier of the market.\\r\\n   * @param owner The owner address of this contract.\\r\\n   */\\r\\n  constructor(string memory marketId, address owner) {\\r\\n    _setMarketId(marketId);\\r\\n    transferOwnership(owner);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function getMarketId() external view override returns (string memory) {\\r\\n    return _marketId;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function setMarketId(string memory newMarketId) external override onlyOwner {\\r\\n    _setMarketId(newMarketId);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function getAddress(bytes32 id) public view override returns (address) {\\r\\n    return _addresses[id];\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function setAddress(bytes32 id, address newAddress) external override onlyOwner {\\r\\n    address oldAddress = _addresses[id];\\r\\n    _addresses[id] = newAddress;\\r\\n    emit AddressSet(id, oldAddress, newAddress);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function setAddressAsProxy(\\r\\n    bytes32 id,\\r\\n    address newImplementationAddress\\r\\n  ) external override onlyOwner {\\r\\n    address proxyAddress = _addresses[id];\\r\\n    address oldImplementationAddress = _getProxyImplementation(id);\\r\\n    _updateImpl(id, newImplementationAddress);\\r\\n    emit AddressSetAsProxy(id, proxyAddress, oldImplementationAddress, newImplementationAddress);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function getPool() external view override returns (address) {\\r\\n    return getAddress(POOL);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function setPoolImpl(address newPoolImpl) external override onlyOwner {\\r\\n    address oldPoolImpl = _getProxyImplementation(POOL);\\r\\n    _updateImpl(POOL, newPoolImpl);\\r\\n    emit PoolUpdated(oldPoolImpl, newPoolImpl);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function getPoolConfigurator() external view override returns (address) {\\r\\n    return getAddress(POOL_CONFIGURATOR);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external override onlyOwner {\\r\\n    address oldPoolConfiguratorImpl = _getProxyImplementation(POOL_CONFIGURATOR);\\r\\n    _updateImpl(POOL_CONFIGURATOR, newPoolConfiguratorImpl);\\r\\n    emit PoolConfiguratorUpdated(oldPoolConfiguratorImpl, newPoolConfiguratorImpl);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function getPriceOracle() external view override returns (address) {\\r\\n    return getAddress(PRICE_ORACLE);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function setPriceOracle(address newPriceOracle) external override onlyOwner {\\r\\n    address oldPriceOracle = _addresses[PRICE_ORACLE];\\r\\n    _addresses[PRICE_ORACLE] = newPriceOracle;\\r\\n    emit PriceOracleUpdated(oldPriceOracle, newPriceOracle);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function getACLManager() external view override returns (address) {\\r\\n    return getAddress(ACL_MANAGER);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function setACLManager(address newAclManager) external override onlyOwner {\\r\\n    address oldAclManager = _addresses[ACL_MANAGER];\\r\\n    _addresses[ACL_MANAGER] = newAclManager;\\r\\n    emit ACLManagerUpdated(oldAclManager, newAclManager);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function getACLAdmin() external view override returns (address) {\\r\\n    return getAddress(ACL_ADMIN);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function setACLAdmin(address newAclAdmin) external override onlyOwner {\\r\\n    address oldAclAdmin = _addresses[ACL_ADMIN];\\r\\n    _addresses[ACL_ADMIN] = newAclAdmin;\\r\\n    emit ACLAdminUpdated(oldAclAdmin, newAclAdmin);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function getPriceOracleSentinel() external view override returns (address) {\\r\\n    return getAddress(PRICE_ORACLE_SENTINEL);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external override onlyOwner {\\r\\n    address oldPriceOracleSentinel = _addresses[PRICE_ORACLE_SENTINEL];\\r\\n    _addresses[PRICE_ORACLE_SENTINEL] = newPriceOracleSentinel;\\r\\n    emit PriceOracleSentinelUpdated(oldPriceOracleSentinel, newPriceOracleSentinel);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function getPoolDataProvider() external view override returns (address) {\\r\\n    return getAddress(DATA_PROVIDER);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IPoolAddressesProvider\\r\\n  function setPoolDataProvider(address newDataProvider) external override onlyOwner {\\r\\n    address oldDataProvider = _addresses[DATA_PROVIDER];\\r\\n    _addresses[DATA_PROVIDER] = newDataProvider;\\r\\n    emit PoolDataProviderUpdated(oldDataProvider, newDataProvider);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Internal function to update the implementation of a specific proxied component of the protocol.\\r\\n   * @dev If there is no proxy registered with the given identifier, it creates the proxy setting `newAddress`\\r\\n   *   as implementation and calls the initialize() function on the proxy\\r\\n   * @dev If there is already a proxy registered, it just updates the implementation to `newAddress` and\\r\\n   *   calls the initialize() function via upgradeToAndCall() in the proxy\\r\\n   * @param id The id of the proxy to be updated\\r\\n   * @param newAddress The address of the new implementation\\r\\n   */\\r\\n  function _updateImpl(bytes32 id, address newAddress) internal {\\r\\n    address proxyAddress = _addresses[id];\\r\\n    InitializableImmutableAdminUpgradeabilityProxy proxy;\\r\\n    bytes memory params = abi.encodeWithSignature('initialize(address)', address(this));\\r\\n\\r\\n    if (proxyAddress == address(0)) {\\r\\n      proxy = new InitializableImmutableAdminUpgradeabilityProxy(address(this));\\r\\n      _addresses[id] = proxyAddress = address(proxy);\\r\\n      proxy.initialize(newAddress, params);\\r\\n      emit ProxyCreated(id, proxyAddress, newAddress);\\r\\n    } else {\\r\\n      proxy = InitializableImmutableAdminUpgradeabilityProxy(payable(proxyAddress));\\r\\n      proxy.upgradeToAndCall(newAddress, params);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the identifier of the Aave market.\\r\\n   * @param newMarketId The new id of the market\\r\\n   */\\r\\n  function _setMarketId(string memory newMarketId) internal {\\r\\n    string memory oldMarketId = _marketId;\\r\\n    _marketId = newMarketId;\\r\\n    emit MarketIdSet(oldMarketId, newMarketId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the the implementation contract of the proxy contract by its identifier.\\r\\n   * @dev It returns ZERO if there is no registered address with the given id\\r\\n   * @dev It reverts if the registered address with the given id is not `InitializableImmutableAdminUpgradeabilityProxy`\\r\\n   * @param id The id\\r\\n   * @return The address of the implementation contract\\r\\n   */\\r\\n  function _getProxyImplementation(bytes32 id) internal returns (address) {\\r\\n    address proxyAddress = _addresses[id];\\r\\n    if (proxyAddress == address(0)) {\\r\\n      return address(0);\\r\\n    } else {\\r\\n      address payable payableProxyAddress = payable(proxyAddress);\\r\\n      return InitializableImmutableAdminUpgradeabilityProxy(payableProxyAddress).implementation();\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x17d02f55f433d59b92461f79b6ef5898bb1abf665e10a48baa7a64a6686e2204\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/upgradeability/BaseImmutableAdminUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {BaseUpgradeabilityProxy} from '../../../dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol';\\r\\n\\r\\n/**\\r\\n * @title BaseImmutableAdminUpgradeabilityProxy\\r\\n * @author Aave, inspired by the OpenZeppelin upgradeability proxy pattern\\r\\n * @notice This contract combines an upgradeability proxy with an authorization\\r\\n * mechanism for administrative tasks.\\r\\n * @dev The admin role is stored in an immutable, which helps saving transactions costs\\r\\n * All external functions in this contract must be guarded by the\\r\\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\\r\\n * feature proposal that would enable this to be done automatically.\\r\\n */\\r\\ncontract BaseImmutableAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\\r\\n  address internal immutable _admin;\\r\\n\\r\\n  /**\\r\\n   * @dev Constructor.\\r\\n   * @param admin The address of the admin\\r\\n   */\\r\\n  constructor(address admin) {\\r\\n    _admin = admin;\\r\\n  }\\r\\n\\r\\n  modifier ifAdmin() {\\r\\n    if (msg.sender == _admin) {\\r\\n      _;\\r\\n    } else {\\r\\n      _fallback();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Return the admin address\\r\\n   * @return The address of the proxy admin.\\r\\n   */\\r\\n  function admin() external ifAdmin returns (address) {\\r\\n    return _admin;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Return the implementation address\\r\\n   * @return The address of the implementation.\\r\\n   */\\r\\n  function implementation() external ifAdmin returns (address) {\\r\\n    return _implementation();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Upgrade the backing implementation of the proxy.\\r\\n   * @dev Only the admin can call this function.\\r\\n   * @param newImplementation The address of the new implementation.\\r\\n   */\\r\\n  function upgradeTo(address newImplementation) external ifAdmin {\\r\\n    _upgradeTo(newImplementation);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Upgrade the backing implementation of the proxy and call a function\\r\\n   * on the new implementation.\\r\\n   * @dev This is useful to initialize the proxied contract.\\r\\n   * @param newImplementation The address of the new implementation.\\r\\n   * @param data Data to send as msg.data in the low level call.\\r\\n   * It should include the signature and the parameters of the function to be called, as described in\\r\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\r\\n   */\\r\\n  function upgradeToAndCall(\\r\\n    address newImplementation,\\r\\n    bytes calldata data\\r\\n  ) external payable ifAdmin {\\r\\n    _upgradeTo(newImplementation);\\r\\n    (bool success, ) = newImplementation.delegatecall(data);\\r\\n    require(success);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Only fall back when the sender is not the admin.\\r\\n   */\\r\\n  function _willFallback() internal virtual override {\\r\\n    require(msg.sender != _admin, 'Cannot call fallback function from the proxy admin');\\r\\n    super._willFallback();\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x1e055f3d3328da79f6e2b450cb6abb8fb1f2accda87c94c63de449bfa0d7b8e5\",\"license\":\"AGPL-3.0\"},\"contracts/protocol/libraries/upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {InitializableUpgradeabilityProxy} from '../../../dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol';\\r\\nimport {Proxy} from '../../../dependencies/openzeppelin/upgradeability/Proxy.sol';\\r\\nimport {BaseImmutableAdminUpgradeabilityProxy} from './BaseImmutableAdminUpgradeabilityProxy.sol';\\r\\n\\r\\n/**\\r\\n * @title InitializableAdminUpgradeabilityProxy\\r\\n * @author Aave\\r\\n * @dev Extends BaseAdminUpgradeabilityProxy with an initializer function\\r\\n */\\r\\ncontract InitializableImmutableAdminUpgradeabilityProxy is\\r\\n  BaseImmutableAdminUpgradeabilityProxy,\\r\\n  InitializableUpgradeabilityProxy\\r\\n{\\r\\n  /**\\r\\n   * @dev Constructor.\\r\\n   * @param admin The address of the admin\\r\\n   */\\r\\n  constructor(address admin) BaseImmutableAdminUpgradeabilityProxy(admin) {\\r\\n    // Intentionally left blank\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc BaseImmutableAdminUpgradeabilityProxy\\r\\n  function _willFallback() internal override(BaseImmutableAdminUpgradeabilityProxy, Proxy) {\\r\\n    BaseImmutableAdminUpgradeabilityProxy._willFallback();\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xc6722efa515d38e501842243b0633cb1801d1a340e75ae156e6d260f24d0f37f\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002071380380620020718339810160408190526200003491620002f1565b600080546001600160a01b0319163390811782556040519091829160008051602062002051833981519152908290a3506200006f8262000082565b6200007a8162000187565b505062000537565b6000600180546200009390620003be565b80601f0160208091040260200160405190810160405280929190818152602001828054620000c190620003be565b8015620001125780601f10620000e65761010080835404028352916020019162000112565b820191906000526020600020905b815481529060010190602001808311620000f457829003601f168201915b5050505050905081600190816200012a91906200044d565b50816040516200013b919062000519565b60405180910390208160405162000153919062000519565b604051908190038120907fe685c8cdecc6030c45030fd54778812cb84ed8e4467c38294403d68ba786082390600090a35050565b6000546001600160a01b03163314620001e75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166200024e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001de565b600080546040516001600160a01b03808516939216916000805160206200205183398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620002cb578181015183820152602001620002b1565b50506000910152565b80516001600160a01b0381168114620002ec57600080fd5b919050565b600080604083850312156200030557600080fd5b82516001600160401b03808211156200031d57600080fd5b818501915085601f8301126200033257600080fd5b81518181111562000347576200034762000298565b604051601f8201601f19908116603f0116810190838211818310171562000372576200037262000298565b816040528281528860208487010111156200038c57600080fd5b6200039f836020830160208801620002ae565b8096505050505050620003b560208401620002d4565b90509250929050565b600181811c90821680620003d357607f821691505b602082108103620003f457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200044857600081815260208120601f850160051c81016020861015620004235750805b601f850160051c820191505b8181101562000444578281556001016200042f565b5050505b505050565b81516001600160401b0381111562000469576200046962000298565b62000481816200047a8454620003be565b84620003fa565b602080601f831160018114620004b95760008415620004a05750858301515b600019600386901b1c1916600185901b17855562000444565b600085815260208120601f198616915b82811015620004ea57888601518255948401946001909101908401620004c9565b5085821015620005095787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516200052d818460208701620002ae565b9190910192915050565b611b0a80620005476000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806376d84ffc116100b8578063e4ca28b71161007c578063e4ca28b714610254578063e860accb14610267578063ed301ca91461026f578063f2fde38b14610282578063f67b184714610295578063fca513a8146102a857600080fd5b806376d84ffc146101f75780638da5cb5b1461020a578063a15644061461021b578063ca446dd91461022e578063e44e9ed11461024157600080fd5b80635dcc528c1161010a5780635dcc528c146101b15780635eb88d3d146101c4578063631adfca146101cc578063707cd716146101d4578063715018a6146101dc57806374944cec146101e457600080fd5b8063026b1d5f146101475780630e67178c1461016c57806321f8a72114610174578063530e784f14610187578063568ef4701461019c575b600080fd5b61014f6102b0565b6040516001600160a01b0390911681526020015b60405180910390f35b61014f6102c7565b61014f610182366004610f18565b6102da565b61019a610195366004610f46565b6102f5565b005b6101a46103b0565b6040516101639190610fba565b61019a6101bf366004610fcd565b610442565b61014f6104e7565b61014f61050a565b61014f610529565b61019a610542565b61019a6101f2366004610f46565b6105b6565b61019a610205366004610f46565b610671565b6000546001600160a01b031661014f565b61019a610229366004610f46565b610720565b61019a61023c366004610fcd565b6107b3565b61019a61024f366004610f46565b61083b565b61019a610262366004610f46565b6108ee565b61014f61099b565b61019a61027d366004610f46565b6109b6565b61019a610290366004610f46565b610a67565b61019a6102a3366004611013565b610b51565b61014f610b87565b60006102c2631413d3d360e21b6102da565b905090565b60006102c26820a1a62fa0a226a4a760b91b5b6000908152600260205260409020546001600160a01b031690565b6000546001600160a01b031633146103285760405162461bcd60e51b815260040161031f906110c4565b60405180910390fd5b6b50524943455f4f5241434c4560a01b600090815260026020527f740f710666bd7a12af42df98311e541e47f7fd33d382d11602457a6d540cbd6380546001600160a01b038481166001600160a01b03198316811790935560405191169283917f56b5f80d8cac1479698aa7d01605fd6111e90b15fc4d2b377417f46034876cbd9190a35050565b6060600180546103bf906110f9565b80601f01602080910402602001604051908101604052809291908181526020018280546103eb906110f9565b80156104385780601f1061040d57610100808354040283529160200191610438565b820191906000526020600020905b81548152906001019060200180831161041b57829003601f168201915b5050505050905090565b6000546001600160a01b0316331461046c5760405162461bcd60e51b815260040161031f906110c4565b6000828152600260205260408120546001600160a01b03169061048e84610ba1565b905061049a8484610c3e565b6040516001600160a01b038281168252808516919084169086907f3bbd45b5429b385e3fb37ad5cd1cd1435a3c8ec32196c7937597365a3fd3e99c9060200160405180910390a450505050565b60006102c27414149250d157d3d49050d31157d4d1539512539153605a1b6102da565b60006102c2702827a7a62fa1a7a72324a3aaa920aa27a960791b6102da565b60006102c26a20a1a62fa6a0a720a3a2a960a91b6102da565b6000546001600160a01b0316331461056c5760405162461bcd60e51b815260040161031f906110c4565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146105e05760405162461bcd60e51b815260040161031f906110c4565b7414149250d157d3d49050d31157d4d1539512539153605a1b600090815260026020527f0d2c1bcee56447b4f46248272f34207a580a5c40f666a31f4e2fbb470ea53ab880546001600160a01b038481166001600160a01b03198316811790935560405191169283917f5326514eeca90494a14bedabcff812a0e683029ee85d1e23824d44fd14cd6ae79190a35050565b6000546001600160a01b0316331461069b5760405162461bcd60e51b815260040161031f906110c4565b6820a1a62fa0a226a4a760b91b600090815260026020527ffab167ad2009dcb80ee379700bb4bd029d97c1181ed9d961625632c8a6f051c680546001600160a01b038481166001600160a01b03198316811790935560405191169283917fe9cf53972264dc95304fd424458745019ddfca0e37ae8f703d74772c41ad115b9190a35050565b6000546001600160a01b0316331461074a5760405162461bcd60e51b815260040161031f906110c4565b600061075c631413d3d360e21b610ba1565b905061076f631413d3d360e21b83610c3e565b816001600160a01b0316816001600160a01b03167f90affc163f1a2dfedcd36aa02ed992eeeba8100a4014f0b4cdc20ea265a6662760405160405180910390a35050565b6000546001600160a01b031633146107dd5760405162461bcd60e51b815260040161031f906110c4565b60008281526002602052604080822080546001600160a01b031981166001600160a01b038681169182179093559251911692839186917f9ef0e8c8e52743bb38b83b17d9429141d494b8041ca6d616a6c77cebae9cd8b791a4505050565b6000546001600160a01b031633146108655760405162461bcd60e51b815260040161031f906110c4565b6c2220aa20afa82927ab24a222a960991b600090815260026020527fcd7944601aaa5cd7ccdae1bebec659e98c6aac8f12486b30e59db0d39698051f80546001600160a01b038481166001600160a01b03198316811790935560405191169283917fc853974cfbf81487a14a23565917bee63f527853bcb5fa54f2ae1cdf8a38356d9190a35050565b6000546001600160a01b031633146109185760405162461bcd60e51b815260040161031f906110c4565b6000610937702827a7a62fa1a7a72324a3aaa920aa27a960791b610ba1565b9050610957702827a7a62fa1a7a72324a3aaa920aa27a960791b83610c3e565b816001600160a01b0316816001600160a01b03167f8932892569eba59c8382a089d9b732d1f49272878775235761a2a6b0309cd46560405160405180910390a35050565b60006102c26c2220aa20afa82927ab24a222a960991b6102da565b6000546001600160a01b031633146109e05760405162461bcd60e51b815260040161031f906110c4565b6a20a1a62fa6a0a720a3a2a960a91b600090815260026020527f9edef266ef35fd0c6e131df0f31a330f3dd4c4d19dd31ed615c21d005c68116b80546001600160a01b038481166001600160a01b03198316811790935560405191169283917fb30efa04327bb8a537d61cc1e5c48095345ad18ef7cc04e6bacf7dfb6caaf5079190a35050565b6000546001600160a01b03163314610a915760405162461bcd60e51b815260040161031f906110c4565b6001600160a01b038116610af65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161031f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610b7b5760405162461bcd60e51b815260040161031f906110c4565b610b8481610e14565b50565b60006102c26b50524943455f4f5241434c4560a01b6102da565b6000818152600260205260408120546001600160a01b031680610bc75750600092915050565b6000819050806001600160a01b0316635c60da1b6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c30919061112d565b949350505050565b50919050565b6000828152600260205260408082205490513060248201526001600160a01b039091169190819060440160408051601f198184030181529190526020810180516001600160e01b031663189acdbd60e31b17905290506001600160a01b038316610da95730604051610caf90610f0b565b6001600160a01b039091168152602001604051809103906000f080158015610cdb573d6000803e3d6000fd5b506000868152600260205260409081902080546001600160a01b0319166001600160a01b038416908117909155905163347d5e2560e21b81529194508493509063d1f5789490610d31908790859060040161114a565b600060405180830381600087803b158015610d4b57600080fd5b505af1158015610d5f573d6000803e3d6000fd5b50505050836001600160a01b0316836001600160a01b0316867f4a465a9bd819d9662563c1e11ae958f8109e437e7f4bf1c6ef0b9a7b3f35d47860405160405180910390a4610e0d565b60405163278f794360e11b81528392506001600160a01b03831690634f1ef28690610dda908790859060040161114a565b600060405180830381600087803b158015610df457600080fd5b505af1158015610e08573d6000803e3d6000fd5b505050505b5050505050565b600060018054610e23906110f9565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4f906110f9565b8015610e9c5780601f10610e7157610100808354040283529160200191610e9c565b820191906000526020600020905b815481529060010190602001808311610e7f57829003601f168201915b505050505090508160019081610eb291906111bd565b5081604051610ec1919061127d565b604051809103902081604051610ed7919061127d565b604051908190038120907fe685c8cdecc6030c45030fd54778812cb84ed8e4467c38294403d68ba786082390600090a35050565b61083b8061129a83390190565b600060208284031215610f2a57600080fd5b5035919050565b6001600160a01b0381168114610b8457600080fd5b600060208284031215610f5857600080fd5b8135610f6381610f31565b9392505050565b60005b83811015610f85578181015183820152602001610f6d565b50506000910152565b60008151808452610fa6816020860160208601610f6a565b601f01601f19169290920160200192915050565b602081526000610f636020830184610f8e565b60008060408385031215610fe057600080fd5b823591506020830135610ff281610f31565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561102557600080fd5b813567ffffffffffffffff8082111561103d57600080fd5b818401915084601f83011261105157600080fd5b81358181111561106357611063610ffd565b604051601f8201601f19908116603f0116810190838211818310171561108b5761108b610ffd565b816040528281528760208487010111156110a457600080fd5b826020860160208301376000928101602001929092525095945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c9082168061110d57607f821691505b602082108103610c3857634e487b7160e01b600052602260045260246000fd5b60006020828403121561113f57600080fd5b8151610f6381610f31565b6001600160a01b0383168152604060208201819052600090610c3090830184610f8e565b601f8211156111b857600081815260208120601f850160051c810160208610156111955750805b601f850160051c820191505b818110156111b4578281556001016111a1565b5050505b505050565b815167ffffffffffffffff8111156111d7576111d7610ffd565b6111eb816111e584546110f9565b8461116e565b602080601f83116001811461122057600084156112085750858301515b600019600386901b1c1916600185901b1785556111b4565b600085815260208120601f198616915b8281101561124f57888601518255948401946001909101908401611230565b508582101561126d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000825161128f818460208701610f6a565b919091019291505056fe60a060405234801561001057600080fd5b5060405161083b38038061083b83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161078d6100ae60003960008181610112015281816101560152818161020e0152818161034d015281816103760152610499015261078d6000f3fe60806040526004361061004a5760003560e01c80633659cfe6146100545780634f1ef286146100745780635c60da1b14610087578063d1f57894146100b8578063f851a440146100cb575b6100526100e0565b005b34801561006057600080fd5b5061005261006f36600461053e565b610108565b610052610082366004610560565b61014c565b34801561009357600080fd5b5061009c610202565b6040516001600160a01b03909116815260200160405180910390f35b6100526100c63660046105f9565b610253565b3480156100d757600080fd5b5061009c610341565b6100e8610398565b6101066101016000805160206107388339815191525490565b6103a0565b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361014457610141816103c4565b50565b6101416100e0565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633036101f557610185836103c4565b6000836001600160a01b031683836040516101a19291906106bb565b600060405180830381855af49150503d80600081146101dc576040519150601f19603f3d011682016040523d82523d6000602084013e6101e1565b606091505b50509050806101ef57600080fd5b50505050565b6101fd6100e0565b505050565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361024857506000805160206107388339815191525490565b6102506100e0565b90565b600061026b6000805160206107388339815191525490565b6001600160a01b03161461027e57600080fd5b6102a960017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd6106cb565b600080516020610738833981519152146102c5576102c56106f2565b6102ce82610404565b80511561033d576000826001600160a01b0316826040516102ef9190610708565b600060405180830381855af49150503d806000811461032a576040519150601f19603f3d011682016040523d82523d6000602084013e61032f565b606091505b50509050806101fd57600080fd5b5050565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361024857507f000000000000000000000000000000000000000000000000000000000000000090565b61010661048f565b3660008037600080366000845af43d6000803e8080156103bf573d6000f35b3d6000fd5b6103cd81610404565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b803b61047d5760405162461bcd60e51b815260206004820152603b60248201527f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f60448201527f6e20746f2061206e6f6e2d636f6e74726163742061646472657373000000000060648201526084015b60405180910390fd5b60008051602061073883398151915255565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633036101065760405162461bcd60e51b815260206004820152603260248201527f43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e20667260448201527137b6903a343290383937bc3c9030b236b4b760711b6064820152608401610474565b80356001600160a01b038116811461053957600080fd5b919050565b60006020828403121561055057600080fd5b61055982610522565b9392505050565b60008060006040848603121561057557600080fd5b61057e84610522565b9250602084013567ffffffffffffffff8082111561059b57600080fd5b818601915086601f8301126105af57600080fd5b8135818111156105be57600080fd5b8760208285010111156105d057600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561060c57600080fd5b61061583610522565b9150602083013567ffffffffffffffff8082111561063257600080fd5b818501915085601f83011261064657600080fd5b813581811115610658576106586105e3565b604051601f8201601f19908116603f01168101908382118183101715610680576106806105e3565b8160405282815288602084870101111561069957600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b8183823760009101908152919050565b818103818111156106ec57634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052600160045260246000fd5b6000825160005b81811015610729576020818601810151858301520161070f565b50600092019182525091905056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220e40091883b1bdf23bc1387a54a12fa477629a9643c52a92dd39aae7996926f7564736f6c63430008140033a264697066735822122000fd3498a75320721d6b4d9978187cb20a2954c5b74ca2768171861e23046a3664736f6c634300081400338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c806376d84ffc116100b8578063e4ca28b71161007c578063e4ca28b714610254578063e860accb14610267578063ed301ca91461026f578063f2fde38b14610282578063f67b184714610295578063fca513a8146102a857600080fd5b806376d84ffc146101f75780638da5cb5b1461020a578063a15644061461021b578063ca446dd91461022e578063e44e9ed11461024157600080fd5b80635dcc528c1161010a5780635dcc528c146101b15780635eb88d3d146101c4578063631adfca146101cc578063707cd716146101d4578063715018a6146101dc57806374944cec146101e457600080fd5b8063026b1d5f146101475780630e67178c1461016c57806321f8a72114610174578063530e784f14610187578063568ef4701461019c575b600080fd5b61014f6102b0565b6040516001600160a01b0390911681526020015b60405180910390f35b61014f6102c7565b61014f610182366004610f18565b6102da565b61019a610195366004610f46565b6102f5565b005b6101a46103b0565b6040516101639190610fba565b61019a6101bf366004610fcd565b610442565b61014f6104e7565b61014f61050a565b61014f610529565b61019a610542565b61019a6101f2366004610f46565b6105b6565b61019a610205366004610f46565b610671565b6000546001600160a01b031661014f565b61019a610229366004610f46565b610720565b61019a61023c366004610fcd565b6107b3565b61019a61024f366004610f46565b61083b565b61019a610262366004610f46565b6108ee565b61014f61099b565b61019a61027d366004610f46565b6109b6565b61019a610290366004610f46565b610a67565b61019a6102a3366004611013565b610b51565b61014f610b87565b60006102c2631413d3d360e21b6102da565b905090565b60006102c26820a1a62fa0a226a4a760b91b5b6000908152600260205260409020546001600160a01b031690565b6000546001600160a01b031633146103285760405162461bcd60e51b815260040161031f906110c4565b60405180910390fd5b6b50524943455f4f5241434c4560a01b600090815260026020527f740f710666bd7a12af42df98311e541e47f7fd33d382d11602457a6d540cbd6380546001600160a01b038481166001600160a01b03198316811790935560405191169283917f56b5f80d8cac1479698aa7d01605fd6111e90b15fc4d2b377417f46034876cbd9190a35050565b6060600180546103bf906110f9565b80601f01602080910402602001604051908101604052809291908181526020018280546103eb906110f9565b80156104385780601f1061040d57610100808354040283529160200191610438565b820191906000526020600020905b81548152906001019060200180831161041b57829003601f168201915b5050505050905090565b6000546001600160a01b0316331461046c5760405162461bcd60e51b815260040161031f906110c4565b6000828152600260205260408120546001600160a01b03169061048e84610ba1565b905061049a8484610c3e565b6040516001600160a01b038281168252808516919084169086907f3bbd45b5429b385e3fb37ad5cd1cd1435a3c8ec32196c7937597365a3fd3e99c9060200160405180910390a450505050565b60006102c27414149250d157d3d49050d31157d4d1539512539153605a1b6102da565b60006102c2702827a7a62fa1a7a72324a3aaa920aa27a960791b6102da565b60006102c26a20a1a62fa6a0a720a3a2a960a91b6102da565b6000546001600160a01b0316331461056c5760405162461bcd60e51b815260040161031f906110c4565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146105e05760405162461bcd60e51b815260040161031f906110c4565b7414149250d157d3d49050d31157d4d1539512539153605a1b600090815260026020527f0d2c1bcee56447b4f46248272f34207a580a5c40f666a31f4e2fbb470ea53ab880546001600160a01b038481166001600160a01b03198316811790935560405191169283917f5326514eeca90494a14bedabcff812a0e683029ee85d1e23824d44fd14cd6ae79190a35050565b6000546001600160a01b0316331461069b5760405162461bcd60e51b815260040161031f906110c4565b6820a1a62fa0a226a4a760b91b600090815260026020527ffab167ad2009dcb80ee379700bb4bd029d97c1181ed9d961625632c8a6f051c680546001600160a01b038481166001600160a01b03198316811790935560405191169283917fe9cf53972264dc95304fd424458745019ddfca0e37ae8f703d74772c41ad115b9190a35050565b6000546001600160a01b0316331461074a5760405162461bcd60e51b815260040161031f906110c4565b600061075c631413d3d360e21b610ba1565b905061076f631413d3d360e21b83610c3e565b816001600160a01b0316816001600160a01b03167f90affc163f1a2dfedcd36aa02ed992eeeba8100a4014f0b4cdc20ea265a6662760405160405180910390a35050565b6000546001600160a01b031633146107dd5760405162461bcd60e51b815260040161031f906110c4565b60008281526002602052604080822080546001600160a01b031981166001600160a01b038681169182179093559251911692839186917f9ef0e8c8e52743bb38b83b17d9429141d494b8041ca6d616a6c77cebae9cd8b791a4505050565b6000546001600160a01b031633146108655760405162461bcd60e51b815260040161031f906110c4565b6c2220aa20afa82927ab24a222a960991b600090815260026020527fcd7944601aaa5cd7ccdae1bebec659e98c6aac8f12486b30e59db0d39698051f80546001600160a01b038481166001600160a01b03198316811790935560405191169283917fc853974cfbf81487a14a23565917bee63f527853bcb5fa54f2ae1cdf8a38356d9190a35050565b6000546001600160a01b031633146109185760405162461bcd60e51b815260040161031f906110c4565b6000610937702827a7a62fa1a7a72324a3aaa920aa27a960791b610ba1565b9050610957702827a7a62fa1a7a72324a3aaa920aa27a960791b83610c3e565b816001600160a01b0316816001600160a01b03167f8932892569eba59c8382a089d9b732d1f49272878775235761a2a6b0309cd46560405160405180910390a35050565b60006102c26c2220aa20afa82927ab24a222a960991b6102da565b6000546001600160a01b031633146109e05760405162461bcd60e51b815260040161031f906110c4565b6a20a1a62fa6a0a720a3a2a960a91b600090815260026020527f9edef266ef35fd0c6e131df0f31a330f3dd4c4d19dd31ed615c21d005c68116b80546001600160a01b038481166001600160a01b03198316811790935560405191169283917fb30efa04327bb8a537d61cc1e5c48095345ad18ef7cc04e6bacf7dfb6caaf5079190a35050565b6000546001600160a01b03163314610a915760405162461bcd60e51b815260040161031f906110c4565b6001600160a01b038116610af65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161031f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610b7b5760405162461bcd60e51b815260040161031f906110c4565b610b8481610e14565b50565b60006102c26b50524943455f4f5241434c4560a01b6102da565b6000818152600260205260408120546001600160a01b031680610bc75750600092915050565b6000819050806001600160a01b0316635c60da1b6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c30919061112d565b949350505050565b50919050565b6000828152600260205260408082205490513060248201526001600160a01b039091169190819060440160408051601f198184030181529190526020810180516001600160e01b031663189acdbd60e31b17905290506001600160a01b038316610da95730604051610caf90610f0b565b6001600160a01b039091168152602001604051809103906000f080158015610cdb573d6000803e3d6000fd5b506000868152600260205260409081902080546001600160a01b0319166001600160a01b038416908117909155905163347d5e2560e21b81529194508493509063d1f5789490610d31908790859060040161114a565b600060405180830381600087803b158015610d4b57600080fd5b505af1158015610d5f573d6000803e3d6000fd5b50505050836001600160a01b0316836001600160a01b0316867f4a465a9bd819d9662563c1e11ae958f8109e437e7f4bf1c6ef0b9a7b3f35d47860405160405180910390a4610e0d565b60405163278f794360e11b81528392506001600160a01b03831690634f1ef28690610dda908790859060040161114a565b600060405180830381600087803b158015610df457600080fd5b505af1158015610e08573d6000803e3d6000fd5b505050505b5050505050565b600060018054610e23906110f9565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4f906110f9565b8015610e9c5780601f10610e7157610100808354040283529160200191610e9c565b820191906000526020600020905b815481529060010190602001808311610e7f57829003601f168201915b505050505090508160019081610eb291906111bd565b5081604051610ec1919061127d565b604051809103902081604051610ed7919061127d565b604051908190038120907fe685c8cdecc6030c45030fd54778812cb84ed8e4467c38294403d68ba786082390600090a35050565b61083b8061129a83390190565b600060208284031215610f2a57600080fd5b5035919050565b6001600160a01b0381168114610b8457600080fd5b600060208284031215610f5857600080fd5b8135610f6381610f31565b9392505050565b60005b83811015610f85578181015183820152602001610f6d565b50506000910152565b60008151808452610fa6816020860160208601610f6a565b601f01601f19169290920160200192915050565b602081526000610f636020830184610f8e565b60008060408385031215610fe057600080fd5b823591506020830135610ff281610f31565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561102557600080fd5b813567ffffffffffffffff8082111561103d57600080fd5b818401915084601f83011261105157600080fd5b81358181111561106357611063610ffd565b604051601f8201601f19908116603f0116810190838211818310171561108b5761108b610ffd565b816040528281528760208487010111156110a457600080fd5b826020860160208301376000928101602001929092525095945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c9082168061110d57607f821691505b602082108103610c3857634e487b7160e01b600052602260045260246000fd5b60006020828403121561113f57600080fd5b8151610f6381610f31565b6001600160a01b0383168152604060208201819052600090610c3090830184610f8e565b601f8211156111b857600081815260208120601f850160051c810160208610156111955750805b601f850160051c820191505b818110156111b4578281556001016111a1565b5050505b505050565b815167ffffffffffffffff8111156111d7576111d7610ffd565b6111eb816111e584546110f9565b8461116e565b602080601f83116001811461122057600084156112085750858301515b600019600386901b1c1916600185901b1785556111b4565b600085815260208120601f198616915b8281101561124f57888601518255948401946001909101908401611230565b508582101561126d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000825161128f818460208701610f6a565b919091019291505056fe60a060405234801561001057600080fd5b5060405161083b38038061083b83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161078d6100ae60003960008181610112015281816101560152818161020e0152818161034d015281816103760152610499015261078d6000f3fe60806040526004361061004a5760003560e01c80633659cfe6146100545780634f1ef286146100745780635c60da1b14610087578063d1f57894146100b8578063f851a440146100cb575b6100526100e0565b005b34801561006057600080fd5b5061005261006f36600461053e565b610108565b610052610082366004610560565b61014c565b34801561009357600080fd5b5061009c610202565b6040516001600160a01b03909116815260200160405180910390f35b6100526100c63660046105f9565b610253565b3480156100d757600080fd5b5061009c610341565b6100e8610398565b6101066101016000805160206107388339815191525490565b6103a0565b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361014457610141816103c4565b50565b6101416100e0565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633036101f557610185836103c4565b6000836001600160a01b031683836040516101a19291906106bb565b600060405180830381855af49150503d80600081146101dc576040519150601f19603f3d011682016040523d82523d6000602084013e6101e1565b606091505b50509050806101ef57600080fd5b50505050565b6101fd6100e0565b505050565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361024857506000805160206107388339815191525490565b6102506100e0565b90565b600061026b6000805160206107388339815191525490565b6001600160a01b03161461027e57600080fd5b6102a960017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd6106cb565b600080516020610738833981519152146102c5576102c56106f2565b6102ce82610404565b80511561033d576000826001600160a01b0316826040516102ef9190610708565b600060405180830381855af49150503d806000811461032a576040519150601f19603f3d011682016040523d82523d6000602084013e61032f565b606091505b50509050806101fd57600080fd5b5050565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361024857507f000000000000000000000000000000000000000000000000000000000000000090565b61010661048f565b3660008037600080366000845af43d6000803e8080156103bf573d6000f35b3d6000fd5b6103cd81610404565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b803b61047d5760405162461bcd60e51b815260206004820152603b60248201527f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f60448201527f6e20746f2061206e6f6e2d636f6e74726163742061646472657373000000000060648201526084015b60405180910390fd5b60008051602061073883398151915255565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633036101065760405162461bcd60e51b815260206004820152603260248201527f43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e20667260448201527137b6903a343290383937bc3c9030b236b4b760711b6064820152608401610474565b80356001600160a01b038116811461053957600080fd5b919050565b60006020828403121561055057600080fd5b61055982610522565b9392505050565b60008060006040848603121561057557600080fd5b61057e84610522565b9250602084013567ffffffffffffffff8082111561059b57600080fd5b818601915086601f8301126105af57600080fd5b8135818111156105be57600080fd5b8760208285010111156105d057600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561060c57600080fd5b61061583610522565b9150602083013567ffffffffffffffff8082111561063257600080fd5b818501915085601f83011261064657600080fd5b813581811115610658576106586105e3565b604051601f8201601f19908116603f01168101908382118183101715610680576106806105e3565b8160405282815288602084870101111561069957600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b8183823760009101908152919050565b818103818111156106ec57634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052600160045260246000fd5b6000825160005b81811015610729576020818601810151858301520161070f565b50600092019182525091905056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220e40091883b1bdf23bc1387a54a12fa477629a9643c52a92dd39aae7996926f7564736f6c63430008140033a264697066735822122000fd3498a75320721d6b4d9978187cb20a2954c5b74ca2768171861e23046a3664736f6c63430008140033",
  "devdoc": {
    "author": "Aave",
    "details": "Acts as factory of proxies and admin of those, so with right to change its implementationsOwned by the Aave Governance",
    "events": {
      "ACLAdminUpdated(address,address)": {
        "details": "Emitted when the ACL admin is updated.",
        "params": {
          "newAddress": "The new address of the ACLAdmin",
          "oldAddress": "The old address of the ACLAdmin"
        }
      },
      "ACLManagerUpdated(address,address)": {
        "details": "Emitted when the ACL manager is updated.",
        "params": {
          "newAddress": "The new address of the ACLManager",
          "oldAddress": "The old address of the ACLManager"
        }
      },
      "AddressSet(bytes32,address,address)": {
        "details": "Emitted when a new non-proxied contract address is registered.",
        "params": {
          "id": "The identifier of the contract",
          "newAddress": "The address of the new contract",
          "oldAddress": "The address of the old contract"
        }
      },
      "AddressSetAsProxy(bytes32,address,address,address)": {
        "details": "Emitted when the implementation of the proxy registered with id is updated",
        "params": {
          "id": "The identifier of the contract",
          "newImplementationAddress": "The address of the new implementation contract",
          "oldImplementationAddress": "The address of the old implementation contract",
          "proxyAddress": "The address of the proxy contract"
        }
      },
      "MarketIdSet(string,string)": {
        "details": "Emitted when the market identifier is updated.",
        "params": {
          "newMarketId": "The new id of the market",
          "oldMarketId": "The old id of the market"
        }
      },
      "PoolConfiguratorUpdated(address,address)": {
        "details": "Emitted when the pool configurator is updated.",
        "params": {
          "newAddress": "The new address of the PoolConfigurator",
          "oldAddress": "The old address of the PoolConfigurator"
        }
      },
      "PoolDataProviderUpdated(address,address)": {
        "details": "Emitted when the pool data provider is updated.",
        "params": {
          "newAddress": "The new address of the PoolDataProvider",
          "oldAddress": "The old address of the PoolDataProvider"
        }
      },
      "PoolUpdated(address,address)": {
        "details": "Emitted when the pool is updated.",
        "params": {
          "newAddress": "The new address of the Pool",
          "oldAddress": "The old address of the Pool"
        }
      },
      "PriceOracleSentinelUpdated(address,address)": {
        "details": "Emitted when the price oracle sentinel is updated.",
        "params": {
          "newAddress": "The new address of the PriceOracleSentinel",
          "oldAddress": "The old address of the PriceOracleSentinel"
        }
      },
      "PriceOracleUpdated(address,address)": {
        "details": "Emitted when the price oracle is updated.",
        "params": {
          "newAddress": "The new address of the PriceOracle",
          "oldAddress": "The old address of the PriceOracle"
        }
      },
      "ProxyCreated(bytes32,address,address)": {
        "details": "Emitted when a new proxy is created.",
        "params": {
          "id": "The identifier of the proxy",
          "implementationAddress": "The address of the implementation contract",
          "proxyAddress": "The address of the created proxy contract"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "marketId": "The identifier of the market.",
          "owner": "The owner address of this contract."
        }
      },
      "getACLAdmin()": {
        "returns": {
          "_0": "The address of the ACL admin"
        }
      },
      "getACLManager()": {
        "returns": {
          "_0": "The address of the ACLManager"
        }
      },
      "getAddress(bytes32)": {
        "details": "The returned address might be an EOA or a contract, potentially proxiedIt returns ZERO if there is no registered address with the given id",
        "params": {
          "id": "The id"
        },
        "returns": {
          "_0": "The address of the registered for the specified id"
        }
      },
      "getMarketId()": {
        "returns": {
          "_0": "The market id"
        }
      },
      "getPool()": {
        "returns": {
          "_0": "The Pool proxy address"
        }
      },
      "getPoolConfigurator()": {
        "returns": {
          "_0": "The PoolConfigurator proxy address"
        }
      },
      "getPoolDataProvider()": {
        "returns": {
          "_0": "The address of the DataProvider"
        }
      },
      "getPriceOracle()": {
        "returns": {
          "_0": "The address of the PriceOracle"
        }
      },
      "getPriceOracleSentinel()": {
        "returns": {
          "_0": "The address of the PriceOracleSentinel"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setACLAdmin(address)": {
        "params": {
          "newAclAdmin": "The address of the new ACL admin"
        }
      },
      "setACLManager(address)": {
        "params": {
          "newAclManager": "The address of the new ACLManager"
        }
      },
      "setAddress(bytes32,address)": {
        "details": "IMPORTANT Use this function carefully, as it will do a hard replacement",
        "params": {
          "id": "The id",
          "newAddress": "The address to set"
        }
      },
      "setAddressAsProxy(bytes32,address)": {
        "details": "IMPORTANT Use this function carefully, only for ids that don't have an explicit setter function, in order to avoid unexpected consequences",
        "params": {
          "id": "The id",
          "newImplementationAddress": "The address of the new implementation"
        }
      },
      "setMarketId(string)": {
        "details": "This can be used to create an onchain registry of PoolAddressesProviders to identify and validate multiple Aave markets.",
        "params": {
          "newMarketId": "The market id"
        }
      },
      "setPoolConfiguratorImpl(address)": {
        "params": {
          "newPoolConfiguratorImpl": "The new PoolConfigurator implementation"
        }
      },
      "setPoolDataProvider(address)": {
        "params": {
          "newDataProvider": "The address of the new DataProvider"
        }
      },
      "setPoolImpl(address)": {
        "params": {
          "newPoolImpl": "The new Pool implementation"
        }
      },
      "setPriceOracle(address)": {
        "params": {
          "newPriceOracle": "The address of the new PriceOracle"
        }
      },
      "setPriceOracleSentinel(address)": {
        "params": {
          "newPriceOracleSentinel": "The address of the new PriceOracleSentinel"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PoolAddressesProvider",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getACLAdmin()": {
        "notice": "Returns the address of the ACL admin."
      },
      "getACLManager()": {
        "notice": "Returns the address of the ACL manager."
      },
      "getAddress(bytes32)": {
        "notice": "Returns an address by its identifier."
      },
      "getMarketId()": {
        "notice": "Returns the id of the Aave market to which this contract points to."
      },
      "getPool()": {
        "notice": "Returns the address of the Pool proxy."
      },
      "getPoolConfigurator()": {
        "notice": "Returns the address of the PoolConfigurator proxy."
      },
      "getPoolDataProvider()": {
        "notice": "Returns the address of the data provider."
      },
      "getPriceOracle()": {
        "notice": "Returns the address of the price oracle."
      },
      "getPriceOracleSentinel()": {
        "notice": "Returns the address of the price oracle sentinel."
      },
      "setACLAdmin(address)": {
        "notice": "Updates the address of the ACL admin."
      },
      "setACLManager(address)": {
        "notice": "Updates the address of the ACL manager."
      },
      "setAddress(bytes32,address)": {
        "notice": "Sets an address for an id replacing the address saved in the addresses map."
      },
      "setAddressAsProxy(bytes32,address)": {
        "notice": "General function to update the implementation of a proxy registered with certain `id`. If there is no proxy registered, it will instantiate one and set as implementation the `newImplementationAddress`."
      },
      "setMarketId(string)": {
        "notice": "Associates an id with a specific PoolAddressesProvider."
      },
      "setPoolConfiguratorImpl(address)": {
        "notice": "Updates the implementation of the PoolConfigurator, or creates a proxy setting the new `PoolConfigurator` implementation when the function is called for the first time."
      },
      "setPoolDataProvider(address)": {
        "notice": "Updates the address of the data provider."
      },
      "setPoolImpl(address)": {
        "notice": "Updates the implementation of the Pool, or creates a proxy setting the new `pool` implementation when the function is called for the first time."
      },
      "setPriceOracle(address)": {
        "notice": "Updates the address of the price oracle."
      },
      "setPriceOracleSentinel(address)": {
        "notice": "Updates the address of the price oracle sentinel."
      }
    },
    "notice": "Main registry of addresses part of or connected to the protocol, including permissioned roles",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1472,
        "contract": "contracts/protocol/configuration/PoolAddressesProvider.sol:PoolAddressesProvider",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 24171,
        "contract": "contracts/protocol/configuration/PoolAddressesProvider.sol:PoolAddressesProvider",
        "label": "_marketId",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 24175,
        "contract": "contracts/protocol/configuration/PoolAddressesProvider.sol:PoolAddressesProvider",
        "label": "_addresses",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}
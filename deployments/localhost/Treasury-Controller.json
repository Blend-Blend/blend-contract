{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aaveGovShortTimelock",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "cancelStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stopTime",
          "type": "uint256"
        }
      ],
      "name": "createStream",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "funds",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x15fe9fcc03ddd34a28d2965e3d27138bc97c48fde07bd1b6b681a40c206f0251",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "508754",
    "logsBloom": "0x
    "blockHash": "0x43a60044e87cdc80cf49460d04d3a05d0a3033f0f104209e2e5371d2f4aad9e7",
    "transactionHash": "0x15fe9fcc03ddd34a28d2965e3d27138bc97c48fde07bd1b6b681a40c206f0251",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x15fe9fcc03ddd34a28d2965e3d27138bc97c48fde07bd1b6b681a40c206f0251",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x43a60044e87cdc80cf49460d04d3a05d0a3033f0f104209e2e5371d2f4aad9e7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x15fe9fcc03ddd34a28d2965e3d27138bc97c48fde07bd1b6b681a40c206f0251",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x43a60044e87cdc80cf49460d04d3a05d0a3033f0f104209e2e5371d2f4aad9e7"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "508754",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "c351ce62b62f76bd5a8479a8f9cf6c24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aaveGovShortTimelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancelStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,address,address,uint256)\":{\"params\":{\"amount\":\"Allowance to approve*\",\"collector\":\"The collector contract with funds (Aave ecosystem reserve)\",\"recipient\":\"Allowance's recipient\",\"token\":\"The asset address\"}},\"cancelStream(address,uint256)\":{\"params\":{\"collector\":\"The collector contract with funds (Aave ecosystem reserve)\",\"streamId\":\"The id of the stream to cancel\"},\"returns\":{\"_0\":\"bool If the cancellation happened correctly*\"}},\"constructor\":{\"params\":{\"aaveGovShortTimelock\":\"The address of the Aave's governance executor, owning this contract\"}},\"createStream(address,address,uint256,address,uint256,uint256)\":{\"params\":{\"collector\":\"The collector contract with funds (Aave ecosystem reserve)\",\"deposit\":\"Total amount to be streamed\",\"recipient\":\"The recipient of the stream of token\",\"startTime\":\"The unix timestamp for when the stream starts\",\"stopTime\":\"The unix timestamp for when the stream stops\",\"tokenAddress\":\"The ERC20 token to use as streaming asset\"},\"returns\":{\"_0\":\"uint256 The stream id created*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transfer(address,address,address,uint256)\":{\"params\":{\"amount\":\"Amount to transfer*\",\"collector\":\"The collector contract with funds (Aave ecosystem reserve)\",\"recipient\":\"Transfer's recipient\",\"token\":\"The asset address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFromStream(address,uint256,uint256)\":{\"params\":{\"collector\":\"The collector contract with funds (Aave ecosystem reserve)\",\"funds\":\"Amount to withdraw\",\"streamId\":\"The id of the stream to withdraw tokens from\"},\"returns\":{\"_0\":\"bool If the withdrawal finished properly*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,address,address,uint256)\":{\"notice\":\"Proxy function for ERC20's approve(), pointing to a specific collector contract\"},\"cancelStream(address,uint256)\":{\"notice\":\"Proxy function to cancel a stream of token on a specific collector contract\"},\"constructor\":{\"notice\":\"Constructor.\"},\"createStream(address,address,uint256,address,uint256,uint256)\":{\"notice\":\"Proxy function to create a stream of token on a specific collector contract\"},\"transfer(address,address,address,uint256)\":{\"notice\":\"Proxy function for ERC20's transfer(), pointing to a specific collector contract\"},\"withdrawFromStream(address,uint256,uint256)\":{\"notice\":\"Proxy function to withdraw from a stream of token on a specific collector contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/treasury/EcosystemReserveController.sol\":\"EcosystemReserveController\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n  function _msgSender() internal view virtual returns (address payable) {\\r\\n    return payable(msg.sender);\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view virtual returns (bytes memory) {\\r\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n    return msg.data;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x58e76abc9cac3909e67c990d0b1f781a845cd294c0fc91a5b3b000510e2043bf\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x07fe55e38757b195c884a8ede60deb8a1f6a85cc607e4e112a8c0004a9ebd448\",\"license\":\"AGPL-3.0\"},\"contracts/dependencies/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './Context.sol';\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n  address private _owner;\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n   */\\r\\n  constructor() {\\r\\n    address msgSender = _msgSender();\\r\\n    _owner = msgSender;\\r\\n    emit OwnershipTransferred(address(0), msgSender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Leaves the contract without owner. It will not be possible to call\\r\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n   * thereby removing any functionality that is only available to the owner.\\r\\n   */\\r\\n  function renounceOwnership() public virtual onlyOwner {\\r\\n    emit OwnershipTransferred(_owner, address(0));\\r\\n    _owner = address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\r\\n    emit OwnershipTransferred(_owner, newOwner);\\r\\n    _owner = newOwner;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xac1c6c6375d3eb342bb747f761286a5422d21f8fdd79deca503f64f2464558d6\",\"license\":\"MIT\"},\"contracts/periphery/treasury/EcosystemReserveController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {Ownable} from '../../dependencies/openzeppelin/contracts/Ownable.sol';\\r\\nimport {IStreamable} from './interfaces/IStreamable.sol';\\r\\nimport {IAdminControlledEcosystemReserve} from './interfaces/IAdminControlledEcosystemReserve.sol';\\r\\nimport {IEcosystemReserveController} from './interfaces/IEcosystemReserveController.sol';\\r\\nimport {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';\\r\\n\\r\\ncontract EcosystemReserveController is Ownable, IEcosystemReserveController {\\r\\n  /**\\r\\n   * @notice Constructor.\\r\\n   * @param aaveGovShortTimelock The address of the Aave's governance executor, owning this contract\\r\\n   */\\r\\n  constructor(address aaveGovShortTimelock) {\\r\\n    transferOwnership(aaveGovShortTimelock);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IEcosystemReserveController\\r\\n  function approve(\\r\\n    address collector,\\r\\n    IERC20 token,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external onlyOwner {\\r\\n    IAdminControlledEcosystemReserve(collector).approve(token, recipient, amount);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IEcosystemReserveController\\r\\n  function transfer(\\r\\n    address collector,\\r\\n    IERC20 token,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external onlyOwner {\\r\\n    IAdminControlledEcosystemReserve(collector).transfer(token, recipient, amount);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IEcosystemReserveController\\r\\n  function createStream(\\r\\n    address collector,\\r\\n    address recipient,\\r\\n    uint256 deposit,\\r\\n    IERC20 tokenAddress,\\r\\n    uint256 startTime,\\r\\n    uint256 stopTime\\r\\n  ) external onlyOwner returns (uint256) {\\r\\n    return\\r\\n      IStreamable(collector).createStream(\\r\\n        recipient,\\r\\n        deposit,\\r\\n        address(tokenAddress),\\r\\n        startTime,\\r\\n        stopTime\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IEcosystemReserveController\\r\\n  function withdrawFromStream(\\r\\n    address collector,\\r\\n    uint256 streamId,\\r\\n    uint256 funds\\r\\n  ) external onlyOwner returns (bool) {\\r\\n    return IStreamable(collector).withdrawFromStream(streamId, funds);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IEcosystemReserveController\\r\\n  function cancelStream(address collector, uint256 streamId) external onlyOwner returns (bool) {\\r\\n    return IStreamable(collector).cancelStream(streamId);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x4f019fc0fd32b802ff0cb3713ed2f770017d830c54fbe82573f01c093441e466\",\"license\":\"MIT\"},\"contracts/periphery/treasury/interfaces/IAdminControlledEcosystemReserve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\r\\n\\r\\ninterface IAdminControlledEcosystemReserve {\\r\\n  /** @notice Emitted when the funds admin changes\\r\\n   * @param fundsAdmin The new funds admin\\r\\n   **/\\r\\n  event NewFundsAdmin(address indexed fundsAdmin);\\r\\n\\r\\n  /** @notice Returns the mock ETH reference address\\r\\n   * @return address The address\\r\\n   **/\\r\\n  function ETH_MOCK_ADDRESS() external pure returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Return the funds admin, only entity to be able to interact with this contract (controller of reserve)\\r\\n   * @return address The address of the funds admin\\r\\n   **/\\r\\n  function getFundsAdmin() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Function for the funds admin to give ERC20 allowance to other parties\\r\\n   * @param token The address of the token to give allowance from\\r\\n   * @param recipient Allowance's recipient\\r\\n   * @param amount Allowance to approve\\r\\n   **/\\r\\n  function approve(\\r\\n    IERC20 token,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Function for the funds admin to transfer ERC20 tokens to other parties\\r\\n   * @param token The address of the token to transfer\\r\\n   * @param recipient Transfer's recipient\\r\\n   * @param amount Amount to transfer\\r\\n   **/\\r\\n  function transfer(\\r\\n    IERC20 token,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa45d9a2520d9e8558b78394e3d19b56fbcc6459fd510401979a006de05002e3a\",\"license\":\"GPL-3.0\"},\"contracts/periphery/treasury/interfaces/IEcosystemReserveController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\r\\n\\r\\ninterface IEcosystemReserveController {\\r\\n  /**\\r\\n   * @notice Proxy function for ERC20's approve(), pointing to a specific collector contract\\r\\n   * @param collector The collector contract with funds (Aave ecosystem reserve)\\r\\n   * @param token The asset address\\r\\n   * @param recipient Allowance's recipient\\r\\n   * @param amount Allowance to approve\\r\\n   **/\\r\\n  function approve(\\r\\n    address collector,\\r\\n    IERC20 token,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Proxy function for ERC20's transfer(), pointing to a specific collector contract\\r\\n   * @param collector The collector contract with funds (Aave ecosystem reserve)\\r\\n   * @param token The asset address\\r\\n   * @param recipient Transfer's recipient\\r\\n   * @param amount Amount to transfer\\r\\n   **/\\r\\n  function transfer(\\r\\n    address collector,\\r\\n    IERC20 token,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Proxy function to create a stream of token on a specific collector contract\\r\\n   * @param collector The collector contract with funds (Aave ecosystem reserve)\\r\\n   * @param recipient The recipient of the stream of token\\r\\n   * @param deposit Total amount to be streamed\\r\\n   * @param tokenAddress The ERC20 token to use as streaming asset\\r\\n   * @param startTime The unix timestamp for when the stream starts\\r\\n   * @param stopTime The unix timestamp for when the stream stops\\r\\n   * @return uint256 The stream id created\\r\\n   **/\\r\\n  function createStream(\\r\\n    address collector,\\r\\n    address recipient,\\r\\n    uint256 deposit,\\r\\n    IERC20 tokenAddress,\\r\\n    uint256 startTime,\\r\\n    uint256 stopTime\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Proxy function to withdraw from a stream of token on a specific collector contract\\r\\n   * @param collector The collector contract with funds (Aave ecosystem reserve)\\r\\n   * @param streamId The id of the stream to withdraw tokens from\\r\\n   * @param funds Amount to withdraw\\r\\n   * @return bool If the withdrawal finished properly\\r\\n   **/\\r\\n  function withdrawFromStream(\\r\\n    address collector,\\r\\n    uint256 streamId,\\r\\n    uint256 funds\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Proxy function to cancel a stream of token on a specific collector contract\\r\\n   * @param collector The collector contract with funds (Aave ecosystem reserve)\\r\\n   * @param streamId The id of the stream to cancel\\r\\n   * @return bool If the cancellation happened correctly\\r\\n   **/\\r\\n  function cancelStream(address collector, uint256 streamId) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xee4cfea11a49d91b9c75380eb842620715b54a1a34f3bd958430c004da19cccd\",\"license\":\"MIT\"},\"contracts/periphery/treasury/interfaces/IStreamable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IStreamable {\\r\\n  struct Stream {\\r\\n    uint256 deposit;\\r\\n    uint256 ratePerSecond;\\r\\n    uint256 remainingBalance;\\r\\n    uint256 startTime;\\r\\n    uint256 stopTime;\\r\\n    address recipient;\\r\\n    address sender;\\r\\n    address tokenAddress;\\r\\n    bool isEntity;\\r\\n  }\\r\\n\\r\\n  event CreateStream(\\r\\n    uint256 indexed streamId,\\r\\n    address indexed sender,\\r\\n    address indexed recipient,\\r\\n    uint256 deposit,\\r\\n    address tokenAddress,\\r\\n    uint256 startTime,\\r\\n    uint256 stopTime\\r\\n  );\\r\\n\\r\\n  event WithdrawFromStream(uint256 indexed streamId, address indexed recipient, uint256 amount);\\r\\n\\r\\n  event CancelStream(\\r\\n    uint256 indexed streamId,\\r\\n    address indexed sender,\\r\\n    address indexed recipient,\\r\\n    uint256 senderBalance,\\r\\n    uint256 recipientBalance\\r\\n  );\\r\\n\\r\\n  function balanceOf(uint256 streamId, address who) external view returns (uint256 balance);\\r\\n\\r\\n  function getStream(uint256 streamId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      address sender,\\r\\n      address recipient,\\r\\n      uint256 deposit,\\r\\n      address token,\\r\\n      uint256 startTime,\\r\\n      uint256 stopTime,\\r\\n      uint256 remainingBalance,\\r\\n      uint256 ratePerSecond\\r\\n    );\\r\\n\\r\\n  function createStream(\\r\\n    address recipient,\\r\\n    uint256 deposit,\\r\\n    address tokenAddress,\\r\\n    uint256 startTime,\\r\\n    uint256 stopTime\\r\\n  ) external returns (uint256 streamId);\\r\\n\\r\\n  function withdrawFromStream(uint256 streamId, uint256 funds) external returns (bool);\\r\\n\\r\\n  function cancelStream(uint256 streamId) external returns (bool);\\r\\n\\r\\n  function initialize(address fundsAdmin) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4f783555934ac26bb92326e643953ac16d65f8826c1227ce70a77328ce7bd3b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161097c38038061097c83398101604081905261002f9161017a565b600080546001600160a01b0319163390811782556040519091829160008051602061095c833981519152908290a3506100678161006d565b506101aa565b6000546001600160a01b031633146100cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166101315760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100c3565b600080546040516001600160a01b038085169392169160008051602061095c83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561018c57600080fd5b81516001600160a01b03811681146101a357600080fd5b9392505050565b6107a3806101b96000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100e5578063f18d03cc14610100578063f2fde38b14610113578063fd59e1341461012657600080fd5b80632f436bfa1461008d57806359eba454146100b5578063715018a6146100ca5780637dc14a8e146100d2575b600080fd5b6100a061009b3660046105c9565b610147565b60405190151581526020015b60405180910390f35b6100c86100c33660046105fe565b6101f5565b005b6100c8610290565b6100a06100e036600461064f565b610304565b6000546040516001600160a01b0390911681526020016100ac565b6100c861010e3660046105fe565b6103a1565b6100c861012136600461067b565b610408565b610139610134366004610698565b6104f2565b6040519081526020016100ac565b600080546001600160a01b0316331461017b5760405162461bcd60e51b8152600401610172906106fd565b60405180910390fd5b604051631ea6cb1b60e21b815260048101849052602481018390526001600160a01b03851690637a9b2c6c906044016020604051808303816000875af11580156101c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ed9190610732565b949350505050565b6000546001600160a01b0316331461021f5760405162461bcd60e51b8152600401610172906106fd565b60405163e1f21c6760e01b81526001600160a01b03848116600483015283811660248301526044820183905285169063e1f21c67906064015b600060405180830381600087803b15801561027257600080fd5b505af1158015610286573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146102ba5760405162461bcd60e51b8152600401610172906106fd565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600080546001600160a01b0316331461032f5760405162461bcd60e51b8152600401610172906106fd565b604051636db9241b60e01b8152600481018390526001600160a01b03841690636db9241b906024016020604051808303816000875af1158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a9190610732565b9392505050565b6000546001600160a01b031633146103cb5760405162461bcd60e51b8152600401610172906106fd565b6040516317d5759960e31b81526001600160a01b03848116600483015283811660248301526044820183905285169063beabacc890606401610258565b6000546001600160a01b031633146104325760405162461bcd60e51b8152600401610172906106fd565b6001600160a01b0381166104975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610172565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b0316331461051d5760405162461bcd60e51b8152600401610172906106fd565b60405163660da5fb60e11b81526001600160a01b038781166004830152602482018790528581166044830152606482018590526084820184905288169063cc1b4bf69060a4016020604051808303816000875af1158015610582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a69190610754565b979650505050505050565b6001600160a01b03811681146105c657600080fd5b50565b6000806000606084860312156105de57600080fd5b83356105e9816105b1565b95602085013595506040909401359392505050565b6000806000806080858703121561061457600080fd5b843561061f816105b1565b9350602085013561062f816105b1565b9250604085013561063f816105b1565b9396929550929360600135925050565b6000806040838503121561066257600080fd5b823561066d816105b1565b946020939093013593505050565b60006020828403121561068d57600080fd5b813561039a816105b1565b60008060008060008060c087890312156106b157600080fd5b86356106bc816105b1565b955060208701356106cc816105b1565b94506040870135935060608701356106e3816105b1565b9598949750929560808101359460a0909101359350915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561074457600080fd5b8151801515811461039a57600080fd5b60006020828403121561076657600080fd5b505191905056fea26469706673582212206b933e109531e6ac913c40365161eb68e8b2ed96e2b79e6b256f716b25e0beeb64736f6c634300081400338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100e5578063f18d03cc14610100578063f2fde38b14610113578063fd59e1341461012657600080fd5b80632f436bfa1461008d57806359eba454146100b5578063715018a6146100ca5780637dc14a8e146100d2575b600080fd5b6100a061009b3660046105c9565b610147565b60405190151581526020015b60405180910390f35b6100c86100c33660046105fe565b6101f5565b005b6100c8610290565b6100a06100e036600461064f565b610304565b6000546040516001600160a01b0390911681526020016100ac565b6100c861010e3660046105fe565b6103a1565b6100c861012136600461067b565b610408565b610139610134366004610698565b6104f2565b6040519081526020016100ac565b600080546001600160a01b0316331461017b5760405162461bcd60e51b8152600401610172906106fd565b60405180910390fd5b604051631ea6cb1b60e21b815260048101849052602481018390526001600160a01b03851690637a9b2c6c906044016020604051808303816000875af11580156101c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ed9190610732565b949350505050565b6000546001600160a01b0316331461021f5760405162461bcd60e51b8152600401610172906106fd565b60405163e1f21c6760e01b81526001600160a01b03848116600483015283811660248301526044820183905285169063e1f21c67906064015b600060405180830381600087803b15801561027257600080fd5b505af1158015610286573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146102ba5760405162461bcd60e51b8152600401610172906106fd565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600080546001600160a01b0316331461032f5760405162461bcd60e51b8152600401610172906106fd565b604051636db9241b60e01b8152600481018390526001600160a01b03841690636db9241b906024016020604051808303816000875af1158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a9190610732565b9392505050565b6000546001600160a01b031633146103cb5760405162461bcd60e51b8152600401610172906106fd565b6040516317d5759960e31b81526001600160a01b03848116600483015283811660248301526044820183905285169063beabacc890606401610258565b6000546001600160a01b031633146104325760405162461bcd60e51b8152600401610172906106fd565b6001600160a01b0381166104975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610172565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b0316331461051d5760405162461bcd60e51b8152600401610172906106fd565b60405163660da5fb60e11b81526001600160a01b038781166004830152602482018790528581166044830152606482018590526084820184905288169063cc1b4bf69060a4016020604051808303816000875af1158015610582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a69190610754565b979650505050505050565b6001600160a01b03811681146105c657600080fd5b50565b6000806000606084860312156105de57600080fd5b83356105e9816105b1565b95602085013595506040909401359392505050565b6000806000806080858703121561061457600080fd5b843561061f816105b1565b9350602085013561062f816105b1565b9250604085013561063f816105b1565b9396929550929360600135925050565b6000806040838503121561066257600080fd5b823561066d816105b1565b946020939093013593505050565b60006020828403121561068d57600080fd5b813561039a816105b1565b60008060008060008060c087890312156106b157600080fd5b86356106bc816105b1565b955060208701356106cc816105b1565b94506040870135935060608701356106e3816105b1565b9598949750929560808101359460a0909101359350915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561074457600080fd5b8151801515811461039a57600080fd5b60006020828403121561076657600080fd5b505191905056fea26469706673582212206b933e109531e6ac913c40365161eb68e8b2ed96e2b79e6b256f716b25e0beeb64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,address,address,uint256)": {
        "params": {
          "amount": "Allowance to approve*",
          "collector": "The collector contract with funds (Aave ecosystem reserve)",
          "recipient": "Allowance's recipient",
          "token": "The asset address"
        }
      },
      "cancelStream(address,uint256)": {
        "params": {
          "collector": "The collector contract with funds (Aave ecosystem reserve)",
          "streamId": "The id of the stream to cancel"
        },
        "returns": {
          "_0": "bool If the cancellation happened correctly*"
        }
      },
      "constructor": {
        "params": {
          "aaveGovShortTimelock": "The address of the Aave's governance executor, owning this contract"
        }
      },
      "createStream(address,address,uint256,address,uint256,uint256)": {
        "params": {
          "collector": "The collector contract with funds (Aave ecosystem reserve)",
          "deposit": "Total amount to be streamed",
          "recipient": "The recipient of the stream of token",
          "startTime": "The unix timestamp for when the stream starts",
          "stopTime": "The unix timestamp for when the stream stops",
          "tokenAddress": "The ERC20 token to use as streaming asset"
        },
        "returns": {
          "_0": "uint256 The stream id created*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transfer(address,address,address,uint256)": {
        "params": {
          "amount": "Amount to transfer*",
          "collector": "The collector contract with funds (Aave ecosystem reserve)",
          "recipient": "Transfer's recipient",
          "token": "The asset address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFromStream(address,uint256,uint256)": {
        "params": {
          "collector": "The collector contract with funds (Aave ecosystem reserve)",
          "funds": "Amount to withdraw",
          "streamId": "The id of the stream to withdraw tokens from"
        },
        "returns": {
          "_0": "bool If the withdrawal finished properly*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,address,address,uint256)": {
        "notice": "Proxy function for ERC20's approve(), pointing to a specific collector contract"
      },
      "cancelStream(address,uint256)": {
        "notice": "Proxy function to cancel a stream of token on a specific collector contract"
      },
      "constructor": {
        "notice": "Constructor."
      },
      "createStream(address,address,uint256,address,uint256,uint256)": {
        "notice": "Proxy function to create a stream of token on a specific collector contract"
      },
      "transfer(address,address,address,uint256)": {
        "notice": "Proxy function for ERC20's transfer(), pointing to a specific collector contract"
      },
      "withdrawFromStream(address,uint256,uint256)": {
        "notice": "Proxy function to withdraw from a stream of token on a specific collector contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1472,
        "contract": "contracts/periphery/treasury/EcosystemReserveController.sol:EcosystemReserveController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}
{
  "address": "0x1429859428C0aBc9C2C47C8Ee9FBaf82cFA0F20f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "EmissionAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint88",
              "name": "emissionPerSecond",
              "type": "uint88"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "distributionEnd",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "reward",
              "type": "address"
            },
            {
              "internalType": "contract ITransferStrategyBase",
              "name": "transferStrategy",
              "type": "address"
            },
            {
              "internalType": "contract IEACAggregatorProxy",
              "name": "rewardOracle",
              "type": "address"
            }
          ],
          "internalType": "struct RewardsDataTypes.RewardsConfigInput[]",
          "name": "config",
          "type": "tuple[]"
        }
      ],
      "name": "configureAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getEmissionAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsController",
      "outputs": [
        {
          "internalType": "contract IRewardsController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "setClaimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "newDistributionEnd",
          "type": "uint32"
        }
      ],
      "name": "setDistributionEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "setEmissionAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "rewards",
          "type": "address[]"
        },
        {
          "internalType": "uint88[]",
          "name": "newEmissionsPerSecond",
          "type": "uint88[]"
        }
      ],
      "name": "setEmissionPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "contract IEACAggregatorProxy",
          "name": "rewardOracle",
          "type": "address"
        }
      ],
      "name": "setRewardOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "setRewardsController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "contract ITransferStrategyBase",
          "name": "transferStrategy",
          "type": "address"
        }
      ],
      "name": "setTransferStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0887c0cc3fc6119843d9fa25b7c2273a8cf25b42b949656ad32aecbd760bb0d1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x1429859428C0aBc9C2C47C8Ee9FBaf82cFA0F20f",
    "transactionIndex": 0,
    "gasUsed": "860509",
    "logsBloom": "0x
    "blockHash": "0xb8aaf5a44d41b325db80547b4318bd7dbe2bac1a138d061b6077634ecb77c31e",
    "transactionHash": "0x0887c0cc3fc6119843d9fa25b7c2273a8cf25b42b949656ad32aecbd760bb0d1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 62,
        "transactionHash": "0x0887c0cc3fc6119843d9fa25b7c2273a8cf25b42b949656ad32aecbd760bb0d1",
        "address": "0x1429859428C0aBc9C2C47C8Ee9FBaf82cFA0F20f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb8aaf5a44d41b325db80547b4318bd7dbe2bac1a138d061b6077634ecb77c31e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 62,
        "transactionHash": "0x0887c0cc3fc6119843d9fa25b7c2273a8cf25b42b949656ad32aecbd760bb0d1",
        "address": "0x1429859428C0aBc9C2C47C8Ee9FBaf82cFA0F20f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xb8aaf5a44d41b325db80547b4318bd7dbe2bac1a138d061b6077634ecb77c31e"
      }
    ],
    "blockNumber": 62,
    "cumulativeGasUsed": "860509",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "c351ce62b62f76bd5a8479a8f9cf6c24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"EmissionAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint88\",\"name\":\"emissionPerSecond\",\"type\":\"uint88\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"distributionEnd\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"contract ITransferStrategyBase\",\"name\":\"transferStrategy\",\"type\":\"address\"},{\"internalType\":\"contract IEACAggregatorProxy\",\"name\":\"rewardOracle\",\"type\":\"address\"}],\"internalType\":\"struct RewardsDataTypes.RewardsConfigInput[]\",\"name\":\"config\",\"type\":\"tuple[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getEmissionAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsController\",\"outputs\":[{\"internalType\":\"contract IRewardsController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"setClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"newDistributionEnd\",\"type\":\"uint32\"}],\"name\":\"setDistributionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setEmissionAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"},{\"internalType\":\"uint88[]\",\"name\":\"newEmissionsPerSecond\",\"type\":\"uint88[]\"}],\"name\":\"setEmissionPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"contract IEACAggregatorProxy\",\"name\":\"rewardOracle\",\"type\":\"address\"}],\"name\":\"setRewardOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setRewardsController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"contract ITransferStrategyBase\",\"name\":\"transferStrategy\",\"type\":\"address\"}],\"name\":\"setTransferStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave\",\"events\":{\"EmissionAdminUpdated(address,address,address)\":{\"details\":\"Emitted when the admin of a reward emission is updated.\",\"params\":{\"newAdmin\":\"The address of the new emission admin\",\"oldAdmin\":\"The address of the old emission admin\",\"reward\":\"The address of the rewarding token\"}}},\"kind\":\"dev\",\"methods\":{\"configureAssets((uint88,uint256,uint32,address,address,address,address)[])\":{\"details\":\"Configure assets to incentivize with an emission of rewards per second until the end of distribution.Only callable by the emission admin of the given rewards\",\"params\":{\"config\":\"The assets configuration input, the list of structs contains the following fields:   uint104 emissionPerSecond: The emission per second following rewards unit decimals.   uint256 totalSupply: The total supply of the asset to incentivize   uint40 distributionEnd: The end of the distribution of the incentives for an asset   address asset: The asset address to incentivize   address reward: The reward token address   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\"}},\"constructor\":{\"params\":{\"owner\":\"The address of the owner\"}},\"getEmissionAdmin(address)\":{\"details\":\"Returns the admin of the given reward emission\",\"params\":{\"reward\":\"The address of the reward token\"},\"returns\":{\"_0\":\"The address of the emission admin\"}},\"getRewardsController()\":{\"details\":\"Returns the rewards controller address\",\"returns\":{\"_0\":\"The address of the RewardsController contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setClaimer(address,address)\":{\"details\":\"Whitelists an address to claim the rewards on behalf of another addressOnly callable by the owner of the EmissionManager\",\"params\":{\"claimer\":\"The address of the claimer\",\"user\":\"The address of the user\"}},\"setDistributionEnd(address,address,uint32)\":{\"details\":\"Sets the end date for the distributionOnly callable by the emission admin of the given reward\",\"params\":{\"asset\":\"The asset to incentivize\",\"newDistributionEnd\":\"The end date of the incentivization, in unix time format*\",\"reward\":\"The reward token that incentives the asset\"}},\"setEmissionAdmin(address,address)\":{\"details\":\"Updates the admin of the reward emissionOnly callable by the owner of the EmissionManager\",\"params\":{\"admin\":\"The address of the new admin of the emission\",\"reward\":\"The address of the reward token\"}},\"setEmissionPerSecond(address,address[],uint88[])\":{\"details\":\"Sets the emission per second of a set of reward distributions\",\"params\":{\"asset\":\"The asset is being incentivized\",\"newEmissionsPerSecond\":\"List of new reward emissions per second\",\"rewards\":\"List of reward addresses are being distributed\"}},\"setRewardOracle(address,address)\":{\"details\":\"Sets an Aave Oracle contract to enforce rewards with a source of value.Only callable by the emission admin of the given reward\",\"params\":{\"reward\":\"The address of the reward to set the price aggregator\",\"rewardOracle\":\"The address of price aggregator that follows IEACAggregatorProxy interface\"}},\"setRewardsController(address)\":{\"details\":\"Updates the address of the rewards controllerOnly callable by the owner of the EmissionManager\",\"params\":{\"controller\":\"the address of the RewardsController contract\"}},\"setTransferStrategy(address,address)\":{\"details\":\"Sets a TransferStrategy logic contract that determines the logic of the rewards transferOnly callable by the emission admin of the given reward\",\"params\":{\"reward\":\"The address of the reward token\",\"transferStrategy\":\"The address of the TransferStrategy logic contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"EmissionManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor.\"},\"setRewardOracle(address,address)\":{\"notice\":\"At the moment of reward configuration, the Incentives Controller performs a check to see if the reward asset oracle is compatible with IEACAggregator proxy. This check is enforced for integrators to be able to show incentives at the current Aave UI without the need to setup an external price registry\"}},\"notice\":\"It manages the list of admins of reward emissions and provides functions to control reward emissions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/rewards/EmissionManager.sol\":\"EmissionManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n  function _msgSender() internal view virtual returns (address payable) {\\r\\n    return payable(msg.sender);\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view virtual returns (bytes memory) {\\r\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n    return msg.data;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x58e76abc9cac3909e67c990d0b1f781a845cd294c0fc91a5b3b000510e2043bf\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './Context.sol';\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n  address private _owner;\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n   */\\r\\n  constructor() {\\r\\n    address msgSender = _msgSender();\\r\\n    _owner = msgSender;\\r\\n    emit OwnershipTransferred(address(0), msgSender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Leaves the contract without owner. It will not be possible to call\\r\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n   * thereby removing any functionality that is only available to the owner.\\r\\n   */\\r\\n  function renounceOwnership() public virtual onlyOwner {\\r\\n    emit OwnershipTransferred(_owner, address(0));\\r\\n    _owner = address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\r\\n    emit OwnershipTransferred(_owner, newOwner);\\r\\n    _owner = newOwner;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xac1c6c6375d3eb342bb747f761286a5422d21f8fdd79deca503f64f2464558d6\",\"license\":\"MIT\"},\"contracts/periphery/misc/interfaces/IEACAggregatorProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IEACAggregatorProxy {\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  function latestAnswer() external view returns (int256);\\r\\n\\r\\n  function latestTimestamp() external view returns (uint256);\\r\\n\\r\\n  function latestRound() external view returns (uint256);\\r\\n\\r\\n  function getAnswer(uint256 roundId) external view returns (int256);\\r\\n\\r\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\r\\n\\r\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\\r\\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\\r\\n}\\r\\n\",\"keccak256\":\"0x637d15b86eae9f1e00697bf9aca057e9aee13968055c74fbca955ea52f7f682e\",\"license\":\"AGPL-3.0\"},\"contracts/periphery/rewards/EmissionManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {Ownable} from '../../dependencies/openzeppelin/contracts/Ownable.sol';\\r\\nimport {IEACAggregatorProxy} from '../misc/interfaces/IEACAggregatorProxy.sol';\\r\\nimport {IEmissionManager} from './interfaces/IEmissionManager.sol';\\r\\nimport {ITransferStrategyBase} from './interfaces/ITransferStrategyBase.sol';\\r\\nimport {IRewardsController} from './interfaces/IRewardsController.sol';\\r\\nimport {RewardsDataTypes} from './libraries/RewardsDataTypes.sol';\\r\\n\\r\\n/**\\r\\n * @title EmissionManager\\r\\n * @author Aave\\r\\n * @notice It manages the list of admins of reward emissions and provides functions to control reward emissions.\\r\\n */\\r\\ncontract EmissionManager is Ownable, IEmissionManager {\\r\\n  // reward => emissionAdmin\\r\\n  mapping(address => address) internal _emissionAdmins;\\r\\n\\r\\n  IRewardsController internal _rewardsController;\\r\\n\\r\\n  /**\\r\\n   * @dev Only emission admin of the given reward can call functions marked by this modifier.\\r\\n   **/\\r\\n  modifier onlyEmissionAdmin(address reward) {\\r\\n    require(msg.sender == _emissionAdmins[reward], 'ONLY_EMISSION_ADMIN');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Constructor.\\r\\n   * @param owner The address of the owner\\r\\n   */\\r\\n  constructor(address owner) {\\r\\n    transferOwnership(owner);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IEmissionManager\\r\\n  function configureAssets(RewardsDataTypes.RewardsConfigInput[] memory config) external override {\\r\\n    for (uint256 i = 0; i < config.length; i++) {\\r\\n      require(_emissionAdmins[config[i].reward] == msg.sender, 'ONLY_EMISSION_ADMIN');\\r\\n    }\\r\\n    _rewardsController.configureAssets(config);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IEmissionManager\\r\\n  function setTransferStrategy(address reward, ITransferStrategyBase transferStrategy)\\r\\n    external\\r\\n    override\\r\\n    onlyEmissionAdmin(reward)\\r\\n  {\\r\\n    _rewardsController.setTransferStrategy(reward, transferStrategy);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IEmissionManager\\r\\n  function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle)\\r\\n    external\\r\\n    override\\r\\n    onlyEmissionAdmin(reward)\\r\\n  {\\r\\n    _rewardsController.setRewardOracle(reward, rewardOracle);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IEmissionManager\\r\\n  function setDistributionEnd(\\r\\n    address asset,\\r\\n    address reward,\\r\\n    uint32 newDistributionEnd\\r\\n  ) external override onlyEmissionAdmin(reward) {\\r\\n    _rewardsController.setDistributionEnd(asset, reward, newDistributionEnd);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IEmissionManager\\r\\n  function setEmissionPerSecond(\\r\\n    address asset,\\r\\n    address[] calldata rewards,\\r\\n    uint88[] calldata newEmissionsPerSecond\\r\\n  ) external override {\\r\\n    for (uint256 i = 0; i < rewards.length; i++) {\\r\\n      require(_emissionAdmins[rewards[i]] == msg.sender, 'ONLY_EMISSION_ADMIN');\\r\\n    }\\r\\n    _rewardsController.setEmissionPerSecond(asset, rewards, newEmissionsPerSecond);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IEmissionManager\\r\\n  function setClaimer(address user, address claimer) external override onlyOwner {\\r\\n    _rewardsController.setClaimer(user, claimer);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IEmissionManager\\r\\n  function setEmissionAdmin(address reward, address admin) external override onlyOwner {\\r\\n    address oldAdmin = _emissionAdmins[reward];\\r\\n    _emissionAdmins[reward] = admin;\\r\\n    emit EmissionAdminUpdated(reward, oldAdmin, admin);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IEmissionManager\\r\\n  function setRewardsController(address controller) external override onlyOwner {\\r\\n    _rewardsController = IRewardsController(controller);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IEmissionManager\\r\\n  function getRewardsController() external view override returns (IRewardsController) {\\r\\n    return _rewardsController;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IEmissionManager\\r\\n  function getEmissionAdmin(address reward) external view override returns (address) {\\r\\n    return _emissionAdmins[reward];\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xa9bad6c2dcac6be76a8c5147e376c5a29681758ced98283bc13464afa0b2f6fc\",\"license\":\"AGPL-3.0\"},\"contracts/periphery/rewards/interfaces/IEmissionManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\r\\nimport {RewardsDataTypes} from '../libraries/RewardsDataTypes.sol';\\r\\nimport {ITransferStrategyBase} from './ITransferStrategyBase.sol';\\r\\nimport {IRewardsController} from './IRewardsController.sol';\\r\\n\\r\\n/**\\r\\n * @title IEmissionManager\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for the Emission Manager\\r\\n */\\r\\ninterface IEmissionManager {\\r\\n  /**\\r\\n   * @dev Emitted when the admin of a reward emission is updated.\\r\\n   * @param reward The address of the rewarding token\\r\\n   * @param oldAdmin The address of the old emission admin\\r\\n   * @param newAdmin The address of the new emission admin\\r\\n   */\\r\\n  event EmissionAdminUpdated(\\r\\n    address indexed reward,\\r\\n    address indexed oldAdmin,\\r\\n    address indexed newAdmin\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\r\\n   * @dev Only callable by the emission admin of the given rewards\\r\\n   * @param config The assets configuration input, the list of structs contains the following fields:\\r\\n   *   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\r\\n   *   uint256 totalSupply: The total supply of the asset to incentivize\\r\\n   *   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\r\\n   *   address asset: The asset address to incentivize\\r\\n   *   address reward: The reward token address\\r\\n   *   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.\\r\\n   *   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\r\\n   *                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\r\\n   */\\r\\n  function configureAssets(RewardsDataTypes.RewardsConfigInput[] memory config) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets a TransferStrategy logic contract that determines the logic of the rewards transfer\\r\\n   * @dev Only callable by the emission admin of the given reward\\r\\n   * @param reward The address of the reward token\\r\\n   * @param transferStrategy The address of the TransferStrategy logic contract\\r\\n   */\\r\\n  function setTransferStrategy(address reward, ITransferStrategyBase transferStrategy) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\r\\n   * @dev Only callable by the emission admin of the given reward\\r\\n   * @notice At the moment of reward configuration, the Incentives Controller performs\\r\\n   * a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\\r\\n   * This check is enforced for integrators to be able to show incentives at\\r\\n   * the current Aave UI without the need to setup an external price registry\\r\\n   * @param reward The address of the reward to set the price aggregator\\r\\n   * @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\\r\\n   */\\r\\n  function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the end date for the distribution\\r\\n   * @dev Only callable by the emission admin of the given reward\\r\\n   * @param asset The asset to incentivize\\r\\n   * @param reward The reward token that incentives the asset\\r\\n   * @param newDistributionEnd The end date of the incentivization, in unix time format\\r\\n   **/\\r\\n  function setDistributionEnd(\\r\\n    address asset,\\r\\n    address reward,\\r\\n    uint32 newDistributionEnd\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the emission per second of a set of reward distributions\\r\\n   * @param asset The asset is being incentivized\\r\\n   * @param rewards List of reward addresses are being distributed\\r\\n   * @param newEmissionsPerSecond List of new reward emissions per second\\r\\n   */\\r\\n  function setEmissionPerSecond(\\r\\n    address asset,\\r\\n    address[] calldata rewards,\\r\\n    uint88[] calldata newEmissionsPerSecond\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\r\\n   * @dev Only callable by the owner of the EmissionManager\\r\\n   * @param user The address of the user\\r\\n   * @param claimer The address of the claimer\\r\\n   */\\r\\n  function setClaimer(address user, address claimer) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the admin of the reward emission\\r\\n   * @dev Only callable by the owner of the EmissionManager\\r\\n   * @param reward The address of the reward token\\r\\n   * @param admin The address of the new admin of the emission\\r\\n   */\\r\\n  function setEmissionAdmin(address reward, address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the address of the rewards controller\\r\\n   * @dev Only callable by the owner of the EmissionManager\\r\\n   * @param controller the address of the RewardsController contract\\r\\n   */\\r\\n  function setRewardsController(address controller) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the rewards controller address\\r\\n   * @return The address of the RewardsController contract\\r\\n   */\\r\\n  function getRewardsController() external view returns (IRewardsController);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the admin of the given reward emission\\r\\n   * @param reward The address of the reward token\\r\\n   * @return The address of the emission admin\\r\\n   */\\r\\n  function getEmissionAdmin(address reward) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x7bc2e0780c4485b5a6bc9aafb6314d20073d403b2761222bfcff3019836a456b\",\"license\":\"AGPL-3.0\"},\"contracts/periphery/rewards/interfaces/IRewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {IRewardsDistributor} from './IRewardsDistributor.sol';\\r\\nimport {ITransferStrategyBase} from './ITransferStrategyBase.sol';\\r\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\r\\nimport {RewardsDataTypes} from '../libraries/RewardsDataTypes.sol';\\r\\n\\r\\n/**\\r\\n * @title IRewardsController\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for a Rewards Controller.\\r\\n */\\r\\ninterface IRewardsController is IRewardsDistributor {\\r\\n  /**\\r\\n   * @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\\r\\n   * @param user The address of the user\\r\\n   * @param claimer The address of the claimer\\r\\n   */\\r\\n  event ClaimerSet(address indexed user, address indexed claimer);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when rewards are claimed\\r\\n   * @param user The address of the user rewards has been claimed on behalf of\\r\\n   * @param reward The address of the token reward is claimed\\r\\n   * @param to The address of the receiver of the rewards\\r\\n   * @param claimer The address of the claimer\\r\\n   * @param amount The amount of rewards claimed\\r\\n   */\\r\\n  event RewardsClaimed(\\r\\n    address indexed user,\\r\\n    address indexed reward,\\r\\n    address indexed to,\\r\\n    address claimer,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a transfer strategy is installed for the reward distribution\\r\\n   * @param reward The address of the token reward\\r\\n   * @param transferStrategy The address of TransferStrategy contract\\r\\n   */\\r\\n  event TransferStrategyInstalled(address indexed reward, address indexed transferStrategy);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the reward oracle is updated\\r\\n   * @param reward The address of the token reward\\r\\n   * @param rewardOracle The address of oracle\\r\\n   */\\r\\n  event RewardOracleUpdated(address indexed reward, address indexed rewardOracle);\\r\\n\\r\\n  /**\\r\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\r\\n   * @param user The address of the user\\r\\n   * @param claimer The address of the claimer\\r\\n   */\\r\\n  function setClaimer(address user, address claimer) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets a TransferStrategy logic contract that determines the logic of the rewards transfer\\r\\n   * @param reward The address of the reward token\\r\\n   * @param transferStrategy The address of the TransferStrategy logic contract\\r\\n   */\\r\\n  function setTransferStrategy(address reward, ITransferStrategyBase transferStrategy) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\r\\n   * @notice At the moment of reward configuration, the Incentives Controller performs\\r\\n   * a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\\r\\n   * This check is enforced for integrators to be able to show incentives at\\r\\n   * the current Aave UI without the need to setup an external price registry\\r\\n   * @param reward The address of the reward to set the price aggregator\\r\\n   * @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\\r\\n   */\\r\\n  function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Get the price aggregator oracle address\\r\\n   * @param reward The address of the reward\\r\\n   * @return The price oracle of the reward\\r\\n   */\\r\\n  function getRewardOracle(address reward) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\r\\n   * @param user The address of the user\\r\\n   * @return The claimer address\\r\\n   */\\r\\n  function getClaimer(address user) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the Transfer Strategy implementation contract address being used for a reward address\\r\\n   * @param reward The address of the reward\\r\\n   * @return The address of the TransferStrategy contract\\r\\n   */\\r\\n  function getTransferStrategy(address reward) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\r\\n   * @param config The assets configuration input, the list of structs contains the following fields:\\r\\n   *   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\r\\n   *   uint256 totalSupply: The total supply of the asset to incentivize\\r\\n   *   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\r\\n   *   address asset: The asset address to incentivize\\r\\n   *   address reward: The reward token address\\r\\n   *   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.\\r\\n   *   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\r\\n   *                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\r\\n   */\\r\\n  function configureAssets(RewardsDataTypes.RewardsConfigInput[] memory config) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\r\\n   * @dev The units of `totalSupply` and `userBalance` should be the same.\\r\\n   * @param user The address of the user whose asset balance has changed\\r\\n   * @param totalSupply The total supply of the asset prior to user balance change\\r\\n   * @param userBalance The previous user balance prior to balance change\\r\\n   **/\\r\\n  function handleAction(\\r\\n    address user,\\r\\n    uint256 totalSupply,\\r\\n    uint256 userBalance\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\r\\n   * @param assets List of assets to check eligible distributions before claiming rewards\\r\\n   * @param amount The amount of rewards to claim\\r\\n   * @param to The address that will be receiving the rewards\\r\\n   * @param reward The address of the reward token\\r\\n   * @return The amount of rewards claimed\\r\\n   **/\\r\\n  function claimRewards(\\r\\n    address[] calldata assets,\\r\\n    uint256 amount,\\r\\n    address to,\\r\\n    address reward\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Claims reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The\\r\\n   * caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\r\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\r\\n   * @param amount The amount of rewards to claim\\r\\n   * @param user The address to check and claim rewards\\r\\n   * @param to The address that will be receiving the rewards\\r\\n   * @param reward The address of the reward token\\r\\n   * @return The amount of rewards claimed\\r\\n   **/\\r\\n  function claimRewardsOnBehalf(\\r\\n    address[] calldata assets,\\r\\n    uint256 amount,\\r\\n    address user,\\r\\n    address to,\\r\\n    address reward\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Claims reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\r\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\r\\n   * @param amount The amount of rewards to claim\\r\\n   * @param reward The address of the reward token\\r\\n   * @return The amount of rewards claimed\\r\\n   **/\\r\\n  function claimRewardsToSelf(\\r\\n    address[] calldata assets,\\r\\n    uint256 amount,\\r\\n    address reward\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\r\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\r\\n   * @param to The address that will be receiving the rewards\\r\\n   * @return rewardsList List of addresses of the reward tokens\\r\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\r\\n   **/\\r\\n  function claimAllRewards(address[] calldata assets, address to)\\r\\n    external\\r\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\r\\n\\r\\n  /**\\r\\n   * @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\\r\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\r\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\r\\n   * @param user The address to check and claim rewards\\r\\n   * @param to The address that will be receiving the rewards\\r\\n   * @return rewardsList List of addresses of the reward tokens\\r\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\r\\n   **/\\r\\n  function claimAllRewardsOnBehalf(\\r\\n    address[] calldata assets,\\r\\n    address user,\\r\\n    address to\\r\\n  ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\r\\n\\r\\n  /**\\r\\n   * @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\r\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\r\\n   * @return rewardsList List of addresses of the reward tokens\\r\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\r\\n   **/\\r\\n  function claimAllRewardsToSelf(address[] calldata assets)\\r\\n    external\\r\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\r\\n}\\r\\n\",\"keccak256\":\"0xc23827391e3e85b3264d2df96e30fb122039d30470703269d754f47ba084ca35\",\"license\":\"AGPL-3.0\"},\"contracts/periphery/rewards/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @title IRewardsDistributor\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for a Rewards Distributor.\\r\\n */\\r\\ninterface IRewardsDistributor {\\r\\n  /**\\r\\n   * @dev Emitted when the configuration of the rewards of an asset is updated.\\r\\n   * @param asset The address of the incentivized asset\\r\\n   * @param reward The address of the reward token\\r\\n   * @param oldEmission The old emissions per second value of the reward distribution\\r\\n   * @param newEmission The new emissions per second value of the reward distribution\\r\\n   * @param oldDistributionEnd The old end timestamp of the reward distribution\\r\\n   * @param newDistributionEnd The new end timestamp of the reward distribution\\r\\n   * @param assetIndex The index of the asset distribution\\r\\n   */\\r\\n  event AssetConfigUpdated(\\r\\n    address indexed asset,\\r\\n    address indexed reward,\\r\\n    uint256 oldEmission,\\r\\n    uint256 newEmission,\\r\\n    uint256 oldDistributionEnd,\\r\\n    uint256 newDistributionEnd,\\r\\n    uint256 assetIndex\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when rewards of an asset are accrued on behalf of a user.\\r\\n   * @param asset The address of the incentivized asset\\r\\n   * @param reward The address of the reward token\\r\\n   * @param user The address of the user that rewards are accrued on behalf of\\r\\n   * @param assetIndex The index of the asset distribution\\r\\n   * @param userIndex The index of the asset distribution on behalf of the user\\r\\n   * @param rewardsAccrued The amount of rewards accrued\\r\\n   */\\r\\n  event Accrued(\\r\\n    address indexed asset,\\r\\n    address indexed reward,\\r\\n    address indexed user,\\r\\n    uint256 assetIndex,\\r\\n    uint256 userIndex,\\r\\n    uint256 rewardsAccrued\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the end date for the distribution\\r\\n   * @param asset The asset to incentivize\\r\\n   * @param reward The reward token that incentives the asset\\r\\n   * @param newDistributionEnd The end date of the incentivization, in unix time format\\r\\n   **/\\r\\n  function setDistributionEnd(\\r\\n    address asset,\\r\\n    address reward,\\r\\n    uint32 newDistributionEnd\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the emission per second of a set of reward distributions\\r\\n   * @param asset The asset is being incentivized\\r\\n   * @param rewards List of reward addresses are being distributed\\r\\n   * @param newEmissionsPerSecond List of new reward emissions per second\\r\\n   */\\r\\n  function setEmissionPerSecond(\\r\\n    address asset,\\r\\n    address[] calldata rewards,\\r\\n    uint88[] calldata newEmissionsPerSecond\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the end date for the distribution\\r\\n   * @param asset The incentivized asset\\r\\n   * @param reward The reward token of the incentivized asset\\r\\n   * @return The timestamp with the end of the distribution, in unix time format\\r\\n   **/\\r\\n  function getDistributionEnd(address asset, address reward) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the index of a user on a reward distribution\\r\\n   * @param user Address of the user\\r\\n   * @param asset The incentivized asset\\r\\n   * @param reward The reward token of the incentivized asset\\r\\n   * @return The current user asset index, not including new distributions\\r\\n   **/\\r\\n  function getUserAssetIndex(\\r\\n    address user,\\r\\n    address asset,\\r\\n    address reward\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the configuration of the distribution reward for a certain asset\\r\\n   * @param asset The incentivized asset\\r\\n   * @param reward The reward token of the incentivized asset\\r\\n   * @return The index of the asset distribution\\r\\n   * @return The emission per second of the reward distribution\\r\\n   * @return The timestamp of the last update of the index\\r\\n   * @return The timestamp of the distribution end\\r\\n   **/\\r\\n  function getRewardsData(address asset, address reward)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the next value of an specific distribution index, with validations.\\r\\n   * @param asset The incentivized asset\\r\\n   * @param reward The reward token of the incentivized asset\\r\\n   * @return The old index of the asset distribution\\r\\n   * @return The new index of the asset distribution\\r\\n   **/\\r\\n  function getAssetIndex(address asset, address reward) external view returns (uint256, uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the list of available reward token addresses of an incentivized asset\\r\\n   * @param asset The incentivized asset\\r\\n   * @return List of rewards addresses of the input asset\\r\\n   **/\\r\\n  function getRewardsByAsset(address asset) external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the list of available reward addresses\\r\\n   * @return List of rewards supported in this contract\\r\\n   **/\\r\\n  function getRewardsList() external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\\r\\n   * @param user The address of the user\\r\\n   * @param reward The address of the reward token\\r\\n   * @return Unclaimed rewards, not including new distributions\\r\\n   **/\\r\\n  function getUserAccruedRewards(address user, address reward) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\\r\\n   * @param assets List of incentivized assets to check eligible distributions\\r\\n   * @param user The address of the user\\r\\n   * @param reward The address of the reward token\\r\\n   * @return The rewards amount\\r\\n   **/\\r\\n  function getUserRewards(\\r\\n    address[] calldata assets,\\r\\n    address user,\\r\\n    address reward\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\\r\\n   * @param assets List of incentivized assets to check eligible distributions\\r\\n   * @param user The address of the user\\r\\n   * @return The list of reward addresses\\r\\n   * @return The list of unclaimed amount of rewards\\r\\n   **/\\r\\n  function getAllUserRewards(address[] calldata assets, address user)\\r\\n    external\\r\\n    view\\r\\n    returns (address[] memory, uint256[] memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the decimals of an asset to calculate the distribution delta\\r\\n   * @param asset The address to retrieve decimals\\r\\n   * @return The decimals of an underlying asset\\r\\n   */\\r\\n  function getAssetDecimals(address asset) external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the emission manager\\r\\n   * @return The address of the EmissionManager\\r\\n   */\\r\\n  function EMISSION_MANAGER() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the emission manager.\\r\\n   * Deprecated: This getter is maintained for compatibility purposes. Use the `EMISSION_MANAGER()` function instead.\\r\\n   * @return The address of the EmissionManager\\r\\n   */\\r\\n  function getEmissionManager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xd9a6e968e6945745f3ecca633f7b025d73997eb0abf2dde8427c7db44c0605ca\",\"license\":\"AGPL-3.0\"},\"contracts/periphery/rewards/interfaces/ITransferStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface ITransferStrategyBase {\\r\\n  event EmergencyWithdrawal(\\r\\n    address indexed caller,\\r\\n    address indexed token,\\r\\n    address indexed to,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation\\r\\n   * @param to Account to transfer rewards\\r\\n   * @param reward Address of the reward token\\r\\n   * @param amount Amount to transfer to the \\\"to\\\" address parameter\\r\\n   * @return Returns true bool if transfer logic succeeds\\r\\n   */\\r\\n  function performTransfer(\\r\\n    address to,\\r\\n    address reward,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @return Returns the address of the Incentives Controller\\r\\n   */\\r\\n  function getIncentivesController() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @return Returns the address of the Rewards admin\\r\\n   */\\r\\n  function getRewardsAdmin() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Perform an emergency token withdrawal only callable by the Rewards admin\\r\\n   * @param token Address of the token to withdraw funds from this contract\\r\\n   * @param to Address of the recipient of the withdrawal\\r\\n   * @param amount Amount of the withdrawal\\r\\n   */\\r\\n  function emergencyWithdrawal(\\r\\n    address token,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7b787b2a23a65ea52cb81646a0a581c1822f9c0a7380bf491fbdd911a64a7281\",\"license\":\"AGPL-3.0\"},\"contracts/periphery/rewards/libraries/RewardsDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {ITransferStrategyBase} from '../interfaces/ITransferStrategyBase.sol';\\r\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\r\\n\\r\\nlibrary RewardsDataTypes {\\r\\n  struct RewardsConfigInput {\\r\\n    uint88 emissionPerSecond;\\r\\n    uint256 totalSupply;\\r\\n    uint32 distributionEnd;\\r\\n    address asset;\\r\\n    address reward;\\r\\n    ITransferStrategyBase transferStrategy;\\r\\n    IEACAggregatorProxy rewardOracle;\\r\\n  }\\r\\n\\r\\n  struct UserAssetBalance {\\r\\n    address asset;\\r\\n    uint256 userBalance;\\r\\n    uint256 totalSupply;\\r\\n  }\\r\\n\\r\\n  struct UserData {\\r\\n    // Liquidity index of the reward distribution for the user\\r\\n    uint104 index;\\r\\n    // Amount of accrued rewards for the user since last user index update\\r\\n    uint128 accrued;\\r\\n  }\\r\\n\\r\\n  struct RewardData {\\r\\n    // Liquidity index of the reward distribution\\r\\n    uint104 index;\\r\\n    // Amount of reward tokens distributed per second\\r\\n    uint88 emissionPerSecond;\\r\\n    // Timestamp of the last reward index update\\r\\n    uint32 lastUpdateTimestamp;\\r\\n    // The end of the distribution of rewards (in seconds)\\r\\n    uint32 distributionEnd;\\r\\n    // Map of user addresses and their rewards data (userAddress => userData)\\r\\n    mapping(address => UserData) usersData;\\r\\n  }\\r\\n\\r\\n  struct AssetData {\\r\\n    // Map of reward token addresses and their data (rewardTokenAddress => rewardData)\\r\\n    mapping(address => RewardData) rewards;\\r\\n    // List of reward token addresses for the asset\\r\\n    mapping(uint128 => address) availableRewards;\\r\\n    // Count of reward tokens for the asset\\r\\n    uint128 availableRewardsCount;\\r\\n    // Number of decimals of the asset\\r\\n    uint8 decimals;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x653fa346267b50bd80c47e23653f4839f5c4b32d903ecebd05593f3b2ac9f61c\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063bee36bb31161008c578063e15ac62311610066578063e15ac623146101a7578063f2fde38b146101ba578063f5cf673b146101cd578063f996868b146101e057600080fd5b8063bee36bb314610170578063c5a7b53814610183578063de2627381461019657600080fd5b8063529b1e87146100d45780635453ba101461011c578063715018a6146101315780638da5cb5b14610139578063955c2ad71461014a578063a286c6b41461015d575b600080fd5b6101006100e23660046108a4565b6001600160a01b039081166000908152600160205260409020541690565b6040516001600160a01b03909116815260200160405180910390f35b61012f61012a3660046108c8565b6101f3565b005b61012f6102a4565b6000546001600160a01b0316610100565b61012f6101583660046109a0565b610318565b61012f61016b3660046108c8565b610405565b61012f61017e3660046108a4565b610493565b61012f610191366004610ac8565b6104df565b6002546001600160a01b0316610100565b61012f6101b53660046108c8565b610593565b61012f6101c83660046108a4565b610608565b61012f6101db3660046108c8565b6106f2565b61012f6101ee366004610b5b565b610787565b6001600160a01b0382811660009081526001602052604090205483911633146102375760405162461bcd60e51b815260040161022e90610bde565b60405180910390fd5b6002546040516305453ba160e41b81526001600160a01b038581166004830152848116602483015290911690635453ba10906044015b600060405180830381600087803b15801561028757600080fd5b505af115801561029b573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b031633146102ce5760405162461bcd60e51b815260040161022e90610c0b565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60005b815181101561039f57336001600160a01b03166001600084848151811061034457610344610c40565b602090810291909101810151608001516001600160a01b0390811683529082019290925260400160002054161461038d5760405162461bcd60e51b815260040161022e90610bde565b8061039781610c56565b91505061031b565b5060025460405163955c2ad760e01b81526001600160a01b039091169063955c2ad7906103d0908490600401610c7d565b600060405180830381600087803b1580156103ea57600080fd5b505af11580156103fe573d6000803e3d6000fd5b5050505050565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161022e90610c0b565b6001600160a01b0380831660008181526001602052604080822080548686166001600160a01b0319821681179092559151919094169392849290917fda40ea421dd7e42cf8be71255facac4fdc12a3f70f4d5fd373cb16cec4cb53849190a4505050565b6000546001600160a01b031633146104bd5760405162461bcd60e51b815260040161022e90610c0b565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03828116600090815260016020526040902054839116331461051a5760405162461bcd60e51b815260040161022e90610bde565b6002546040516318b4f6a760e31b81526001600160a01b038681166004830152858116602483015263ffffffff851660448301529091169063c5a7b53890606401600060405180830381600087803b15801561057557600080fd5b505af1158015610589573d6000803e3d6000fd5b5050505050505050565b6001600160a01b0382811660009081526001602052604090205483911633146105ce5760405162461bcd60e51b815260040161022e90610bde565b60025460405163e15ac62360e01b81526001600160a01b03858116600483015284811660248301529091169063e15ac6239060440161026d565b6000546001600160a01b031633146106325760405162461bcd60e51b815260040161022e90610c0b565b6001600160a01b0381166106975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161022e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461071c5760405162461bcd60e51b815260040161022e90610c0b565b60025460405163f5cf673b60e01b81526001600160a01b03848116600483015283811660248301529091169063f5cf673b90604401600060405180830381600087803b15801561076b57600080fd5b505af115801561077f573d6000803e3d6000fd5b505050505050565b60005b8381101561080a5733600160008787858181106107a9576107a9610c40565b90506020020160208101906107be91906108a4565b6001600160a01b03908116825260208201929092526040016000205416146107f85760405162461bcd60e51b815260040161022e90610bde565b8061080281610c56565b91505061078a565b5060025460405163f996868b60e01b81526001600160a01b039091169063f996868b906108439088908890889088908890600401610d25565b600060405180830381600087803b15801561085d57600080fd5b505af1158015610871573d6000803e3d6000fd5b505050505050505050565b6001600160a01b038116811461089157600080fd5b50565b803561089f8161087c565b919050565b6000602082840312156108b657600080fd5b81356108c18161087c565b9392505050565b600080604083850312156108db57600080fd5b82356108e68161087c565b915060208301356108f68161087c565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561093a5761093a610901565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561096957610969610901565b604052919050565b80356affffffffffffffffffffff8116811461089f57600080fd5b803563ffffffff8116811461089f57600080fd5b600060208083850312156109b357600080fd5b823567ffffffffffffffff808211156109cb57600080fd5b818501915085601f8301126109df57600080fd5b8135818111156109f1576109f1610901565b6109ff848260051b01610940565b818152848101925060e0918202840185019188831115610a1e57600080fd5b938501935b82851015610abc5780858a031215610a3b5760008081fd5b610a43610917565b610a4c86610971565b815286860135878201526040610a6381880161098c565b90820152606086810135610a768161087c565b908201526080610a87878201610894565b9082015260a0610a98878201610894565b9082015260c0610aa9878201610894565b9082015284529384019392850192610a23565b50979650505050505050565b600080600060608486031215610add57600080fd5b8335610ae88161087c565b92506020840135610af88161087c565b9150610b066040850161098c565b90509250925092565b60008083601f840112610b2157600080fd5b50813567ffffffffffffffff811115610b3957600080fd5b6020830191508360208260051b8501011115610b5457600080fd5b9250929050565b600080600080600060608688031215610b7357600080fd5b8535610b7e8161087c565b9450602086013567ffffffffffffffff80821115610b9b57600080fd5b610ba789838a01610b0f565b90965094506040880135915080821115610bc057600080fd5b50610bcd88828901610b0f565b969995985093965092949392505050565b60208082526013908201527227a7262cafa2a6a4a9a9a4a7a72fa0a226a4a760691b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060018201610c7657634e487b7160e01b600052601160045260246000fd5b5060010190565b602080825282518282018190526000919060409081850190868401855b82811015610d1857815180516affffffffffffffffffffff16855286810151878601528581015163ffffffff16868601526060808201516001600160a01b039081169187019190915260808083015182169087015260a08083015182169087015260c091820151169085015260e09093019290850190600101610c9a565b5091979650505050505050565b6001600160a01b03868116825260606020808401829052908301869052600091879160808501845b89811015610d74578435610d608161087c565b841682529382019390820190600101610d4d565b5085810360408701528681528101925086915060005b86811015610dba576affffffffffffffffffffff610da784610971565b1684529281019291810191600101610d8a565b5091999850505050505050505056fea264697066735822122012117e3b26dc3388449ef35829430129e21efad6e162dce1f8a30d567032717e64736f6c63430008140033",
  "devdoc": {
    "author": "Aave",
    "events": {
      "EmissionAdminUpdated(address,address,address)": {
        "details": "Emitted when the admin of a reward emission is updated.",
        "params": {
          "newAdmin": "The address of the new emission admin",
          "oldAdmin": "The address of the old emission admin",
          "reward": "The address of the rewarding token"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "configureAssets((uint88,uint256,uint32,address,address,address,address)[])": {
        "details": "Configure assets to incentivize with an emission of rewards per second until the end of distribution.Only callable by the emission admin of the given rewards",
        "params": {
          "config": "The assets configuration input, the list of structs contains the following fields:   uint104 emissionPerSecond: The emission per second following rewards unit decimals.   uint256 totalSupply: The total supply of the asset to incentivize   uint40 distributionEnd: The end of the distribution of the incentives for an asset   address asset: The asset address to incentivize   address reward: The reward token address   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible."
        }
      },
      "constructor": {
        "params": {
          "owner": "The address of the owner"
        }
      },
      "getEmissionAdmin(address)": {
        "details": "Returns the admin of the given reward emission",
        "params": {
          "reward": "The address of the reward token"
        },
        "returns": {
          "_0": "The address of the emission admin"
        }
      },
      "getRewardsController()": {
        "details": "Returns the rewards controller address",
        "returns": {
          "_0": "The address of the RewardsController contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setClaimer(address,address)": {
        "details": "Whitelists an address to claim the rewards on behalf of another addressOnly callable by the owner of the EmissionManager",
        "params": {
          "claimer": "The address of the claimer",
          "user": "The address of the user"
        }
      },
      "setDistributionEnd(address,address,uint32)": {
        "details": "Sets the end date for the distributionOnly callable by the emission admin of the given reward",
        "params": {
          "asset": "The asset to incentivize",
          "newDistributionEnd": "The end date of the incentivization, in unix time format*",
          "reward": "The reward token that incentives the asset"
        }
      },
      "setEmissionAdmin(address,address)": {
        "details": "Updates the admin of the reward emissionOnly callable by the owner of the EmissionManager",
        "params": {
          "admin": "The address of the new admin of the emission",
          "reward": "The address of the reward token"
        }
      },
      "setEmissionPerSecond(address,address[],uint88[])": {
        "details": "Sets the emission per second of a set of reward distributions",
        "params": {
          "asset": "The asset is being incentivized",
          "newEmissionsPerSecond": "List of new reward emissions per second",
          "rewards": "List of reward addresses are being distributed"
        }
      },
      "setRewardOracle(address,address)": {
        "details": "Sets an Aave Oracle contract to enforce rewards with a source of value.Only callable by the emission admin of the given reward",
        "params": {
          "reward": "The address of the reward to set the price aggregator",
          "rewardOracle": "The address of price aggregator that follows IEACAggregatorProxy interface"
        }
      },
      "setRewardsController(address)": {
        "details": "Updates the address of the rewards controllerOnly callable by the owner of the EmissionManager",
        "params": {
          "controller": "the address of the RewardsController contract"
        }
      },
      "setTransferStrategy(address,address)": {
        "details": "Sets a TransferStrategy logic contract that determines the logic of the rewards transferOnly callable by the emission admin of the given reward",
        "params": {
          "reward": "The address of the reward token",
          "transferStrategy": "The address of the TransferStrategy logic contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "EmissionManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor."
      },
      "setRewardOracle(address,address)": {
        "notice": "At the moment of reward configuration, the Incentives Controller performs a check to see if the reward asset oracle is compatible with IEACAggregator proxy. This check is enforced for integrators to be able to show incentives at the current Aave UI without the need to setup an external price registry"
      }
    },
    "notice": "It manages the list of admins of reward emissions and provides functions to control reward emissions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1472,
        "contract": "contracts/periphery/rewards/EmissionManager.sol:EmissionManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17921,
        "contract": "contracts/periphery/rewards/EmissionManager.sol:EmissionManager",
        "label": "_emissionAdmins",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 17924,
        "contract": "contracts/periphery/rewards/EmissionManager.sol:EmissionManager",
        "label": "_rewardsController",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRewardsController)21000"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardsController)21000": {
        "encoding": "inplace",
        "label": "contract IRewardsController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}
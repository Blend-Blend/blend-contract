{
  "address": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        }
      ],
      "name": "IsolationModeTotalDebtUpdated",
      "type": "event"
    }
  ],
  "transactionHash": "0xc68e36c5c101e86570ca3d0c18e1a1d2c58c6f4954c9a5bdb27b823448242b6f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
    "transactionIndex": 0,
    "gasUsed": "72227",
    "logsBloom": "0x
    "blockHash": "0x8390345a462728d2059330829f50d4600bb62ed67b7c179dc902615e26649d08",
    "transactionHash": "0xc68e36c5c101e86570ca3d0c18e1a1d2c58c6f4954c9a5bdb27b823448242b6f",
    "logs": [],
    "blockNumber": 31,
    "cumulativeGasUsed": "72227",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c351ce62b62f76bd5a8479a8f9cf6c24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"}],\"name\":\"IsolationModeTotalDebtUpdated\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Aave\",\"kind\":\"dev\",\"methods\":{},\"title\":\"IsolationModeLogic library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Implements the base logic for handling repayments for assets borrowed in isolation mode\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/libraries/logic/IsolationModeLogic.sol\":\"IsolationModeLogic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\r\\n * easily result in undesired exploitation or bugs, since developers usually\\r\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\r\\n * reverting the transaction when such an operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n *\\r\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\r\\n * all math on `uint256` and `int256` and then downcasting.\\r\\n */\\r\\nlibrary SafeCast {\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint224 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint224).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint224` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 224 bits\\r\\n   */\\r\\n  function toUint224(uint256 value) internal pure returns (uint224) {\\r\\n    require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\r\\n    return uint224(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint128 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint128).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint128` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 128 bits\\r\\n   */\\r\\n  function toUint128(uint256 value) internal pure returns (uint128) {\\r\\n    require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\r\\n    return uint128(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint96 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint96).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint96` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 96 bits\\r\\n   */\\r\\n  function toUint96(uint256 value) internal pure returns (uint96) {\\r\\n    require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\r\\n    return uint96(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint64 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint64).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint64` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 64 bits\\r\\n   */\\r\\n  function toUint64(uint256 value) internal pure returns (uint64) {\\r\\n    require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\r\\n    return uint64(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint32 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint32).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint32` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 32 bits\\r\\n   */\\r\\n  function toUint32(uint256 value) internal pure returns (uint32) {\\r\\n    require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\r\\n    return uint32(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint16 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint16).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint16` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 16 bits\\r\\n   */\\r\\n  function toUint16(uint256 value) internal pure returns (uint16) {\\r\\n    require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\r\\n    return uint16(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint8 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint8).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint8` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 8 bits.\\r\\n   */\\r\\n  function toUint8(uint256 value) internal pure returns (uint8) {\\r\\n    require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\r\\n    return uint8(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a signed int256 into an unsigned uint256.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must be greater than or equal to 0.\\r\\n   */\\r\\n  function toUint256(int256 value) internal pure returns (uint256) {\\r\\n    require(value >= 0, 'SafeCast: value must be positive');\\r\\n    return uint256(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted int128 from int256, reverting on\\r\\n   * overflow (when the input is less than smallest int128 or\\r\\n   * greater than largest int128).\\r\\n   *\\r\\n   * Counterpart to Solidity's `int128` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 128 bits\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function toInt128(int256 value) internal pure returns (int128) {\\r\\n    require(\\r\\n      value >= type(int128).min && value <= type(int128).max,\\r\\n      \\\"SafeCast: value doesn't fit in 128 bits\\\"\\r\\n    );\\r\\n    return int128(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted int64 from int256, reverting on\\r\\n   * overflow (when the input is less than smallest int64 or\\r\\n   * greater than largest int64).\\r\\n   *\\r\\n   * Counterpart to Solidity's `int64` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 64 bits\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function toInt64(int256 value) internal pure returns (int64) {\\r\\n    require(\\r\\n      value >= type(int64).min && value <= type(int64).max,\\r\\n      \\\"SafeCast: value doesn't fit in 64 bits\\\"\\r\\n    );\\r\\n    return int64(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted int32 from int256, reverting on\\r\\n   * overflow (when the input is less than smallest int32 or\\r\\n   * greater than largest int32).\\r\\n   *\\r\\n   * Counterpart to Solidity's `int32` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 32 bits\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function toInt32(int256 value) internal pure returns (int32) {\\r\\n    require(\\r\\n      value >= type(int32).min && value <= type(int32).max,\\r\\n      \\\"SafeCast: value doesn't fit in 32 bits\\\"\\r\\n    );\\r\\n    return int32(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted int16 from int256, reverting on\\r\\n   * overflow (when the input is less than smallest int16 or\\r\\n   * greater than largest int16).\\r\\n   *\\r\\n   * Counterpart to Solidity's `int16` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 16 bits\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function toInt16(int256 value) internal pure returns (int16) {\\r\\n    require(\\r\\n      value >= type(int16).min && value <= type(int16).max,\\r\\n      \\\"SafeCast: value doesn't fit in 16 bits\\\"\\r\\n    );\\r\\n    return int16(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted int8 from int256, reverting on\\r\\n   * overflow (when the input is less than smallest int8 or\\r\\n   * greater than largest int8).\\r\\n   *\\r\\n   * Counterpart to Solidity's `int8` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 8 bits.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function toInt8(int256 value) internal pure returns (int8) {\\r\\n    require(\\r\\n      value >= type(int8).min && value <= type(int8).max,\\r\\n      \\\"SafeCast: value doesn't fit in 8 bits\\\"\\r\\n    );\\r\\n    return int8(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts an unsigned uint256 into a signed int256.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must be less than or equal to maxInt256.\\r\\n   */\\r\\n  function toInt256(uint256 value) internal pure returns (int256) {\\r\\n    // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\r\\n    require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\r\\n    return int256(value);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x9dc85595ff727e421497d6507db33360a47adf75fb17eee51680c4e60e4b0447\",\"license\":\"MIT\"},\"contracts/protocol/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {Errors} from '../helpers/Errors.sol';\\r\\nimport {DataTypes} from '../types/DataTypes.sol';\\r\\n\\r\\n/**\\r\\n * @title ReserveConfiguration library\\r\\n * @author Aave\\r\\n * @notice Implements the bitmap logic to handle the reserve configuration\\r\\n */\\r\\nlibrary ReserveConfiguration {\\r\\n  uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\r\\n  uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\r\\n  uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant FLASHLOAN_ENABLED_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n\\r\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\r\\n  uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\r\\n  uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\r\\n  uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\r\\n  uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\r\\n  uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\r\\n  uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\r\\n  uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\r\\n  uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\r\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\r\\n  uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\r\\n  uint256 internal constant FLASHLOAN_ENABLED_START_BIT_POSITION = 63;\\r\\n  uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\r\\n  uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\r\\n  uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\r\\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\\r\\n  uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\\r\\n  uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\\r\\n  uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\\r\\n\\r\\n  uint256 internal constant MAX_VALID_LTV = 65535;\\r\\n  uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\r\\n  uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\r\\n  uint256 internal constant MAX_VALID_DECIMALS = 255;\\r\\n  uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\\r\\n  uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\\r\\n  uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\\r\\n  uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\\r\\n  uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\\r\\n  uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\\r\\n  uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\\r\\n\\r\\n  uint256 public constant DEBT_CEILING_DECIMALS = 2;\\r\\n  uint16 public constant MAX_RESERVES_COUNT = 128;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the Loan to Value of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param ltv The new ltv\\r\\n   */\\r\\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\r\\n    require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\\r\\n\\r\\n    self.data = (self.data & LTV_MASK) | ltv;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the Loan to Value of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The loan to value\\r\\n   */\\r\\n  function getLtv(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\r\\n    return self.data & ~LTV_MASK;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the liquidation threshold of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param threshold The new liquidation threshold\\r\\n   */\\r\\n  function setLiquidationThreshold(\\r\\n    DataTypes.ReserveConfigurationMap memory self,\\r\\n    uint256 threshold\\r\\n  ) internal pure {\\r\\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.INVALID_LIQ_THRESHOLD);\\r\\n\\r\\n    self.data =\\r\\n      (self.data & LIQUIDATION_THRESHOLD_MASK) |\\r\\n      (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the liquidation threshold of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The liquidation threshold\\r\\n   */\\r\\n  function getLiquidationThreshold(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (uint256) {\\r\\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the liquidation bonus of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param bonus The new liquidation bonus\\r\\n   */\\r\\n  function setLiquidationBonus(\\r\\n    DataTypes.ReserveConfigurationMap memory self,\\r\\n    uint256 bonus\\r\\n  ) internal pure {\\r\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\\r\\n\\r\\n    self.data =\\r\\n      (self.data & LIQUIDATION_BONUS_MASK) |\\r\\n      (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the liquidation bonus of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The liquidation bonus\\r\\n   */\\r\\n  function getLiquidationBonus(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (uint256) {\\r\\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the decimals of the underlying asset of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param decimals The decimals\\r\\n   */\\r\\n  function setDecimals(\\r\\n    DataTypes.ReserveConfigurationMap memory self,\\r\\n    uint256 decimals\\r\\n  ) internal pure {\\r\\n    require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\\r\\n\\r\\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the decimals of the underlying asset of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The decimals of the asset\\r\\n   */\\r\\n  function getDecimals(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (uint256) {\\r\\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the active state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param active The active state\\r\\n   */\\r\\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\r\\n    self.data =\\r\\n      (self.data & ACTIVE_MASK) |\\r\\n      (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the active state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The active state\\r\\n   */\\r\\n  function getActive(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\r\\n    return (self.data & ~ACTIVE_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the frozen state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param frozen The frozen state\\r\\n   */\\r\\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\r\\n    self.data =\\r\\n      (self.data & FROZEN_MASK) |\\r\\n      (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the frozen state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The frozen state\\r\\n   */\\r\\n  function getFrozen(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\r\\n    return (self.data & ~FROZEN_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the paused state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param paused The paused state\\r\\n   */\\r\\n  function setPaused(DataTypes.ReserveConfigurationMap memory self, bool paused) internal pure {\\r\\n    self.data =\\r\\n      (self.data & PAUSED_MASK) |\\r\\n      (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the paused state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The paused state\\r\\n   */\\r\\n  function getPaused(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\r\\n    return (self.data & ~PAUSED_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the borrowable in isolation flag for the reserve.\\r\\n   * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\\r\\n   * amount will be accumulated in the isolated collateral's total debt exposure.\\r\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\r\\n   * consistency in the debt ceiling calculations.\\r\\n   * @param self The reserve configuration\\r\\n   * @param borrowable True if the asset is borrowable\\r\\n   */\\r\\n  function setBorrowableInIsolation(\\r\\n    DataTypes.ReserveConfigurationMap memory self,\\r\\n    bool borrowable\\r\\n  ) internal pure {\\r\\n    self.data =\\r\\n      (self.data & BORROWABLE_IN_ISOLATION_MASK) |\\r\\n      (uint256(borrowable ? 1 : 0) << BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the borrowable in isolation flag for the reserve.\\r\\n   * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\\r\\n   * isolated collateral is accounted for in the isolated collateral's total debt exposure.\\r\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\r\\n   * consistency in the debt ceiling calculations.\\r\\n   * @param self The reserve configuration\\r\\n   * @return The borrowable in isolation flag\\r\\n   */\\r\\n  function getBorrowableInIsolation(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (bool) {\\r\\n    return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the siloed borrowing flag for the reserve.\\r\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\r\\n   * @param self The reserve configuration\\r\\n   * @param siloed True if the asset is siloed\\r\\n   */\\r\\n  function setSiloedBorrowing(\\r\\n    DataTypes.ReserveConfigurationMap memory self,\\r\\n    bool siloed\\r\\n  ) internal pure {\\r\\n    self.data =\\r\\n      (self.data & SILOED_BORROWING_MASK) |\\r\\n      (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the siloed borrowing flag for the reserve.\\r\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\r\\n   * @param self The reserve configuration\\r\\n   * @return The siloed borrowing flag\\r\\n   */\\r\\n  function getSiloedBorrowing(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (bool) {\\r\\n    return (self.data & ~SILOED_BORROWING_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Enables or disables borrowing on the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\\r\\n   */\\r\\n  function setBorrowingEnabled(\\r\\n    DataTypes.ReserveConfigurationMap memory self,\\r\\n    bool enabled\\r\\n  ) internal pure {\\r\\n    self.data =\\r\\n      (self.data & BORROWING_MASK) |\\r\\n      (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the borrowing state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The borrowing state\\r\\n   */\\r\\n  function getBorrowingEnabled(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (bool) {\\r\\n    return (self.data & ~BORROWING_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Enables or disables stable rate borrowing on the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\r\\n   */\\r\\n  function setStableRateBorrowingEnabled(\\r\\n    DataTypes.ReserveConfigurationMap memory self,\\r\\n    bool enabled\\r\\n  ) internal pure {\\r\\n    self.data =\\r\\n      (self.data & STABLE_BORROWING_MASK) |\\r\\n      (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the stable rate borrowing state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The stable rate borrowing state\\r\\n   */\\r\\n  function getStableRateBorrowingEnabled(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (bool) {\\r\\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the reserve factor of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param reserveFactor The reserve factor\\r\\n   */\\r\\n  function setReserveFactor(\\r\\n    DataTypes.ReserveConfigurationMap memory self,\\r\\n    uint256 reserveFactor\\r\\n  ) internal pure {\\r\\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.INVALID_RESERVE_FACTOR);\\r\\n\\r\\n    self.data =\\r\\n      (self.data & RESERVE_FACTOR_MASK) |\\r\\n      (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the reserve factor of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The reserve factor\\r\\n   */\\r\\n  function getReserveFactor(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (uint256) {\\r\\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the borrow cap of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param borrowCap The borrow cap\\r\\n   */\\r\\n  function setBorrowCap(\\r\\n    DataTypes.ReserveConfigurationMap memory self,\\r\\n    uint256 borrowCap\\r\\n  ) internal pure {\\r\\n    require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\r\\n\\r\\n    self.data = (self.data & BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the borrow cap of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The borrow cap\\r\\n   */\\r\\n  function getBorrowCap(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (uint256) {\\r\\n    return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the supply cap of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param supplyCap The supply cap\\r\\n   */\\r\\n  function setSupplyCap(\\r\\n    DataTypes.ReserveConfigurationMap memory self,\\r\\n    uint256 supplyCap\\r\\n  ) internal pure {\\r\\n    require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\\r\\n\\r\\n    self.data = (self.data & SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the supply cap of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The supply cap\\r\\n   */\\r\\n  function getSupplyCap(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (uint256) {\\r\\n    return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the debt ceiling in isolation mode for the asset\\r\\n   * @param self The reserve configuration\\r\\n   * @param ceiling The maximum debt ceiling for the asset\\r\\n   */\\r\\n  function setDebtCeiling(\\r\\n    DataTypes.ReserveConfigurationMap memory self,\\r\\n    uint256 ceiling\\r\\n  ) internal pure {\\r\\n    require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\\r\\n\\r\\n    self.data = (self.data & DEBT_CEILING_MASK) | (ceiling << DEBT_CEILING_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\\r\\n   * @param self The reserve configuration\\r\\n   * @return The debt ceiling (0 = isolation mode disabled)\\r\\n   */\\r\\n  function getDebtCeiling(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (uint256) {\\r\\n    return (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the liquidation protocol fee of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param liquidationProtocolFee The liquidation protocol fee\\r\\n   */\\r\\n  function setLiquidationProtocolFee(\\r\\n    DataTypes.ReserveConfigurationMap memory self,\\r\\n    uint256 liquidationProtocolFee\\r\\n  ) internal pure {\\r\\n    require(\\r\\n      liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\\r\\n      Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\r\\n    );\\r\\n\\r\\n    self.data =\\r\\n      (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\\r\\n      (liquidationProtocolFee << LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the liquidation protocol fee\\r\\n   * @param self The reserve configuration\\r\\n   * @return The liquidation protocol fee\\r\\n   */\\r\\n  function getLiquidationProtocolFee(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (uint256) {\\r\\n    return\\r\\n      (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >> LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the unbacked mint cap of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param unbackedMintCap The unbacked mint cap\\r\\n   */\\r\\n  function setUnbackedMintCap(\\r\\n    DataTypes.ReserveConfigurationMap memory self,\\r\\n    uint256 unbackedMintCap\\r\\n  ) internal pure {\\r\\n    require(unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP, Errors.INVALID_UNBACKED_MINT_CAP);\\r\\n\\r\\n    self.data =\\r\\n      (self.data & UNBACKED_MINT_CAP_MASK) |\\r\\n      (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the unbacked mint cap of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The unbacked mint cap\\r\\n   */\\r\\n  function getUnbackedMintCap(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (uint256) {\\r\\n    return (self.data & ~UNBACKED_MINT_CAP_MASK) >> UNBACKED_MINT_CAP_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the eMode asset category\\r\\n   * @param self The reserve configuration\\r\\n   * @param category The asset category when the user selects the eMode\\r\\n   */\\r\\n  function setEModeCategory(\\r\\n    DataTypes.ReserveConfigurationMap memory self,\\r\\n    uint256 category\\r\\n  ) internal pure {\\r\\n    require(category <= MAX_VALID_EMODE_CATEGORY, Errors.INVALID_EMODE_CATEGORY);\\r\\n\\r\\n    self.data = (self.data & EMODE_CATEGORY_MASK) | (category << EMODE_CATEGORY_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the eMode asset category\\r\\n   * @param self The reserve configuration\\r\\n   * @return The eMode category for the asset\\r\\n   */\\r\\n  function getEModeCategory(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (uint256) {\\r\\n    return (self.data & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the flashloanable flag for the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param flashLoanEnabled True if the asset is flashloanable, false otherwise\\r\\n   */\\r\\n  function setFlashLoanEnabled(\\r\\n    DataTypes.ReserveConfigurationMap memory self,\\r\\n    bool flashLoanEnabled\\r\\n  ) internal pure {\\r\\n    self.data =\\r\\n      (self.data & FLASHLOAN_ENABLED_MASK) |\\r\\n      (uint256(flashLoanEnabled ? 1 : 0) << FLASHLOAN_ENABLED_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the flashloanable flag for the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The flashloanable flag\\r\\n   */\\r\\n  function getFlashLoanEnabled(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (bool) {\\r\\n    return (self.data & ~FLASHLOAN_ENABLED_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the configuration flags of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The state flag representing active\\r\\n   * @return The state flag representing frozen\\r\\n   * @return The state flag representing borrowing enabled\\r\\n   * @return The state flag representing stableRateBorrowing enabled\\r\\n   * @return The state flag representing paused\\r\\n   */\\r\\n  function getFlags(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (bool, bool, bool, bool, bool) {\\r\\n    uint256 dataLocal = self.data;\\r\\n\\r\\n    return (\\r\\n      (dataLocal & ~ACTIVE_MASK) != 0,\\r\\n      (dataLocal & ~FROZEN_MASK) != 0,\\r\\n      (dataLocal & ~BORROWING_MASK) != 0,\\r\\n      (dataLocal & ~STABLE_BORROWING_MASK) != 0,\\r\\n      (dataLocal & ~PAUSED_MASK) != 0\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the configuration parameters of the reserve from storage\\r\\n   * @param self The reserve configuration\\r\\n   * @return The state param representing ltv\\r\\n   * @return The state param representing liquidation threshold\\r\\n   * @return The state param representing liquidation bonus\\r\\n   * @return The state param representing reserve decimals\\r\\n   * @return The state param representing reserve factor\\r\\n   * @return The state param representing eMode category\\r\\n   */\\r\\n  function getParams(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (uint256, uint256, uint256, uint256, uint256, uint256) {\\r\\n    uint256 dataLocal = self.data;\\r\\n\\r\\n    return (\\r\\n      dataLocal & ~LTV_MASK,\\r\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\r\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\r\\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\r\\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION,\\r\\n      (dataLocal & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the caps parameters of the reserve from storage\\r\\n   * @param self The reserve configuration\\r\\n   * @return The state param representing borrow cap\\r\\n   * @return The state param representing supply cap.\\r\\n   */\\r\\n  function getCaps(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (uint256, uint256) {\\r\\n    uint256 dataLocal = self.data;\\r\\n\\r\\n    return (\\r\\n      (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\\r\\n      (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x011e03e774245a14152f29561ccc836317720a2b078b0fb6694f9c070d2a9e32\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/configuration/UserConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {Errors} from '../helpers/Errors.sol';\\r\\nimport {DataTypes} from '../types/DataTypes.sol';\\r\\nimport {ReserveConfiguration} from './ReserveConfiguration.sol';\\r\\n\\r\\n/**\\r\\n * @title UserConfiguration library\\r\\n * @author Aave\\r\\n * @notice Implements the bitmap logic to handle the user configuration\\r\\n */\\r\\nlibrary UserConfiguration {\\r\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\r\\n\\r\\n  uint256 internal constant BORROWING_MASK =\\r\\n    0x5555555555555555555555555555555555555555555555555555555555555555;\\r\\n  uint256 internal constant COLLATERAL_MASK =\\r\\n    0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets if the user is borrowing the reserve identified by reserveIndex\\r\\n   * @param self The configuration object\\r\\n   * @param reserveIndex The index of the reserve in the bitmap\\r\\n   * @param borrowing True if the user is borrowing the reserve, false otherwise\\r\\n   */\\r\\n  function setBorrowing(\\r\\n    DataTypes.UserConfigurationMap storage self,\\r\\n    uint256 reserveIndex,\\r\\n    bool borrowing\\r\\n  ) internal {\\r\\n    unchecked {\\r\\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);\\r\\n      uint256 bit = 1 << (reserveIndex << 1);\\r\\n      if (borrowing) {\\r\\n        self.data |= bit;\\r\\n      } else {\\r\\n        self.data &= ~bit;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets if the user is using as collateral the reserve identified by reserveIndex\\r\\n   * @param self The configuration object\\r\\n   * @param reserveIndex The index of the reserve in the bitmap\\r\\n   * @param usingAsCollateral True if the user is using the reserve as collateral, false otherwise\\r\\n   */\\r\\n  function setUsingAsCollateral(\\r\\n    DataTypes.UserConfigurationMap storage self,\\r\\n    uint256 reserveIndex,\\r\\n    bool usingAsCollateral\\r\\n  ) internal {\\r\\n    unchecked {\\r\\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);\\r\\n      uint256 bit = 1 << ((reserveIndex << 1) + 1);\\r\\n      if (usingAsCollateral) {\\r\\n        self.data |= bit;\\r\\n      } else {\\r\\n        self.data &= ~bit;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns if a user has been using the reserve for borrowing or as collateral\\r\\n   * @param self The configuration object\\r\\n   * @param reserveIndex The index of the reserve in the bitmap\\r\\n   * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\\r\\n   */\\r\\n  function isUsingAsCollateralOrBorrowing(\\r\\n    DataTypes.UserConfigurationMap memory self,\\r\\n    uint256 reserveIndex\\r\\n  ) internal pure returns (bool) {\\r\\n    unchecked {\\r\\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);\\r\\n      return (self.data >> (reserveIndex << 1)) & 3 != 0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Validate a user has been using the reserve for borrowing\\r\\n   * @param self The configuration object\\r\\n   * @param reserveIndex The index of the reserve in the bitmap\\r\\n   * @return True if the user has been using a reserve for borrowing, false otherwise\\r\\n   */\\r\\n  function isBorrowing(\\r\\n    DataTypes.UserConfigurationMap memory self,\\r\\n    uint256 reserveIndex\\r\\n  ) internal pure returns (bool) {\\r\\n    unchecked {\\r\\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);\\r\\n      return (self.data >> (reserveIndex << 1)) & 1 != 0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Validate a user has been using the reserve as collateral\\r\\n   * @param self The configuration object\\r\\n   * @param reserveIndex The index of the reserve in the bitmap\\r\\n   * @return True if the user has been using a reserve as collateral, false otherwise\\r\\n   */\\r\\n  function isUsingAsCollateral(\\r\\n    DataTypes.UserConfigurationMap memory self,\\r\\n    uint256 reserveIndex\\r\\n  ) internal pure returns (bool) {\\r\\n    unchecked {\\r\\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);\\r\\n      return (self.data >> ((reserveIndex << 1) + 1)) & 1 != 0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Checks if a user has been supplying only one reserve as collateral\\r\\n   * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0\\r\\n   * @param self The configuration object\\r\\n   * @return True if the user has been supplying as collateral one reserve, false otherwise\\r\\n   */\\r\\n  function isUsingAsCollateralOne(\\r\\n    DataTypes.UserConfigurationMap memory self\\r\\n  ) internal pure returns (bool) {\\r\\n    uint256 collateralData = self.data & COLLATERAL_MASK;\\r\\n    return collateralData != 0 && (collateralData & (collateralData - 1) == 0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Checks if a user has been supplying any reserve as collateral\\r\\n   * @param self The configuration object\\r\\n   * @return True if the user has been supplying as collateral any reserve, false otherwise\\r\\n   */\\r\\n  function isUsingAsCollateralAny(\\r\\n    DataTypes.UserConfigurationMap memory self\\r\\n  ) internal pure returns (bool) {\\r\\n    return self.data & COLLATERAL_MASK != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Checks if a user has been borrowing only one asset\\r\\n   * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0\\r\\n   * @param self The configuration object\\r\\n   * @return True if the user has been supplying as collateral one reserve, false otherwise\\r\\n   */\\r\\n  function isBorrowingOne(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\r\\n    uint256 borrowingData = self.data & BORROWING_MASK;\\r\\n    return borrowingData != 0 && (borrowingData & (borrowingData - 1) == 0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Checks if a user has been borrowing from any reserve\\r\\n   * @param self The configuration object\\r\\n   * @return True if the user has been borrowing any reserve, false otherwise\\r\\n   */\\r\\n  function isBorrowingAny(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\r\\n    return self.data & BORROWING_MASK != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Checks if a user has not been using any reserve for borrowing or supply\\r\\n   * @param self The configuration object\\r\\n   * @return True if the user has not been borrowing or supplying any reserve, false otherwise\\r\\n   */\\r\\n  function isEmpty(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\r\\n    return self.data == 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the Isolation Mode state of the user\\r\\n   * @param self The configuration object\\r\\n   * @param reservesData The state of all the reserves\\r\\n   * @param reservesList The addresses of all the active reserves\\r\\n   * @return True if the user is in isolation mode, false otherwise\\r\\n   * @return The address of the only asset used as collateral\\r\\n   * @return The debt ceiling of the reserve\\r\\n   */\\r\\n  function getIsolationModeState(\\r\\n    DataTypes.UserConfigurationMap memory self,\\r\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\r\\n    mapping(uint256 => address) storage reservesList\\r\\n  ) internal view returns (bool, address, uint256) {\\r\\n    if (isUsingAsCollateralOne(self)) {\\r\\n      uint256 assetId = _getFirstAssetIdByMask(self, COLLATERAL_MASK);\\r\\n\\r\\n      address assetAddress = reservesList[assetId];\\r\\n      uint256 ceiling = reservesData[assetAddress].configuration.getDebtCeiling();\\r\\n      if (ceiling != 0) {\\r\\n        return (true, assetAddress, ceiling);\\r\\n      }\\r\\n    }\\r\\n    return (false, address(0), 0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the siloed borrowing state for the user\\r\\n   * @param self The configuration object\\r\\n   * @param reservesData The data of all the reserves\\r\\n   * @param reservesList The reserve list\\r\\n   * @return True if the user has borrowed a siloed asset, false otherwise\\r\\n   * @return The address of the only borrowed asset\\r\\n   */\\r\\n  function getSiloedBorrowingState(\\r\\n    DataTypes.UserConfigurationMap memory self,\\r\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\r\\n    mapping(uint256 => address) storage reservesList\\r\\n  ) internal view returns (bool, address) {\\r\\n    if (isBorrowingOne(self)) {\\r\\n      uint256 assetId = _getFirstAssetIdByMask(self, BORROWING_MASK);\\r\\n      address assetAddress = reservesList[assetId];\\r\\n      if (reservesData[assetAddress].configuration.getSiloedBorrowing()) {\\r\\n        return (true, assetAddress);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return (false, address(0));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the first asset flagged in the bitmap given the corresponding bitmask\\r\\n   * @param self The configuration object\\r\\n   * @return The index of the first asset flagged in the bitmap once the corresponding mask is applied\\r\\n   */\\r\\n  function _getFirstAssetIdByMask(\\r\\n    DataTypes.UserConfigurationMap memory self,\\r\\n    uint256 mask\\r\\n  ) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      uint256 bitmapData = self.data & mask;\\r\\n      uint256 firstAssetPosition = bitmapData & ~(bitmapData - 1);\\r\\n      uint256 id;\\r\\n\\r\\n      while ((firstAssetPosition >>= 2) != 0) {\\r\\n        id += 1;\\r\\n      }\\r\\n      return id;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xcc4d1d3059f6d99f1796b08f5b14cc03b97e770fd222d4e4cf53035bde931722\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Errors library\\r\\n * @author Aave\\r\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\r\\n */\\r\\nlibrary Errors {\\r\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\r\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\r\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\r\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\r\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\r\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\r\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\r\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\r\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\r\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\r\\n  string public constant CALLER_NOT_BTOKEN = '11'; // 'The caller of the function is not an BToken'\\r\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\r\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\r\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\r\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\r\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\r\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\r\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\r\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\r\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\r\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\r\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\r\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\r\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\r\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\r\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\r\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\r\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\r\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\r\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\r\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\r\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\r\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\r\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\r\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\r\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\r\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\r\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\r\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\r\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\r\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\r\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\r\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\r\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\r\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\r\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\r\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\r\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\r\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\r\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\r\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\r\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\r\\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54'; // 'Claimable rights over underlying not zero (bToken supply or accruedToTreasury)'\\r\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\r\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\r\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\r\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\r\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\r\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\r\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\r\\n  string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = '62'; // 'User is in isolation mode or ltv is zero'\\r\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\r\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\r\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\r\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\r\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\r\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\r\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\r\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\r\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\r\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\r\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\r\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\r\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\r\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\r\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\r\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\r\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\r\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\r\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\r\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\r\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\r\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\r\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\r\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\r\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\r\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\r\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\r\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\r\\n  string public constant FLASHLOAN_DISABLED = '91'; // FlashLoaning for this asset is disabled\\r\\n}\\r\\n\",\"keccak256\":\"0x553d8e5e86ac2b489c2d2df18a730372881daae5e0cb47566dca8965efc0c134\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/logic/IsolationModeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {DataTypes} from '../types/DataTypes.sol';\\r\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\r\\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\\r\\nimport {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';\\r\\n\\r\\n/**\\r\\n * @title IsolationModeLogic library\\r\\n * @author Aave\\r\\n * @notice Implements the base logic for handling repayments for assets borrowed in isolation mode\\r\\n */\\r\\nlibrary IsolationModeLogic {\\r\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\r\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\r\\n  using SafeCast for uint256;\\r\\n\\r\\n  // See `IPool` for descriptions\\r\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\r\\n\\r\\n  /**\\r\\n   * @notice updated the isolated debt whenever a position collateralized by an isolated asset is repaid or liquidated\\r\\n   * @param reservesData The state of all the reserves\\r\\n   * @param reservesList The addresses of all the active reserves\\r\\n   * @param userConfig The user configuration mapping\\r\\n   * @param reserveCache The cached data of the reserve\\r\\n   * @param repayAmount The amount being repaid\\r\\n   */\\r\\n  function updateIsolatedDebtIfIsolated(\\r\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\r\\n    mapping(uint256 => address) storage reservesList,\\r\\n    DataTypes.UserConfigurationMap storage userConfig,\\r\\n    DataTypes.ReserveCache memory reserveCache,\\r\\n    uint256 repayAmount\\r\\n  ) internal {\\r\\n    (bool isolationModeActive, address isolationModeCollateralAddress, ) = userConfig\\r\\n      .getIsolationModeState(reservesData, reservesList);\\r\\n\\r\\n    if (isolationModeActive) {\\r\\n      uint128 isolationModeTotalDebt = reservesData[isolationModeCollateralAddress]\\r\\n        .isolationModeTotalDebt;\\r\\n\\r\\n      uint128 isolatedDebtRepaid = (repayAmount /\\r\\n        10 **\\r\\n          (reserveCache.reserveConfiguration.getDecimals() -\\r\\n            ReserveConfiguration.DEBT_CEILING_DECIMALS)).toUint128();\\r\\n\\r\\n      // since the debt ceiling does not take into account the interest accrued, it might happen that amount\\r\\n      // repaid > debt in isolation mode\\r\\n      if (isolationModeTotalDebt <= isolatedDebtRepaid) {\\r\\n        reservesData[isolationModeCollateralAddress].isolationModeTotalDebt = 0;\\r\\n        emit IsolationModeTotalDebtUpdated(isolationModeCollateralAddress, 0);\\r\\n      } else {\\r\\n        uint256 nextIsolationModeTotalDebt = reservesData[isolationModeCollateralAddress]\\r\\n          .isolationModeTotalDebt = isolationModeTotalDebt - isolatedDebtRepaid;\\r\\n        emit IsolationModeTotalDebtUpdated(\\r\\n          isolationModeCollateralAddress,\\r\\n          nextIsolationModeTotalDebt\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x6e26034a1b5c65d24d0fab2f8573eb59969ada127b57d4b3727108705c6b07f6\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary DataTypes {\\r\\n  struct ReserveData {\\r\\n    //stores the reserve configuration\\r\\n    ReserveConfigurationMap configuration;\\r\\n    //the liquidity index. Expressed in ray\\r\\n    uint128 liquidityIndex;\\r\\n    //the current supply rate. Expressed in ray\\r\\n    uint128 currentLiquidityRate;\\r\\n    //variable borrow index. Expressed in ray\\r\\n    uint128 variableBorrowIndex;\\r\\n    //the current variable borrow rate. Expressed in ray\\r\\n    uint128 currentVariableBorrowRate;\\r\\n    //the current stable borrow rate. Expressed in ray\\r\\n    uint128 currentStableBorrowRate;\\r\\n    //timestamp of last update\\r\\n    uint40 lastUpdateTimestamp;\\r\\n    //the id of the reserve. Represents the position in the list of the active reserves\\r\\n    uint16 id;\\r\\n    //bToken address\\r\\n    address bTokenAddress;\\r\\n    //stableDebtToken address\\r\\n    address stableDebtTokenAddress;\\r\\n    //variableDebtToken address\\r\\n    address variableDebtTokenAddress;\\r\\n    //address of the interest rate strategy\\r\\n    address interestRateStrategyAddress;\\r\\n    //the current treasury balance, scaled\\r\\n    uint128 accruedToTreasury;\\r\\n    //the outstanding unbacked bTokens minted through the bridging feature\\r\\n    uint128 unbacked;\\r\\n    //the outstanding debt borrowed against this asset in isolation mode\\r\\n    uint128 isolationModeTotalDebt;\\r\\n  }\\r\\n\\r\\n  struct ReserveConfigurationMap {\\r\\n    //bit 0-15: LTV\\r\\n    //bit 16-31: Liq. threshold\\r\\n    //bit 32-47: Liq. bonus\\r\\n    //bit 48-55: Decimals\\r\\n    //bit 56: reserve is active\\r\\n    //bit 57: reserve is frozen\\r\\n    //bit 58: borrowing is enabled\\r\\n    //bit 59: stable rate borrowing enabled\\r\\n    //bit 60: asset is paused\\r\\n    //bit 61: borrowing in isolation mode is enabled\\r\\n    //bit 62: siloed borrowing enabled\\r\\n    //bit 63: flashloaning enabled\\r\\n    //bit 64-79: reserve factor\\r\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\r\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\r\\n    //bit 152-167 liquidation protocol fee\\r\\n    //bit 168-175 eMode category\\r\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\r\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\r\\n    //bit 252-255 unused\\r\\n\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct UserConfigurationMap {\\r\\n    /**\\r\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\r\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\r\\n     * asset is borrowed by the user.\\r\\n     */\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct EModeCategory {\\r\\n    // each eMode category has a custom ltv and liquidation threshold\\r\\n    uint16 ltv;\\r\\n    uint16 liquidationThreshold;\\r\\n    uint16 liquidationBonus;\\r\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\r\\n    address priceSource;\\r\\n    string label;\\r\\n  }\\r\\n\\r\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\r\\n\\r\\n  struct ReserveCache {\\r\\n    uint256 currScaledVariableDebt;\\r\\n    uint256 nextScaledVariableDebt;\\r\\n    uint256 currPrincipalStableDebt;\\r\\n    uint256 currAvgStableBorrowRate;\\r\\n    uint256 currTotalStableDebt;\\r\\n    uint256 nextAvgStableBorrowRate;\\r\\n    uint256 nextTotalStableDebt;\\r\\n    uint256 currLiquidityIndex;\\r\\n    uint256 nextLiquidityIndex;\\r\\n    uint256 currVariableBorrowIndex;\\r\\n    uint256 nextVariableBorrowIndex;\\r\\n    uint256 currLiquidityRate;\\r\\n    uint256 currVariableBorrowRate;\\r\\n    uint256 reserveFactor;\\r\\n    ReserveConfigurationMap reserveConfiguration;\\r\\n    address bTokenAddress;\\r\\n    address stableDebtTokenAddress;\\r\\n    address variableDebtTokenAddress;\\r\\n    uint40 reserveLastUpdateTimestamp;\\r\\n    uint40 stableDebtLastUpdateTimestamp;\\r\\n  }\\r\\n\\r\\n  struct ExecuteLiquidationCallParams {\\r\\n    uint256 reservesCount;\\r\\n    uint256 debtToCover;\\r\\n    address collateralAsset;\\r\\n    address debtAsset;\\r\\n    address user;\\r\\n    bool receiveBToken;\\r\\n    address priceOracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct ExecuteSupplyParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address onBehalfOf;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct ExecuteBorrowParams {\\r\\n    address asset;\\r\\n    address user;\\r\\n    address onBehalfOf;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    uint16 referralCode;\\r\\n    bool releaseUnderlying;\\r\\n    uint256 maxStableRateBorrowSizePercent;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct ExecuteRepayParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    address onBehalfOf;\\r\\n    bool useBTokens;\\r\\n  }\\r\\n\\r\\n  struct ExecuteWithdrawParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address to;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct ExecuteSetUserEModeParams {\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 categoryId;\\r\\n  }\\r\\n\\r\\n  struct FinalizeTransferParams {\\r\\n    address asset;\\r\\n    address from;\\r\\n    address to;\\r\\n    uint256 amount;\\r\\n    uint256 balanceFromBefore;\\r\\n    uint256 balanceToBefore;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 fromEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct FlashloanParams {\\r\\n    address receiverAddress;\\r\\n    address[] assets;\\r\\n    uint256[] amounts;\\r\\n    uint256[] interestRateModes;\\r\\n    address onBehalfOf;\\r\\n    bytes params;\\r\\n    uint16 referralCode;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    uint256 flashLoanPremiumTotal;\\r\\n    uint256 maxStableRateBorrowSizePercent;\\r\\n    uint256 reservesCount;\\r\\n    address addressesProvider;\\r\\n    uint8 userEModeCategory;\\r\\n    bool isAuthorizedFlashBorrower;\\r\\n  }\\r\\n\\r\\n  struct FlashloanSimpleParams {\\r\\n    address receiverAddress;\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    bytes params;\\r\\n    uint16 referralCode;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    uint256 flashLoanPremiumTotal;\\r\\n  }\\r\\n\\r\\n  struct FlashLoanRepaymentParams {\\r\\n    uint256 amount;\\r\\n    uint256 totalPremium;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    address asset;\\r\\n    address receiverAddress;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct CalculateUserAccountDataParams {\\r\\n    UserConfigurationMap userConfig;\\r\\n    uint256 reservesCount;\\r\\n    address user;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct ValidateBorrowParams {\\r\\n    ReserveCache reserveCache;\\r\\n    UserConfigurationMap userConfig;\\r\\n    address asset;\\r\\n    address userAddress;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    uint256 maxStableLoanPercent;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n    bool isolationModeActive;\\r\\n    address isolationModeCollateralAddress;\\r\\n    uint256 isolationModeDebtCeiling;\\r\\n  }\\r\\n\\r\\n  struct ValidateLiquidationCallParams {\\r\\n    ReserveCache debtReserveCache;\\r\\n    uint256 totalDebt;\\r\\n    uint256 healthFactor;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct CalculateInterestRatesParams {\\r\\n    uint256 unbacked;\\r\\n    uint256 liquidityAdded;\\r\\n    uint256 liquidityTaken;\\r\\n    uint256 totalStableDebt;\\r\\n    uint256 totalVariableDebt;\\r\\n    uint256 averageStableBorrowRate;\\r\\n    uint256 reserveFactor;\\r\\n    address reserve;\\r\\n    address bToken;\\r\\n  }\\r\\n\\r\\n  struct InitReserveParams {\\r\\n    address asset;\\r\\n    address bTokenAddress;\\r\\n    address stableDebtAddress;\\r\\n    address variableDebtAddress;\\r\\n    address interestRateStrategyAddress;\\r\\n    uint16 reservesCount;\\r\\n    uint16 maxNumberReserves;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x521db3fab8031c6c8df8f45e293dd809e8f6389e588576a909ac87a4be1ca056\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206d3db65dcc0bc3361c9da73fbbedcd4b1eeafd3fc3570ab24907ddaaae59d2a564736f6c63430008140033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206d3db65dcc0bc3361c9da73fbbedcd4b1eeafd3fc3570ab24907ddaaae59d2a564736f6c63430008140033",
  "devdoc": {
    "author": "Aave",
    "kind": "dev",
    "methods": {},
    "title": "IsolationModeLogic library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Implements the base logic for handling repayments for assets borrowed in isolation mode",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "senderBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "recipientBalance",
          "type": "uint256"
        }
      ],
      "name": "CancelStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stopTime",
          "type": "uint256"
        }
      ],
      "name": "CreateStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fundsAdmin",
          "type": "address"
        }
      ],
      "name": "NewFundsAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromStream",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_MOCK_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "cancelStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stopTime",
          "type": "uint256"
        }
      ],
      "name": "createStream",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "deltaOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundsAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextStreamId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getStream",
      "outputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stopTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ratePerSecond",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundsAdmin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4ab8707699e6546a933bd3f68d6717709820c73b647ede086837b0a340043e28",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "1570830",
    "logsBloom": "0x
    "blockHash": "0x6a8dd5312e05966af2420c714471bc1135cf18c74ded1326b7365ced501ee3af",
    "transactionHash": "0x4ab8707699e6546a933bd3f68d6717709820c73b647ede086837b0a340043e28",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "1570830",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c351ce62b62f76bd5a8479a8f9cf6c24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipientBalance\",\"type\":\"uint256\"}],\"name\":\"CancelStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"CreateStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundsAdmin\",\"type\":\"address\"}],\"name\":\"NewFundsAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromStream\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_MOCK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancelStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"deltaOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundsAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextStreamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundsAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"BGD Labs*\",\"events\":{\"NewFundsAdmin(address)\":{\"params\":{\"fundsAdmin\":\"The new funds admin*\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,address,uint256)\":{\"details\":\"Function for the funds admin to give ERC20 allowance to other parties\",\"params\":{\"amount\":\"Allowance to approve*\",\"recipient\":\"Allowance's recipient\",\"token\":\"The address of the token to give allowance from\"}},\"balanceOf(uint256,address)\":{\"details\":\"Throws if the id does not point to a valid stream.\",\"params\":{\"streamId\":\"The id of the stream for which to query the balance.\",\"who\":\"The address for which to query the balance.\"}},\"cancelStream(uint256)\":{\"details\":\"Throws if the id does not point to a valid stream.  Throws if the caller is not the funds admin or the recipient of the stream.  Throws if there is a token transfer failure.\",\"params\":{\"streamId\":\"The id of the stream to cancel.\"}},\"createStream(address,uint256,address,uint256,uint256)\":{\"details\":\"Throws if the recipient is the zero address, the contract itself or the caller.  Throws if the deposit is 0.  Throws if the start time is before `block.timestamp`.  Throws if the stop time is before the start time.  Throws if the duration calculation has a math error.  Throws if the deposit is smaller than the duration.  Throws if the deposit is not a multiple of the duration.  Throws if the rate calculation has a math error.  Throws if the next stream id calculation has a math error.  Throws if the contract is not allowed to transfer enough tokens.  Throws if there is a token transfer failure.\",\"params\":{\"deposit\":\"The amount of money to be streamed.\",\"recipient\":\"The address towards which the money is streamed.\",\"startTime\":\"The unix timestamp for when the stream starts.\",\"stopTime\":\"The unix timestamp for when the stream stops.\",\"tokenAddress\":\"The ERC20 token to use as streaming currency.\"}},\"deltaOf(uint256)\":{\"details\":\"Throws if the id does not point to a valid stream.\",\"params\":{\"streamId\":\"The id of the stream for which to query the delta.\"}},\"getFundsAdmin()\":{\"returns\":{\"_0\":\"address The address of the funds admin*\"}},\"getStream(uint256)\":{\"details\":\"Throws if the id does not point to a valid stream.\",\"params\":{\"streamId\":\"The id of the stream to query.\"}},\"transfer(address,address,uint256)\":{\"params\":{\"amount\":\"Amount to transfer*\",\"recipient\":\"Transfer's recipient\",\"token\":\"The address of the token to transfer\"}},\"withdrawFromStream(uint256,uint256)\":{\"details\":\"Throws if the id does not point to a valid stream.  Throws if the caller is not the funds admin or the recipient of the stream.  Throws if the amount exceeds the available balance.  Throws if there is a token transfer failure.\",\"params\":{\"amount\":\"The amount of tokens to withdraw.\",\"streamId\":\"The id of the stream to withdraw tokens from.\"}}},\"title\":\"AaveEcosystemReserve v2\",\"version\":1},\"userdoc\":{\"events\":{\"NewFundsAdmin(address)\":{\"notice\":\"Emitted when the funds admin changes\"}},\"kind\":\"user\",\"methods\":{\"ETH_MOCK_ADDRESS()\":{\"notice\":\"Returns the mock ETH reference address\"},\"balanceOf(uint256,address)\":{\"notice\":\"Returns the available funds for the given stream id and address.Returns the total funds allocated to `who` as uint256.\"},\"cancelStream(uint256)\":{\"notice\":\"Cancels the stream and transfers the tokens back on a pro rata basis.Returns bool true=success, otherwise false.\"},\"createStream(address,uint256,address,uint256,uint256)\":{\"notice\":\"Creates a new stream funded by this contracts itself and paid towards `recipient`.Returns the uint256 id of the newly created stream.\"},\"deltaOf(uint256)\":{\"notice\":\"Returns either the delta in seconds between `block.timestamp` and `startTime` or  between `stopTime` and `startTime, whichever is smaller. If `block.timestamp` is before  `startTime`, it returns 0.Returns the time delta in seconds.\"},\"getFundsAdmin()\":{\"notice\":\"Return the funds admin, only entity to be able to interact with this contract (controller of reserve)\"},\"getNextStreamId()\":{\"notice\":\"Returns the next available stream idReturns the stream id.\"},\"getStream(uint256)\":{\"notice\":\"Returns the stream with all its properties.Returns the stream object.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Function for the funds admin to transfer ERC20 tokens to other parties\"},\"withdrawFromStream(uint256,uint256)\":{\"notice\":\"Withdraws from the contract to the recipient's account.\"}},\"notice\":\"Stores ERC20 tokens of an ecosystem reserve, adding streaming capabilities. Modification of Sablier https://github.com/sablierhq/sablier/blob/develop/packages/protocol/contracts/Sablier.sol Original can be found also deployed on https://etherscan.io/address/0xCD18eAa163733Da39c232722cBC4E8940b1D8888 Modifications: - Sablier \\\"pulls\\\" the funds from the creator of the stream at creation. In the Aave case, we already have the funds. - Anybody can create streams on Sablier. Here, only the funds admin (Aave governance via controller) can - Adapted codebase to Solidity 0.8.11, mainly removing SafeMath and CarefulMath to use native safe math - Same as with creation, on Sablier the `sender` and `recipient` can cancel a stream. Here, only fund admin and recipient\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/treasury/EcosystemReserveV2.sol\":\"EcosystemReserveV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x07fe55e38757b195c884a8ede60deb8a1f6a85cc607e4e112a8c0004a9ebd448\",\"license\":\"AGPL-3.0\"},\"contracts/periphery/treasury/AdminControlledEcosystemReserve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';\\r\\nimport {IAdminControlledEcosystemReserve} from './interfaces/IAdminControlledEcosystemReserve.sol';\\r\\nimport {VersionedInitializable} from './libs/VersionedInitializable.sol';\\r\\nimport {SafeERC20} from './libs/SafeERC20.sol';\\r\\nimport {ReentrancyGuard} from './libs/ReentrancyGuard.sol';\\r\\nimport {Address} from './libs/Address.sol';\\r\\n\\r\\n/**\\r\\n * @title AdminControlledEcosystemReserve\\r\\n * @notice Stores ERC20 tokens, and allows to dispose of them via approval or transfer dynamics\\r\\n * Adapted to be an implementation of a transparent proxy\\r\\n * @dev Done abstract to add an `initialize()` function on the child, with `initializer` modifier\\r\\n * @author BGD Labs\\r\\n **/\\r\\nabstract contract AdminControlledEcosystemReserve is\\r\\n  VersionedInitializable,\\r\\n  IAdminControlledEcosystemReserve\\r\\n{\\r\\n  using SafeERC20 for IERC20;\\r\\n  using Address for address payable;\\r\\n\\r\\n  address internal _fundsAdmin;\\r\\n\\r\\n  uint256 public constant REVISION = 1;\\r\\n\\r\\n  /// @inheritdoc IAdminControlledEcosystemReserve\\r\\n  address public constant ETH_MOCK_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n  modifier onlyFundsAdmin() {\\r\\n    require(msg.sender == _fundsAdmin, 'ONLY_BY_FUNDS_ADMIN');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function getRevision() internal pure override returns (uint256) {\\r\\n    return REVISION;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAdminControlledEcosystemReserve\\r\\n  function getFundsAdmin() external view returns (address) {\\r\\n    return _fundsAdmin;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAdminControlledEcosystemReserve\\r\\n  function approve(\\r\\n    IERC20 token,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external onlyFundsAdmin {\\r\\n    token.safeApprove(recipient, amount);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAdminControlledEcosystemReserve\\r\\n  function transfer(\\r\\n    IERC20 token,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external onlyFundsAdmin {\\r\\n    require(recipient != address(0), 'INVALID_0X_RECIPIENT');\\r\\n\\r\\n    if (address(token) == ETH_MOCK_ADDRESS) {\\r\\n      payable(recipient).sendValue(amount);\\r\\n    } else {\\r\\n      token.safeTransfer(recipient, amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev needed in order to receive ETH from the Aave v1 ecosystem reserve\\r\\n  receive() external payable {}\\r\\n\\r\\n  function _setFundsAdmin(address admin) internal {\\r\\n    _fundsAdmin = admin;\\r\\n    emit NewFundsAdmin(admin);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xd473f588ed469c7e37e96f86066bcceec384e649963761138c5b2f9231bbf51f\",\"license\":\"GPL-3.0\"},\"contracts/periphery/treasury/EcosystemReserveV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';\\r\\nimport {IStreamable} from './interfaces/IStreamable.sol';\\r\\nimport {AdminControlledEcosystemReserve} from './AdminControlledEcosystemReserve.sol';\\r\\nimport {ReentrancyGuard} from './libs/ReentrancyGuard.sol';\\r\\nimport {SafeERC20} from './libs/SafeERC20.sol';\\r\\n\\r\\n/**\\r\\n * @title AaveEcosystemReserve v2\\r\\n * @notice Stores ERC20 tokens of an ecosystem reserve, adding streaming capabilities.\\r\\n * Modification of Sablier https://github.com/sablierhq/sablier/blob/develop/packages/protocol/contracts/Sablier.sol\\r\\n * Original can be found also deployed on https://etherscan.io/address/0xCD18eAa163733Da39c232722cBC4E8940b1D8888\\r\\n * Modifications:\\r\\n * - Sablier \\\"pulls\\\" the funds from the creator of the stream at creation. In the Aave case, we already have the funds.\\r\\n * - Anybody can create streams on Sablier. Here, only the funds admin (Aave governance via controller) can\\r\\n * - Adapted codebase to Solidity 0.8.11, mainly removing SafeMath and CarefulMath to use native safe math\\r\\n * - Same as with creation, on Sablier the `sender` and `recipient` can cancel a stream. Here, only fund admin and recipient\\r\\n * @author BGD Labs\\r\\n **/\\r\\ncontract EcosystemReserveV2 is AdminControlledEcosystemReserve, ReentrancyGuard, IStreamable {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  /*** Storage Properties ***/\\r\\n\\r\\n  /**\\r\\n   * @notice Counter for new stream ids.\\r\\n   */\\r\\n  uint256 private _nextStreamId;\\r\\n\\r\\n  /**\\r\\n   * @notice The stream objects identifiable by their unsigned integer ids.\\r\\n   */\\r\\n  mapping(uint256 => Stream) private _streams;\\r\\n\\r\\n  /*** Modifiers ***/\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if the caller is not the funds admin of the recipient of the stream.\\r\\n   */\\r\\n  modifier onlyAdminOrRecipient(uint256 streamId) {\\r\\n    require(\\r\\n      msg.sender == _fundsAdmin || msg.sender == _streams[streamId].recipient,\\r\\n      'caller is not the funds admin or the recipient of the stream'\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if the provided id does not point to a valid stream.\\r\\n   */\\r\\n  modifier streamExists(uint256 streamId) {\\r\\n    require(_streams[streamId].isEntity, 'stream does not exist');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /*** Contract Logic Starts Here */\\r\\n\\r\\n  function initialize(address fundsAdmin) external initializer {\\r\\n    _nextStreamId = 100000;\\r\\n    _setFundsAdmin(fundsAdmin);\\r\\n  }\\r\\n\\r\\n  /*** View Functions ***/\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the next available stream id\\r\\n   * @notice Returns the stream id.\\r\\n   */\\r\\n  function getNextStreamId() external view returns (uint256) {\\r\\n    return _nextStreamId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the stream with all its properties.\\r\\n   * @dev Throws if the id does not point to a valid stream.\\r\\n   * @param streamId The id of the stream to query.\\r\\n   * @notice Returns the stream object.\\r\\n   */\\r\\n  function getStream(uint256 streamId)\\r\\n    external\\r\\n    view\\r\\n    streamExists(streamId)\\r\\n    returns (\\r\\n      address sender,\\r\\n      address recipient,\\r\\n      uint256 deposit,\\r\\n      address tokenAddress,\\r\\n      uint256 startTime,\\r\\n      uint256 stopTime,\\r\\n      uint256 remainingBalance,\\r\\n      uint256 ratePerSecond\\r\\n    )\\r\\n  {\\r\\n    sender = _streams[streamId].sender;\\r\\n    recipient = _streams[streamId].recipient;\\r\\n    deposit = _streams[streamId].deposit;\\r\\n    tokenAddress = _streams[streamId].tokenAddress;\\r\\n    startTime = _streams[streamId].startTime;\\r\\n    stopTime = _streams[streamId].stopTime;\\r\\n    remainingBalance = _streams[streamId].remainingBalance;\\r\\n    ratePerSecond = _streams[streamId].ratePerSecond;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns either the delta in seconds between `block.timestamp` and `startTime` or\\r\\n   *  between `stopTime` and `startTime, whichever is smaller. If `block.timestamp` is before\\r\\n   *  `startTime`, it returns 0.\\r\\n   * @dev Throws if the id does not point to a valid stream.\\r\\n   * @param streamId The id of the stream for which to query the delta.\\r\\n   * @notice Returns the time delta in seconds.\\r\\n   */\\r\\n  function deltaOf(uint256 streamId) public view streamExists(streamId) returns (uint256 delta) {\\r\\n    Stream memory stream = _streams[streamId];\\r\\n    if (block.timestamp <= stream.startTime) return 0;\\r\\n    if (block.timestamp < stream.stopTime) return block.timestamp - stream.startTime;\\r\\n    return stream.stopTime - stream.startTime;\\r\\n  }\\r\\n\\r\\n  struct BalanceOfLocalVars {\\r\\n    uint256 recipientBalance;\\r\\n    uint256 withdrawalAmount;\\r\\n    uint256 senderBalance;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the available funds for the given stream id and address.\\r\\n   * @dev Throws if the id does not point to a valid stream.\\r\\n   * @param streamId The id of the stream for which to query the balance.\\r\\n   * @param who The address for which to query the balance.\\r\\n   * @notice Returns the total funds allocated to `who` as uint256.\\r\\n   */\\r\\n  function balanceOf(uint256 streamId, address who)\\r\\n    public\\r\\n    view\\r\\n    streamExists(streamId)\\r\\n    returns (uint256 balance)\\r\\n  {\\r\\n    Stream memory stream = _streams[streamId];\\r\\n    BalanceOfLocalVars memory vars;\\r\\n\\r\\n    uint256 delta = deltaOf(streamId);\\r\\n    vars.recipientBalance = delta * stream.ratePerSecond;\\r\\n\\r\\n    /*\\r\\n     * If the stream `balance` does not equal `deposit`, it means there have been withdrawals.\\r\\n     * We have to subtract the total amount withdrawn from the amount of money that has been\\r\\n     * streamed until now.\\r\\n     */\\r\\n    if (stream.deposit > stream.remainingBalance) {\\r\\n      vars.withdrawalAmount = stream.deposit - stream.remainingBalance;\\r\\n      vars.recipientBalance = vars.recipientBalance - vars.withdrawalAmount;\\r\\n    }\\r\\n\\r\\n    if (who == stream.recipient) return vars.recipientBalance;\\r\\n    if (who == stream.sender) {\\r\\n      vars.senderBalance = stream.remainingBalance - vars.recipientBalance;\\r\\n      return vars.senderBalance;\\r\\n    }\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  /*** Public Effects & Interactions Functions ***/\\r\\n\\r\\n  struct CreateStreamLocalVars {\\r\\n    uint256 duration;\\r\\n    uint256 ratePerSecond;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Creates a new stream funded by this contracts itself and paid towards `recipient`.\\r\\n   * @dev Throws if the recipient is the zero address, the contract itself or the caller.\\r\\n   *  Throws if the deposit is 0.\\r\\n   *  Throws if the start time is before `block.timestamp`.\\r\\n   *  Throws if the stop time is before the start time.\\r\\n   *  Throws if the duration calculation has a math error.\\r\\n   *  Throws if the deposit is smaller than the duration.\\r\\n   *  Throws if the deposit is not a multiple of the duration.\\r\\n   *  Throws if the rate calculation has a math error.\\r\\n   *  Throws if the next stream id calculation has a math error.\\r\\n   *  Throws if the contract is not allowed to transfer enough tokens.\\r\\n   *  Throws if there is a token transfer failure.\\r\\n   * @param recipient The address towards which the money is streamed.\\r\\n   * @param deposit The amount of money to be streamed.\\r\\n   * @param tokenAddress The ERC20 token to use as streaming currency.\\r\\n   * @param startTime The unix timestamp for when the stream starts.\\r\\n   * @param stopTime The unix timestamp for when the stream stops.\\r\\n   * @notice Returns the uint256 id of the newly created stream.\\r\\n   */\\r\\n  function createStream(\\r\\n    address recipient,\\r\\n    uint256 deposit,\\r\\n    address tokenAddress,\\r\\n    uint256 startTime,\\r\\n    uint256 stopTime\\r\\n  ) external onlyFundsAdmin returns (uint256) {\\r\\n    require(recipient != address(0), 'stream to the zero address');\\r\\n    require(recipient != address(this), 'stream to the contract itself');\\r\\n    require(recipient != msg.sender, 'stream to the caller');\\r\\n    require(deposit > 0, 'deposit is zero');\\r\\n    require(startTime >= block.timestamp, 'start time before block.timestamp');\\r\\n    require(stopTime > startTime, 'stop time before the start time');\\r\\n\\r\\n    CreateStreamLocalVars memory vars;\\r\\n    vars.duration = stopTime - startTime;\\r\\n\\r\\n    /* Without this, the rate per second would be zero. */\\r\\n    require(deposit >= vars.duration, 'deposit smaller than time delta');\\r\\n\\r\\n    /* This condition avoids dealing with remainders */\\r\\n    require(deposit % vars.duration == 0, 'deposit not multiple of time delta');\\r\\n\\r\\n    vars.ratePerSecond = deposit / vars.duration;\\r\\n\\r\\n    /* Create and store the stream object. */\\r\\n    uint256 streamId = _nextStreamId;\\r\\n    _streams[streamId] = Stream({\\r\\n      remainingBalance: deposit,\\r\\n      deposit: deposit,\\r\\n      isEntity: true,\\r\\n      ratePerSecond: vars.ratePerSecond,\\r\\n      recipient: recipient,\\r\\n      sender: address(this),\\r\\n      startTime: startTime,\\r\\n      stopTime: stopTime,\\r\\n      tokenAddress: tokenAddress\\r\\n    });\\r\\n\\r\\n    /* Increment the next stream id. */\\r\\n    _nextStreamId++;\\r\\n\\r\\n    emit CreateStream(\\r\\n      streamId,\\r\\n      address(this),\\r\\n      recipient,\\r\\n      deposit,\\r\\n      tokenAddress,\\r\\n      startTime,\\r\\n      stopTime\\r\\n    );\\r\\n    return streamId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraws from the contract to the recipient's account.\\r\\n   * @dev Throws if the id does not point to a valid stream.\\r\\n   *  Throws if the caller is not the funds admin or the recipient of the stream.\\r\\n   *  Throws if the amount exceeds the available balance.\\r\\n   *  Throws if there is a token transfer failure.\\r\\n   * @param streamId The id of the stream to withdraw tokens from.\\r\\n   * @param amount The amount of tokens to withdraw.\\r\\n   */\\r\\n  function withdrawFromStream(uint256 streamId, uint256 amount)\\r\\n    external\\r\\n    nonReentrant\\r\\n    streamExists(streamId)\\r\\n    onlyAdminOrRecipient(streamId)\\r\\n    returns (bool)\\r\\n  {\\r\\n    require(amount > 0, 'amount is zero');\\r\\n    Stream memory stream = _streams[streamId];\\r\\n\\r\\n    uint256 balance = balanceOf(streamId, stream.recipient);\\r\\n    require(balance >= amount, 'amount exceeds the available balance');\\r\\n\\r\\n    _streams[streamId].remainingBalance = stream.remainingBalance - amount;\\r\\n\\r\\n    if (_streams[streamId].remainingBalance == 0) delete _streams[streamId];\\r\\n\\r\\n    IERC20(stream.tokenAddress).safeTransfer(stream.recipient, amount);\\r\\n    emit WithdrawFromStream(streamId, stream.recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Cancels the stream and transfers the tokens back on a pro rata basis.\\r\\n   * @dev Throws if the id does not point to a valid stream.\\r\\n   *  Throws if the caller is not the funds admin or the recipient of the stream.\\r\\n   *  Throws if there is a token transfer failure.\\r\\n   * @param streamId The id of the stream to cancel.\\r\\n   * @notice Returns bool true=success, otherwise false.\\r\\n   */\\r\\n  function cancelStream(uint256 streamId)\\r\\n    external\\r\\n    nonReentrant\\r\\n    streamExists(streamId)\\r\\n    onlyAdminOrRecipient(streamId)\\r\\n    returns (bool)\\r\\n  {\\r\\n    Stream memory stream = _streams[streamId];\\r\\n    uint256 senderBalance = balanceOf(streamId, stream.sender);\\r\\n    uint256 recipientBalance = balanceOf(streamId, stream.recipient);\\r\\n\\r\\n    delete _streams[streamId];\\r\\n\\r\\n    IERC20 token = IERC20(stream.tokenAddress);\\r\\n    if (recipientBalance > 0) token.safeTransfer(stream.recipient, recipientBalance);\\r\\n\\r\\n    emit CancelStream(streamId, stream.sender, stream.recipient, senderBalance, recipientBalance);\\r\\n    return true;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xbbb19fb4053d1475e6d027fd38e3de5a4e8cbef5ede6d3da1eaf5f9398d2af2b\",\"license\":\"GPL-3.0\"},\"contracts/periphery/treasury/interfaces/IAdminControlledEcosystemReserve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\r\\n\\r\\ninterface IAdminControlledEcosystemReserve {\\r\\n  /** @notice Emitted when the funds admin changes\\r\\n   * @param fundsAdmin The new funds admin\\r\\n   **/\\r\\n  event NewFundsAdmin(address indexed fundsAdmin);\\r\\n\\r\\n  /** @notice Returns the mock ETH reference address\\r\\n   * @return address The address\\r\\n   **/\\r\\n  function ETH_MOCK_ADDRESS() external pure returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Return the funds admin, only entity to be able to interact with this contract (controller of reserve)\\r\\n   * @return address The address of the funds admin\\r\\n   **/\\r\\n  function getFundsAdmin() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Function for the funds admin to give ERC20 allowance to other parties\\r\\n   * @param token The address of the token to give allowance from\\r\\n   * @param recipient Allowance's recipient\\r\\n   * @param amount Allowance to approve\\r\\n   **/\\r\\n  function approve(\\r\\n    IERC20 token,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Function for the funds admin to transfer ERC20 tokens to other parties\\r\\n   * @param token The address of the token to transfer\\r\\n   * @param recipient Transfer's recipient\\r\\n   * @param amount Amount to transfer\\r\\n   **/\\r\\n  function transfer(\\r\\n    IERC20 token,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa45d9a2520d9e8558b78394e3d19b56fbcc6459fd510401979a006de05002e3a\",\"license\":\"GPL-3.0\"},\"contracts/periphery/treasury/interfaces/IStreamable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IStreamable {\\r\\n  struct Stream {\\r\\n    uint256 deposit;\\r\\n    uint256 ratePerSecond;\\r\\n    uint256 remainingBalance;\\r\\n    uint256 startTime;\\r\\n    uint256 stopTime;\\r\\n    address recipient;\\r\\n    address sender;\\r\\n    address tokenAddress;\\r\\n    bool isEntity;\\r\\n  }\\r\\n\\r\\n  event CreateStream(\\r\\n    uint256 indexed streamId,\\r\\n    address indexed sender,\\r\\n    address indexed recipient,\\r\\n    uint256 deposit,\\r\\n    address tokenAddress,\\r\\n    uint256 startTime,\\r\\n    uint256 stopTime\\r\\n  );\\r\\n\\r\\n  event WithdrawFromStream(uint256 indexed streamId, address indexed recipient, uint256 amount);\\r\\n\\r\\n  event CancelStream(\\r\\n    uint256 indexed streamId,\\r\\n    address indexed sender,\\r\\n    address indexed recipient,\\r\\n    uint256 senderBalance,\\r\\n    uint256 recipientBalance\\r\\n  );\\r\\n\\r\\n  function balanceOf(uint256 streamId, address who) external view returns (uint256 balance);\\r\\n\\r\\n  function getStream(uint256 streamId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      address sender,\\r\\n      address recipient,\\r\\n      uint256 deposit,\\r\\n      address token,\\r\\n      uint256 startTime,\\r\\n      uint256 stopTime,\\r\\n      uint256 remainingBalance,\\r\\n      uint256 ratePerSecond\\r\\n    );\\r\\n\\r\\n  function createStream(\\r\\n    address recipient,\\r\\n    uint256 deposit,\\r\\n    address tokenAddress,\\r\\n    uint256 startTime,\\r\\n    uint256 stopTime\\r\\n  ) external returns (uint256 streamId);\\r\\n\\r\\n  function withdrawFromStream(uint256 streamId, uint256 funds) external returns (bool);\\r\\n\\r\\n  function cancelStream(uint256 streamId) external returns (bool);\\r\\n\\r\\n  function initialize(address fundsAdmin) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4f783555934ac26bb92326e643953ac16d65f8826c1227ce70a77328ce7bd3b6\",\"license\":\"MIT\"},\"contracts/periphery/treasury/libs/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n   *\\r\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n   * constructor.\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize/address.code.length, which returns 0\\r\\n    // for contracts in construction, since the code is only stored at the end\\r\\n    // of the constructor execution.\\r\\n\\r\\n    return account.code.length > 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\r\\n\\r\\n    (bool success, ) = recipient.call{value: amount}('');\\r\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a Solidity function call using a low level `call`. A\\r\\n   * plain `call` is an unsafe replacement for a function call: use this\\r\\n   * function instead.\\r\\n   *\\r\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n   * function (like regular Solidity function calls).\\r\\n   *\\r\\n   * Returns the raw returned data. To convert to the expected return value,\\r\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `target` must be a contract.\\r\\n   * - calling `target` with `data` must not revert.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionCall(target, data, 'Address: low-level call failed');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but also transferring `value` wei to `target`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the calling contract must have an ETH balance of at least `value`.\\r\\n   * - the called Solidity function must be `payable`.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(address(this).balance >= value, 'Address: insufficient balance for call');\\r\\n    require(isContract(target), 'Address: call to non-contract');\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(address target, bytes memory data)\\r\\n    internal\\r\\n    view\\r\\n    returns (bytes memory)\\r\\n  {\\r\\n    return functionStaticCall(target, data, 'Address: low-level static call failed');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    require(isContract(target), 'Address: static call to non-contract');\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionDelegateCall(target, data, 'Address: low-level delegate call failed');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(isContract(target), 'Address: delegate call to non-contract');\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n   * revert reason using the provided one.\\r\\n   *\\r\\n   * _Available since v4.3._\\r\\n   */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x012ac981706c0f7d3f34e556aa6f9c353f17635ba31fb537948616ba8f33ed2c\",\"license\":\"MIT\"},\"contracts/periphery/treasury/libs/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n  // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n  // word because each write operation emits an extra SLOAD to first read the\\r\\n  // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n  // back. This is the compiler's defense against contract upgrades and\\r\\n  // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n  // The values being non-zero value makes deployment a bit more expensive,\\r\\n  // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n  // amount. Since refunds are capped to a percentage of the total\\r\\n  // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n  // increase the likelihood of the full refund coming into effect.\\r\\n  uint256 private constant _NOT_ENTERED = 1;\\r\\n  uint256 private constant _ENTERED = 2;\\r\\n\\r\\n  uint256 private _status;\\r\\n\\r\\n  constructor() {\\r\\n    _status = _NOT_ENTERED;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n   * function is not supported. It is possible to prevent this from happening\\r\\n   * by making the `nonReentrant` function external, and making it call a\\r\\n   * `private` function that does the actual work.\\r\\n   */\\r\\n  modifier nonReentrant() {\\r\\n    // On the first call to nonReentrant, _notEntered will be true\\r\\n    require(_status != _ENTERED, 'ReentrancyGuard: reentrant call');\\r\\n\\r\\n    // Any calls to nonReentrant after this point will fail\\r\\n    _status = _ENTERED;\\r\\n\\r\\n    _;\\r\\n\\r\\n    // By storing the original value once again, a refund is triggered (see\\r\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n    _status = _NOT_ENTERED;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xb3fe85f81b73c576b4bcde7ad54f53d7f9c1b552d2c227581b343f1dad17f522\",\"license\":\"MIT\"},\"contracts/periphery/treasury/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\r\\nimport {Address} from './Address.sol';\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n  using Address for address;\\r\\n\\r\\n  function safeTransfer(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    IERC20 token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(\\r\\n      token,\\r\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Deprecated. This function has issues similar to the ones found in\\r\\n   * {IERC20-approve}, and its usage is discouraged.\\r\\n   *\\r\\n   * Whenever possible, use {safeIncreaseAllowance} and\\r\\n   * {safeDecreaseAllowance} instead.\\r\\n   */\\r\\n  function safeApprove(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    // safeApprove should only be called when setting an initial allowance,\\r\\n    // or when resetting it to zero. To increase and decrease it, use\\r\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n    require(\\r\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\r\\n    );\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n    _callOptionalReturn(\\r\\n      token,\\r\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function safeDecreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    unchecked {\\r\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n      require(oldAllowance >= value, 'SafeERC20: decreased allowance below zero');\\r\\n      uint256 newAllowance = oldAllowance - value;\\r\\n      _callOptionalReturn(\\r\\n        token,\\r\\n        abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n   * @param token The token targeted by the call.\\r\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n   */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(data, 'SafeERC20: low-level call failed');\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xb8105bbf5a7756b541590300f76a88480b606c9920534533a85713b28140bb8d\",\"license\":\"MIT\"},\"contracts/periphery/treasury/libs/VersionedInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @title VersionedInitializable\\r\\n *\\r\\n * @dev Helper contract to support initializer functions. To use it, replace\\r\\n * the constructor with a function that has the `initializer` modifier.\\r\\n * WARNING: Unlike constructors, initializer functions must be manually\\r\\n * invoked. This applies both to deploying an Initializable contract, as well\\r\\n * as extending an Initializable contract via inheritance.\\r\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\r\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\r\\n * because this is not dealt with automatically as with constructors.\\r\\n *\\r\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\r\\n */\\r\\nabstract contract VersionedInitializable {\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  uint256 internal lastInitializedRevision = 0;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to use in the initializer function of a contract.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    uint256 revision = getRevision();\\r\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\r\\n\\r\\n    lastInitializedRevision = revision;\\r\\n\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @dev returns the revision number of the contract.\\r\\n  /// Needs to be defined in the inherited class as a constant.\\r\\n  function getRevision() internal pure virtual returns (uint256);\\r\\n\\r\\n  // Reserved storage space to allow for layout changes in the future.\\r\\n  uint256[50] private ______gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x2a309d06d4ecbca926f68445dd5aeea59d43cb4c46ee194efcf2f63cf3e4ea58\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "BGD Labs*",
    "events": {
      "NewFundsAdmin(address)": {
        "params": {
          "fundsAdmin": "The new funds admin*"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,address,uint256)": {
        "details": "Function for the funds admin to give ERC20 allowance to other parties",
        "params": {
          "amount": "Allowance to approve*",
          "recipient": "Allowance's recipient",
          "token": "The address of the token to give allowance from"
        }
      },
      "balanceOf(uint256,address)": {
        "details": "Throws if the id does not point to a valid stream.",
        "params": {
          "streamId": "The id of the stream for which to query the balance.",
          "who": "The address for which to query the balance."
        }
      },
      "cancelStream(uint256)": {
        "details": "Throws if the id does not point to a valid stream.  Throws if the caller is not the funds admin or the recipient of the stream.  Throws if there is a token transfer failure.",
        "params": {
          "streamId": "The id of the stream to cancel."
        }
      },
      "createStream(address,uint256,address,uint256,uint256)": {
        "details": "Throws if the recipient is the zero address, the contract itself or the caller.  Throws if the deposit is 0.  Throws if the start time is before `block.timestamp`.  Throws if the stop time is before the start time.  Throws if the duration calculation has a math error.  Throws if the deposit is smaller than the duration.  Throws if the deposit is not a multiple of the duration.  Throws if the rate calculation has a math error.  Throws if the next stream id calculation has a math error.  Throws if the contract is not allowed to transfer enough tokens.  Throws if there is a token transfer failure.",
        "params": {
          "deposit": "The amount of money to be streamed.",
          "recipient": "The address towards which the money is streamed.",
          "startTime": "The unix timestamp for when the stream starts.",
          "stopTime": "The unix timestamp for when the stream stops.",
          "tokenAddress": "The ERC20 token to use as streaming currency."
        }
      },
      "deltaOf(uint256)": {
        "details": "Throws if the id does not point to a valid stream.",
        "params": {
          "streamId": "The id of the stream for which to query the delta."
        }
      },
      "getFundsAdmin()": {
        "returns": {
          "_0": "address The address of the funds admin*"
        }
      },
      "getStream(uint256)": {
        "details": "Throws if the id does not point to a valid stream.",
        "params": {
          "streamId": "The id of the stream to query."
        }
      },
      "transfer(address,address,uint256)": {
        "params": {
          "amount": "Amount to transfer*",
          "recipient": "Transfer's recipient",
          "token": "The address of the token to transfer"
        }
      },
      "withdrawFromStream(uint256,uint256)": {
        "details": "Throws if the id does not point to a valid stream.  Throws if the caller is not the funds admin or the recipient of the stream.  Throws if the amount exceeds the available balance.  Throws if there is a token transfer failure.",
        "params": {
          "amount": "The amount of tokens to withdraw.",
          "streamId": "The id of the stream to withdraw tokens from."
        }
      }
    },
    "title": "AaveEcosystemReserve v2",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewFundsAdmin(address)": {
        "notice": "Emitted when the funds admin changes"
      }
    },
    "kind": "user",
    "methods": {
      "ETH_MOCK_ADDRESS()": {
        "notice": "Returns the mock ETH reference address"
      },
      "balanceOf(uint256,address)": {
        "notice": "Returns the available funds for the given stream id and address.Returns the total funds allocated to `who` as uint256."
      },
      "cancelStream(uint256)": {
        "notice": "Cancels the stream and transfers the tokens back on a pro rata basis.Returns bool true=success, otherwise false."
      },
      "createStream(address,uint256,address,uint256,uint256)": {
        "notice": "Creates a new stream funded by this contracts itself and paid towards `recipient`.Returns the uint256 id of the newly created stream."
      },
      "deltaOf(uint256)": {
        "notice": "Returns either the delta in seconds between `block.timestamp` and `startTime` or  between `stopTime` and `startTime, whichever is smaller. If `block.timestamp` is before  `startTime`, it returns 0.Returns the time delta in seconds."
      },
      "getFundsAdmin()": {
        "notice": "Return the funds admin, only entity to be able to interact with this contract (controller of reserve)"
      },
      "getNextStreamId()": {
        "notice": "Returns the next available stream idReturns the stream id."
      },
      "getStream(uint256)": {
        "notice": "Returns the stream with all its properties.Returns the stream object."
      },
      "transfer(address,address,uint256)": {
        "notice": "Function for the funds admin to transfer ERC20 tokens to other parties"
      },
      "withdrawFromStream(uint256,uint256)": {
        "notice": "Withdraws from the contract to the recipient's account."
      }
    },
    "notice": "Stores ERC20 tokens of an ecosystem reserve, adding streaming capabilities. Modification of Sablier https://github.com/sablierhq/sablier/blob/develop/packages/protocol/contracts/Sablier.sol Original can be found also deployed on https://etherscan.io/address/0xCD18eAa163733Da39c232722cBC4E8940b1D8888 Modifications: - Sablier \"pulls\" the funds from the creator of the stream at creation. In the Aave case, we already have the funds. - Anybody can create streams on Sablier. Here, only the funds admin (Aave governance via controller) can - Adapted codebase to Solidity 0.8.11, mainly removing SafeMath and CarefulMath to use native safe math - Same as with creation, on Sablier the `sender` and `recipient` can cancel a stream. Here, only fund admin and recipient",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23771,
        "contract": "contracts/periphery/treasury/EcosystemReserveV2.sol:EcosystemReserveV2",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 23802,
        "contract": "contracts/periphery/treasury/EcosystemReserveV2.sol:EcosystemReserveV2",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 21775,
        "contract": "contracts/periphery/treasury/EcosystemReserveV2.sol:EcosystemReserveV2",
        "label": "_fundsAdmin",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 23509,
        "contract": "contracts/periphery/treasury/EcosystemReserveV2.sol:EcosystemReserveV2",
        "label": "_status",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 22291,
        "contract": "contracts/periphery/treasury/EcosystemReserveV2.sol:EcosystemReserveV2",
        "label": "_nextStreamId",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 22297,
        "contract": "contracts/periphery/treasury/EcosystemReserveV2.sol:EcosystemReserveV2",
        "label": "_streams",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint256,t_struct(Stream)23100_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Stream)23100_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IStreamable.Stream)",
        "numberOfBytes": "32",
        "value": "t_struct(Stream)23100_storage"
      },
      "t_struct(Stream)23100_storage": {
        "encoding": "inplace",
        "label": "struct IStreamable.Stream",
        "members": [
          {
            "astId": 23083,
            "contract": "contracts/periphery/treasury/EcosystemReserveV2.sol:EcosystemReserveV2",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23085,
            "contract": "contracts/periphery/treasury/EcosystemReserveV2.sol:EcosystemReserveV2",
            "label": "ratePerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23087,
            "contract": "contracts/periphery/treasury/EcosystemReserveV2.sol:EcosystemReserveV2",
            "label": "remainingBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 23089,
            "contract": "contracts/periphery/treasury/EcosystemReserveV2.sol:EcosystemReserveV2",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 23091,
            "contract": "contracts/periphery/treasury/EcosystemReserveV2.sol:EcosystemReserveV2",
            "label": "stopTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 23093,
            "contract": "contracts/periphery/treasury/EcosystemReserveV2.sol:EcosystemReserveV2",
            "label": "recipient",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 23095,
            "contract": "contracts/periphery/treasury/EcosystemReserveV2.sol:EcosystemReserveV2",
            "label": "sender",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 23097,
            "contract": "contracts/periphery/treasury/EcosystemReserveV2.sol:EcosystemReserveV2",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 23099,
            "contract": "contracts/periphery/treasury/EcosystemReserveV2.sol:EcosystemReserveV2",
            "label": "isEntity",
            "offset": 20,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
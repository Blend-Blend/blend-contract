{
  "address": "0x5f3f1dBD7B74C6B46e8c44f98792A1dAf8d69154",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "BalanceTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceIncrease",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "incentivesController",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "bTokenDecimals",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "bTokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "bTokenSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceIncrease",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BTOKEN_REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712_REVISION",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESERVE_TREASURY_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNDERLYING_ASSET_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiverOfUnderlying",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIncentivesController",
      "outputs": [
        {
          "internalType": "contract IIncentivesController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPreviousIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getScaledUserBalanceAndSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "handleRepayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "initializingPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        },
        {
          "internalType": "contract IIncentivesController",
          "name": "incentivesController",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "bTokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "bTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "bTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "mintToTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "scaledBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scaledTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IIncentivesController",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "setIncentivesController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferOnLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferUnderlyingTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf6975236de0e23dbfff8f7e430b44f3b9e6367bdcc3cea17d2993b8f23130a09",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5f3f1dBD7B74C6B46e8c44f98792A1dAf8d69154",
    "transactionIndex": 0,
    "gasUsed": "2365316",
    "logsBloom": "0x
    "blockHash": "0x47860af28fa9784295ada635e3971b258f08081dbe37cc48f1112e2e4f18b4b0",
    "transactionHash": "0xf6975236de0e23dbfff8f7e430b44f3b9e6367bdcc3cea17d2993b8f23130a09",
    "logs": [],
    "blockNumber": 52,
    "cumulativeGasUsed": "2365316",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x212fdfCfCC22db97DeB3AC3260414909282BB4EE"
  ],
  "numDeployments": 1,
  "solcInputHash": "c351ce62b62f76bd5a8479a8f9cf6c24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"BalanceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"bTokenDecimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"bTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"bTokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BTOKEN_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_REVISION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_TREASURY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverOfUnderlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentivesController\",\"outputs\":[{\"internalType\":\"contract IIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPreviousIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getScaledUserBalanceAndSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"handleRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"initializingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"contract IIncentivesController\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"bTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"bTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mintToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"scaledBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaledTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIncentivesController\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setIncentivesController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferOnLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUnderlyingTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"BalanceTransfer(address,address,uint256,uint256)\":{\"details\":\"Emitted during the transfer action\",\"params\":{\"from\":\"The user whose tokens are being transferred\",\"index\":\"The next liquidity index of the reserve\",\"to\":\"The recipient\",\"value\":\"The scaled amount being transferred\"}},\"Burn(address,address,uint256,uint256,uint256)\":{\"details\":\"Emitted after the burn actionIf the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\",\"params\":{\"balanceIncrease\":\"The increase in scaled-up balance since the last action of 'from'\",\"from\":\"The address from which the tokens will be burned\",\"index\":\"The next liquidity index of the reserve\",\"target\":\"The address that will receive the underlying, if any\",\"value\":\"The scaled-up amount being burned (user entered amount - balance increase from interest)\"}},\"Initialized(address,address,address,address,uint8,string,string,bytes)\":{\"details\":\"Emitted when an bToken is initialized\",\"params\":{\"bTokenDecimals\":\"The decimals of the underlying\",\"bTokenName\":\"The name of the bToken\",\"bTokenSymbol\":\"The symbol of the bToken\",\"incentivesController\":\"The address of the incentives controller for this bToken\",\"params\":\"A set of encoded parameters for additional initialization\",\"pool\":\"The address of the associated pool\",\"treasury\":\"The address of the treasury\",\"underlyingAsset\":\"The address of the underlying asset\"}},\"Mint(address,address,uint256,uint256,uint256)\":{\"details\":\"Emitted after the mint action\",\"params\":{\"balanceIncrease\":\"The increase in scaled-up balance since the last action of 'onBehalfOf'\",\"caller\":\"The address performing the mint\",\"index\":\"The next liquidity index of the reserve\",\"onBehalfOf\":\"The address of the user that will receive the minted tokens\",\"value\":\"The scaled-up amount being minted (based on user entered amount and balance increase from interest)\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Overrides the base function to fully implement IBTokensee `EIP712Base.DOMAIN_SEPARATOR()` for more detailed documentation\"},\"RESERVE_TREASURY_ADDRESS()\":{\"returns\":{\"_0\":\"Address of the Aave treasury\"}},\"UNDERLYING_ASSET_ADDRESS()\":{\"returns\":{\"_0\":\"The address of the underlying asset\"}},\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"burn(address,address,uint256,uint256)\":{\"details\":\"In some instances, the mint event could be emitted from a burn transaction if the amount to burn is less than the interest that the user accrued\",\"params\":{\"amount\":\"The amount being burned\",\"from\":\"The address from which the bTokens will be burned\",\"index\":\"The next liquidity index of the reserve\",\"receiverOfUnderlying\":\"The address that will receive the underlying\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"pool\":\"The address of the Pool contract\"}},\"decreaseAllowance(address,uint256)\":{\"params\":{\"spender\":\"The user allowed to spend on behalf of _msgSender()\",\"subtractedValue\":\"The amount being subtracted to the allowance\"},\"returns\":{\"_0\":\"`true`\"}},\"getIncentivesController()\":{\"returns\":{\"_0\":\"The address of the Incentives Controller\"}},\"getPreviousIndex(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The last index interest was accrued to the user's balance, expressed in ray\"}},\"getScaledUserBalanceAndSupply(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The scaled balance of the user\",\"_1\":\"The scaled total supply\"}},\"handleRepayment(address,address,uint256)\":{\"details\":\"The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the transfer is concluded. However in the future there may be bTokens that allow for example to stake the underlying to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\",\"params\":{\"amount\":\"The amount getting repaid\",\"onBehalfOf\":\"The address of the user who will get his debt reduced/removed\",\"user\":\"The user executing the repayment\"}},\"increaseAllowance(address,uint256)\":{\"params\":{\"addedValue\":\"The amount being added to the allowance\",\"spender\":\"The user allowed to spend on behalf of _msgSender()\"},\"returns\":{\"_0\":\"`true`\"}},\"initialize(address,address,address,address,uint8,string,string,bytes)\":{\"params\":{\"bTokenDecimals\":\"The decimals of the bToken, same as the underlying asset's\",\"bTokenName\":\"The name of the bToken\",\"bTokenSymbol\":\"The symbol of the bToken\",\"incentivesController\":\"The smart contract managing potential incentives distribution\",\"params\":\"A set of encoded parameters for additional initialization\",\"pool\":\"The pool contract that is initializing this contract\",\"treasury\":\"The address of the Aave treasury, receiving the fees on this bToken\",\"underlyingAsset\":\"The address of the underlying asset of this bToken (E.g. WETH for aWETH)\"}},\"mint(address,address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens getting minted\",\"caller\":\"The address performing the mint\",\"index\":\"The next liquidity index of the reserve\",\"onBehalfOf\":\"The address of the user that will receive the minted bTokens\"},\"returns\":{\"_0\":\"`true` if the the previous balance of the user was 0\"}},\"mintToTreasury(uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens getting minted\",\"index\":\"The next liquidity index of the reserve\"}},\"nonces(address)\":{\"details\":\"Overrides the base function to fully implement IBTokensee `EIP712Base.nonces()` for more detailed documentation\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\",\"params\":{\"deadline\":\"The deadline timestamp, type(uint256).max for max deadline\",\"owner\":\"The owner of the funds\",\"r\":\"Signature param\",\"s\":\"Signature param\",\"spender\":\"The spender\",\"v\":\"Signature param\",\"value\":\"The amount\"}},\"rescueTokens(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of token to transfer\",\"to\":\"The address of the recipient\",\"token\":\"The address of the token\"}},\"scaledBalanceOf(address)\":{\"details\":\"The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index at the moment of the update\",\"params\":{\"user\":\"The user whose balance is calculated\"},\"returns\":{\"_0\":\"The scaled balance of the user\"}},\"scaledTotalSupply()\":{\"returns\":{\"_0\":\"The scaled total supply\"}},\"setIncentivesController(address)\":{\"params\":{\"controller\":\"the new Incentives controller\"}},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferOnLiquidation(address,address,uint256)\":{\"params\":{\"from\":\"The address getting liquidated, current owner of the bTokens\",\"to\":\"The recipient\",\"value\":\"The amount of tokens getting transferred\"}},\"transferUnderlyingTo(address,uint256)\":{\"details\":\"Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\",\"params\":{\"amount\":\"The amount getting transferred\",\"target\":\"The recipient of the underlying\"}}},\"title\":\"Aave ERC20 BToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"RESERVE_TREASURY_ADDRESS()\":{\"notice\":\"Returns the address of the Aave treasury, receiving the fees on this bToken.\"},\"UNDERLYING_ASSET_ADDRESS()\":{\"notice\":\"Returns the address of the underlying asset of this bToken (E.g. WETH for aWETH)\"},\"burn(address,address,uint256,uint256)\":{\"notice\":\"Burns bTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decreases the allowance of spender to spend _msgSender() tokens\"},\"getIncentivesController()\":{\"notice\":\"Returns the address of the Incentives Controller contract\"},\"getPreviousIndex(address)\":{\"notice\":\"Returns last index interest was accrued to the user's balance\"},\"getScaledUserBalanceAndSupply(address)\":{\"notice\":\"Returns the scaled balance of the user and the scaled total supply.\"},\"handleRepayment(address,address,uint256)\":{\"notice\":\"Handles the underlying received by the bToken after the transfer has been completed.\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increases the allowance of spender to spend _msgSender() tokens\"},\"initialize(address,address,address,address,uint8,string,string,bytes)\":{\"notice\":\"Initializes the bToken\"},\"mint(address,address,uint256,uint256)\":{\"notice\":\"Mints `amount` bTokens to `user`\"},\"mintToTreasury(uint256,uint256)\":{\"notice\":\"Mints bTokens to the reserve treasury\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Allow passing a signed message to approve spending\"},\"rescueTokens(address,address,uint256)\":{\"notice\":\"Rescue and transfer tokens locked in this contract\"},\"scaledBalanceOf(address)\":{\"notice\":\"Returns the scaled balance of the user.\"},\"scaledTotalSupply()\":{\"notice\":\"Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\"},\"setIncentivesController(address)\":{\"notice\":\"Sets a new Incentives Controller\"},\"transferOnLiquidation(address,address,uint256)\":{\"notice\":\"Transfers bTokens in the event of a borrow being liquidated, in case the liquidators reclaims the bToken\"},\"transferUnderlyingTo(address,uint256)\":{\"notice\":\"Transfers the underlying asset to `target`.\"}},\"notice\":\"Implementation of the interest bearing token for the Aave protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/tokenization/BToken.sol\":\"BToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/gnosis/contracts/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC20} from '../../openzeppelin/contracts/IERC20.sol';\\r\\n\\r\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\r\\n/// @author Gnosis Developers\\r\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\r\\nlibrary GPv2SafeERC20 {\\r\\n  /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\r\\n  /// also when the token returns `false`.\\r\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n    bytes4 selector_ = token.transfer.selector;\\r\\n\\r\\n    // solhint-disable-next-line no-inline-assembly\\r\\n    assembly {\\r\\n      let freeMemoryPointer := mload(0x40)\\r\\n      mstore(freeMemoryPointer, selector_)\\r\\n      mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\r\\n      mstore(add(freeMemoryPointer, 36), value)\\r\\n\\r\\n      if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\r\\n        returndatacopy(0, 0, returndatasize())\\r\\n        revert(0, returndatasize())\\r\\n      }\\r\\n    }\\r\\n\\r\\n    require(getLastTransferResult(token), 'GPv2: failed transfer');\\r\\n  }\\r\\n\\r\\n  /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\r\\n  /// reverts also when the token returns `false`.\\r\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n    bytes4 selector_ = token.transferFrom.selector;\\r\\n\\r\\n    // solhint-disable-next-line no-inline-assembly\\r\\n    assembly {\\r\\n      let freeMemoryPointer := mload(0x40)\\r\\n      mstore(freeMemoryPointer, selector_)\\r\\n      mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\\r\\n      mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\r\\n      mstore(add(freeMemoryPointer, 68), value)\\r\\n\\r\\n      if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\r\\n        returndatacopy(0, 0, returndatasize())\\r\\n        revert(0, returndatasize())\\r\\n      }\\r\\n    }\\r\\n\\r\\n    require(getLastTransferResult(token), 'GPv2: failed transferFrom');\\r\\n  }\\r\\n\\r\\n  /// @dev Verifies that the last return was a successful `transfer*` call.\\r\\n  /// This is done by checking that the return data is either empty, or\\r\\n  /// is a valid ABI encoded boolean.\\r\\n  function getLastTransferResult(IERC20 token) private view returns (bool success) {\\r\\n    // NOTE: Inspecting previous return data requires assembly. Note that\\r\\n    // we write the return data to memory 0 in the case where the return\\r\\n    // data size is 32, this is OK since the first 64 bytes of memory are\\r\\n    // reserved by Solidy as a scratch space that can be used within\\r\\n    // assembly blocks.\\r\\n    // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\r\\n    // solhint-disable-next-line no-inline-assembly\\r\\n    assembly {\\r\\n      /// @dev Revert with an ABI encoded Solidity error with a message\\r\\n      /// that fits into 32-bytes.\\r\\n      ///\\r\\n      /// An ABI encoded Solidity error has the following memory layout:\\r\\n      ///\\r\\n      /// ------------+----------------------------------\\r\\n      ///  byte range | value\\r\\n      /// ------------+----------------------------------\\r\\n      ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\r\\n      ///  0x04..0x24 |      string offset (always 0x20)\\r\\n      ///  0x24..0x44 |                    string length\\r\\n      ///  0x44..0x64 | string value, padded to 32-bytes\\r\\n      function revertWithMessage(length, message) {\\r\\n        mstore(0x00, '\\\\x08\\\\xc3\\\\x79\\\\xa0')\\r\\n        mstore(0x04, 0x20)\\r\\n        mstore(0x24, length)\\r\\n        mstore(0x44, message)\\r\\n        revert(0x00, 0x64)\\r\\n      }\\r\\n\\r\\n      switch returndatasize()\\r\\n      // Non-standard ERC20 transfer without return.\\r\\n      case 0 {\\r\\n        // NOTE: When the return data size is 0, verify that there\\r\\n        // is code at the address. This is done in order to maintain\\r\\n        // compatibility with Solidity calling conventions.\\r\\n        // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\r\\n        if iszero(extcodesize(token)) {\\r\\n          revertWithMessage(20, 'GPv2: not a contract')\\r\\n        }\\r\\n\\r\\n        success := 1\\r\\n      }\\r\\n      // Standard ERC20 transfer returning boolean success value.\\r\\n      case 32 {\\r\\n        returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n        // NOTE: For ABI encoding v1, any non-zero value is accepted\\r\\n        // as `true` for a boolean. In order to stay compatible with\\r\\n        // OpenZeppelin's `SafeERC20` library which is known to work\\r\\n        // with the existing ERC20 implementation we care about,\\r\\n        // make sure we return success for any non-zero return value\\r\\n        // from the `transfer*` call.\\r\\n        success := iszero(iszero(mload(0)))\\r\\n      }\\r\\n      default {\\r\\n        revertWithMessage(31, 'GPv2: malformed transfer result')\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xd47a42766ec7a2d6413451a0b6fdb2feabacb0fe38f1b0a6bdb1b968d650266a\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n  function _msgSender() internal view virtual returns (address payable) {\\r\\n    return payable(msg.sender);\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view virtual returns (bytes memory) {\\r\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n    return msg.data;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x58e76abc9cac3909e67c990d0b1f781a845cd294c0fc91a5b3b000510e2043bf\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x07fe55e38757b195c884a8ede60deb8a1f6a85cc607e4e112a8c0004a9ebd448\",\"license\":\"AGPL-3.0\"},\"contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC20} from './IERC20.sol';\\r\\n\\r\\ninterface IERC20Detailed is IERC20 {\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x8fa3eef49754f897adaf2d2b578e494ce342992e255283f0327d049573f3cfb4\",\"license\":\"AGPL-3.0\"},\"contracts/dependencies/openzeppelin/contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\r\\n * easily result in undesired exploitation or bugs, since developers usually\\r\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\r\\n * reverting the transaction when such an operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n *\\r\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\r\\n * all math on `uint256` and `int256` and then downcasting.\\r\\n */\\r\\nlibrary SafeCast {\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint224 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint224).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint224` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 224 bits\\r\\n   */\\r\\n  function toUint224(uint256 value) internal pure returns (uint224) {\\r\\n    require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\r\\n    return uint224(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint128 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint128).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint128` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 128 bits\\r\\n   */\\r\\n  function toUint128(uint256 value) internal pure returns (uint128) {\\r\\n    require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\r\\n    return uint128(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint96 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint96).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint96` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 96 bits\\r\\n   */\\r\\n  function toUint96(uint256 value) internal pure returns (uint96) {\\r\\n    require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\r\\n    return uint96(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint64 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint64).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint64` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 64 bits\\r\\n   */\\r\\n  function toUint64(uint256 value) internal pure returns (uint64) {\\r\\n    require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\r\\n    return uint64(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint32 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint32).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint32` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 32 bits\\r\\n   */\\r\\n  function toUint32(uint256 value) internal pure returns (uint32) {\\r\\n    require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\r\\n    return uint32(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint16 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint16).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint16` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 16 bits\\r\\n   */\\r\\n  function toUint16(uint256 value) internal pure returns (uint16) {\\r\\n    require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\r\\n    return uint16(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint8 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint8).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint8` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 8 bits.\\r\\n   */\\r\\n  function toUint8(uint256 value) internal pure returns (uint8) {\\r\\n    require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\r\\n    return uint8(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a signed int256 into an unsigned uint256.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must be greater than or equal to 0.\\r\\n   */\\r\\n  function toUint256(int256 value) internal pure returns (uint256) {\\r\\n    require(value >= 0, 'SafeCast: value must be positive');\\r\\n    return uint256(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted int128 from int256, reverting on\\r\\n   * overflow (when the input is less than smallest int128 or\\r\\n   * greater than largest int128).\\r\\n   *\\r\\n   * Counterpart to Solidity's `int128` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 128 bits\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function toInt128(int256 value) internal pure returns (int128) {\\r\\n    require(\\r\\n      value >= type(int128).min && value <= type(int128).max,\\r\\n      \\\"SafeCast: value doesn't fit in 128 bits\\\"\\r\\n    );\\r\\n    return int128(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted int64 from int256, reverting on\\r\\n   * overflow (when the input is less than smallest int64 or\\r\\n   * greater than largest int64).\\r\\n   *\\r\\n   * Counterpart to Solidity's `int64` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 64 bits\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function toInt64(int256 value) internal pure returns (int64) {\\r\\n    require(\\r\\n      value >= type(int64).min && value <= type(int64).max,\\r\\n      \\\"SafeCast: value doesn't fit in 64 bits\\\"\\r\\n    );\\r\\n    return int64(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted int32 from int256, reverting on\\r\\n   * overflow (when the input is less than smallest int32 or\\r\\n   * greater than largest int32).\\r\\n   *\\r\\n   * Counterpart to Solidity's `int32` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 32 bits\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function toInt32(int256 value) internal pure returns (int32) {\\r\\n    require(\\r\\n      value >= type(int32).min && value <= type(int32).max,\\r\\n      \\\"SafeCast: value doesn't fit in 32 bits\\\"\\r\\n    );\\r\\n    return int32(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted int16 from int256, reverting on\\r\\n   * overflow (when the input is less than smallest int16 or\\r\\n   * greater than largest int16).\\r\\n   *\\r\\n   * Counterpart to Solidity's `int16` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 16 bits\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function toInt16(int256 value) internal pure returns (int16) {\\r\\n    require(\\r\\n      value >= type(int16).min && value <= type(int16).max,\\r\\n      \\\"SafeCast: value doesn't fit in 16 bits\\\"\\r\\n    );\\r\\n    return int16(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted int8 from int256, reverting on\\r\\n   * overflow (when the input is less than smallest int8 or\\r\\n   * greater than largest int8).\\r\\n   *\\r\\n   * Counterpart to Solidity's `int8` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 8 bits.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function toInt8(int256 value) internal pure returns (int8) {\\r\\n    require(\\r\\n      value >= type(int8).min && value <= type(int8).max,\\r\\n      \\\"SafeCast: value doesn't fit in 8 bits\\\"\\r\\n    );\\r\\n    return int8(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts an unsigned uint256 into a signed int256.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must be less than or equal to maxInt256.\\r\\n   */\\r\\n  function toInt256(uint256 value) internal pure returns (int256) {\\r\\n    // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\r\\n    require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\r\\n    return int256(value);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x9dc85595ff727e421497d6507db33360a47adf75fb17eee51680c4e60e4b0447\",\"license\":\"MIT\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\r\\n\\r\\n/**\\r\\n * @title IACLManager\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for the ACL Manager\\r\\n */\\r\\ninterface IACLManager {\\r\\n  /**\\r\\n   * @notice Returns the contract address of the PoolAddressesProvider\\r\\n   * @return The address of the PoolAddressesProvider\\r\\n   */\\r\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the identifier of the PoolAdmin role\\r\\n   * @return The id of the PoolAdmin role\\r\\n   */\\r\\n  function POOL_ADMIN_ROLE() external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the identifier of the EmergencyAdmin role\\r\\n   * @return The id of the EmergencyAdmin role\\r\\n   */\\r\\n  function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the identifier of the RiskAdmin role\\r\\n   * @return The id of the RiskAdmin role\\r\\n   */\\r\\n  function RISK_ADMIN_ROLE() external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the identifier of the FlashBorrower role\\r\\n   * @return The id of the FlashBorrower role\\r\\n   */\\r\\n  function FLASH_BORROWER_ROLE() external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the identifier of the Bridge role\\r\\n   * @return The id of the Bridge role\\r\\n   */\\r\\n  function BRIDGE_ROLE() external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the identifier of the AssetListingAdmin role\\r\\n   * @return The id of the AssetListingAdmin role\\r\\n   */\\r\\n  function ASSET_LISTING_ADMIN_ROLE() external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @notice Set the role as admin of a specific role.\\r\\n   * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\r\\n   * @param role The role to be managed by the admin role\\r\\n   * @param adminRole The admin role\\r\\n   */\\r\\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Adds a new admin as PoolAdmin\\r\\n   * @param admin The address of the new admin\\r\\n   */\\r\\n  function addPoolAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes an admin as PoolAdmin\\r\\n   * @param admin The address of the admin to remove\\r\\n   */\\r\\n  function removePoolAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns true if the address is PoolAdmin, false otherwise\\r\\n   * @param admin The address to check\\r\\n   * @return True if the given address is PoolAdmin, false otherwise\\r\\n   */\\r\\n  function isPoolAdmin(address admin) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Adds a new admin as EmergencyAdmin\\r\\n   * @param admin The address of the new admin\\r\\n   */\\r\\n  function addEmergencyAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes an admin as EmergencyAdmin\\r\\n   * @param admin The address of the admin to remove\\r\\n   */\\r\\n  function removeEmergencyAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns true if the address is EmergencyAdmin, false otherwise\\r\\n   * @param admin The address to check\\r\\n   * @return True if the given address is EmergencyAdmin, false otherwise\\r\\n   */\\r\\n  function isEmergencyAdmin(address admin) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Adds a new admin as RiskAdmin\\r\\n   * @param admin The address of the new admin\\r\\n   */\\r\\n  function addRiskAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes an admin as RiskAdmin\\r\\n   * @param admin The address of the admin to remove\\r\\n   */\\r\\n  function removeRiskAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns true if the address is RiskAdmin, false otherwise\\r\\n   * @param admin The address to check\\r\\n   * @return True if the given address is RiskAdmin, false otherwise\\r\\n   */\\r\\n  function isRiskAdmin(address admin) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Adds a new address as FlashBorrower\\r\\n   * @param borrower The address of the new FlashBorrower\\r\\n   */\\r\\n  function addFlashBorrower(address borrower) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes an address as FlashBorrower\\r\\n   * @param borrower The address of the FlashBorrower to remove\\r\\n   */\\r\\n  function removeFlashBorrower(address borrower) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns true if the address is FlashBorrower, false otherwise\\r\\n   * @param borrower The address to check\\r\\n   * @return True if the given address is FlashBorrower, false otherwise\\r\\n   */\\r\\n  function isFlashBorrower(address borrower) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Adds a new address as Bridge\\r\\n   * @param bridge The address of the new Bridge\\r\\n   */\\r\\n  function addBridge(address bridge) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes an address as Bridge\\r\\n   * @param bridge The address of the bridge to remove\\r\\n   */\\r\\n  function removeBridge(address bridge) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns true if the address is Bridge, false otherwise\\r\\n   * @param bridge The address to check\\r\\n   * @return True if the given address is Bridge, false otherwise\\r\\n   */\\r\\n  function isBridge(address bridge) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Adds a new admin as AssetListingAdmin\\r\\n   * @param admin The address of the new admin\\r\\n   */\\r\\n  function addAssetListingAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes an admin as AssetListingAdmin\\r\\n   * @param admin The address of the admin to remove\\r\\n   */\\r\\n  function removeAssetListingAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns true if the address is AssetListingAdmin, false otherwise\\r\\n   * @param admin The address to check\\r\\n   * @return True if the given address is AssetListingAdmin, false otherwise\\r\\n   */\\r\\n  function isAssetListingAdmin(address admin) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x518142961e1f7c74c9709585287a5dd698874a6db42f7155c2e6564e313888bb\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IBToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\\r\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\r\\nimport {IInitializableBToken} from './IInitializableBToken.sol';\\r\\n\\r\\n/**\\r\\n * @title IBToken\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for an BToken.\\r\\n */\\r\\ninterface IBToken is IERC20, IScaledBalanceToken, IInitializableBToken {\\r\\n  /**\\r\\n   * @dev Emitted during the transfer action\\r\\n   * @param from The user whose tokens are being transferred\\r\\n   * @param to The recipient\\r\\n   * @param value The scaled amount being transferred\\r\\n   * @param index The next liquidity index of the reserve\\r\\n   */\\r\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @notice Mints `amount` bTokens to `user`\\r\\n   * @param caller The address performing the mint\\r\\n   * @param onBehalfOf The address of the user that will receive the minted bTokens\\r\\n   * @param amount The amount of tokens getting minted\\r\\n   * @param index The next liquidity index of the reserve\\r\\n   * @return `true` if the the previous balance of the user was 0\\r\\n   */\\r\\n  function mint(\\r\\n    address caller,\\r\\n    address onBehalfOf,\\r\\n    uint256 amount,\\r\\n    uint256 index\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Burns bTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\r\\n   * @dev In some instances, the mint event could be emitted from a burn transaction\\r\\n   * if the amount to burn is less than the interest that the user accrued\\r\\n   * @param from The address from which the bTokens will be burned\\r\\n   * @param receiverOfUnderlying The address that will receive the underlying\\r\\n   * @param amount The amount being burned\\r\\n   * @param index The next liquidity index of the reserve\\r\\n   */\\r\\n  function burn(address from, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Mints bTokens to the reserve treasury\\r\\n   * @param amount The amount of tokens getting minted\\r\\n   * @param index The next liquidity index of the reserve\\r\\n   */\\r\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers bTokens in the event of a borrow being liquidated, in case the liquidators reclaims the bToken\\r\\n   * @param from The address getting liquidated, current owner of the bTokens\\r\\n   * @param to The recipient\\r\\n   * @param value The amount of tokens getting transferred\\r\\n   */\\r\\n  function transferOnLiquidation(address from, address to, uint256 value) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers the underlying asset to `target`.\\r\\n   * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\\r\\n   * @param target The recipient of the underlying\\r\\n   * @param amount The amount getting transferred\\r\\n   */\\r\\n  function transferUnderlyingTo(address target, uint256 amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Handles the underlying received by the bToken after the transfer has been completed.\\r\\n   * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\\r\\n   * transfer is concluded. However in the future there may be bTokens that allow for example to stake the underlying\\r\\n   * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\\r\\n   * @param user The user executing the repayment\\r\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed\\r\\n   * @param amount The amount getting repaid\\r\\n   */\\r\\n  function handleRepayment(address user, address onBehalfOf, uint256 amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Allow passing a signed message to approve spending\\r\\n   * @dev implements the permit function as for\\r\\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\r\\n   * @param owner The owner of the funds\\r\\n   * @param spender The spender\\r\\n   * @param value The amount\\r\\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\\r\\n   * @param v Signature param\\r\\n   * @param s Signature param\\r\\n   * @param r Signature param\\r\\n   */\\r\\n  function permit(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 value,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the underlying asset of this bToken (E.g. WETH for aWETH)\\r\\n   * @return The address of the underlying asset\\r\\n   */\\r\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the Aave treasury, receiving the fees on this bToken.\\r\\n   * @return Address of the Aave treasury\\r\\n   */\\r\\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the domain separator for the token\\r\\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\r\\n   * @return The domain separator of the token at current chain\\r\\n   */\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the nonce for owner.\\r\\n   * @param owner The address of the owner\\r\\n   * @return The nonce of the owner\\r\\n   */\\r\\n  function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Rescue and transfer tokens locked in this contract\\r\\n   * @param token The address of the token\\r\\n   * @param to The address of the recipient\\r\\n   * @param amount The amount of token to transfer\\r\\n   */\\r\\n  function rescueTokens(address token, address to, uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdc8a5fa47eddaa46e3e979112bed8ee345f274594fa587e143bca1e12aac8a03\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IIncentivesController\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for an Aave Incentives Controller.\\r\\n * @dev It only contains one single function, needed as a hook on bToken and debtToken transfers.\\r\\n */\\r\\ninterface IIncentivesController {\\r\\n  /**\\r\\n   * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\r\\n   * @dev The units of `totalSupply` and `userBalance` should be the same.\\r\\n   * @param user The address of the user whose asset balance has changed\\r\\n   * @param totalSupply The total supply of the asset prior to user balance change\\r\\n   * @param userBalance The previous user balance prior to balance change\\r\\n   */\\r\\n  function handleAction(address user, uint256 totalSupply, uint256 userBalance) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xddb0bec61a2b0246b27fad22235193db92b48174d5517539978e132ddab0909a\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IInitializableBToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IIncentivesController} from './IIncentivesController.sol';\\r\\nimport {IPool} from './IPool.sol';\\r\\n\\r\\n/**\\r\\n * @title IInitializableBToken\\r\\n * @author Aave\\r\\n * @notice Interface for the initialize function on BToken\\r\\n */\\r\\ninterface IInitializableBToken {\\r\\n  /**\\r\\n   * @dev Emitted when an bToken is initialized\\r\\n   * @param underlyingAsset The address of the underlying asset\\r\\n   * @param pool The address of the associated pool\\r\\n   * @param treasury The address of the treasury\\r\\n   * @param incentivesController The address of the incentives controller for this bToken\\r\\n   * @param bTokenDecimals The decimals of the underlying\\r\\n   * @param bTokenName The name of the bToken\\r\\n   * @param bTokenSymbol The symbol of the bToken\\r\\n   * @param params A set of encoded parameters for additional initialization\\r\\n   */\\r\\n  event Initialized(\\r\\n    address indexed underlyingAsset,\\r\\n    address indexed pool,\\r\\n    address treasury,\\r\\n    address incentivesController,\\r\\n    uint8 bTokenDecimals,\\r\\n    string bTokenName,\\r\\n    string bTokenSymbol,\\r\\n    bytes params\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Initializes the bToken\\r\\n   * @param pool The pool contract that is initializing this contract\\r\\n   * @param treasury The address of the Aave treasury, receiving the fees on this bToken\\r\\n   * @param underlyingAsset The address of the underlying asset of this bToken (E.g. WETH for aWETH)\\r\\n   * @param incentivesController The smart contract managing potential incentives distribution\\r\\n   * @param bTokenDecimals The decimals of the bToken, same as the underlying asset's\\r\\n   * @param bTokenName The name of the bToken\\r\\n   * @param bTokenSymbol The symbol of the bToken\\r\\n   * @param params A set of encoded parameters for additional initialization\\r\\n   */\\r\\n  function initialize(\\r\\n    IPool pool,\\r\\n    address treasury,\\r\\n    address underlyingAsset,\\r\\n    IIncentivesController incentivesController,\\r\\n    uint8 bTokenDecimals,\\r\\n    string calldata bTokenName,\\r\\n    string calldata bTokenSymbol,\\r\\n    bytes calldata params\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5ec7ae413654cc9724be1394cfe13579ec5a6a1f02054b19e652369bd838f66e\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\r\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\r\\n\\r\\n/**\\r\\n * @title IPool\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for an Aave Pool.\\r\\n */\\r\\ninterface IPool {\\r\\n  /**\\r\\n   * @dev Emitted on mintUnbacked()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address initiating the supply\\r\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the bTokens\\r\\n   * @param amount The amount of supplied assets\\r\\n   * @param referralCode The referral code used\\r\\n   */\\r\\n  event MintUnbacked(\\r\\n    address indexed reserve,\\r\\n    address user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 amount,\\r\\n    uint16 indexed referralCode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on backUnbacked()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param backer The address paying for the backing\\r\\n   * @param amount The amount added as backing\\r\\n   * @param fee The amount paid in fees\\r\\n   */\\r\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on supply()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address initiating the supply\\r\\n   * @param onBehalfOf The beneficiary of the supply, receiving the bTokens\\r\\n   * @param amount The amount supplied\\r\\n   * @param referralCode The referral code used\\r\\n   */\\r\\n  event Supply(\\r\\n    address indexed reserve,\\r\\n    address user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 amount,\\r\\n    uint16 indexed referralCode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on withdraw()\\r\\n   * @param reserve The address of the underlying asset being withdrawn\\r\\n   * @param user The address initiating the withdrawal, owner of bTokens\\r\\n   * @param to The address that will receive the underlying\\r\\n   * @param amount The amount to be withdrawn\\r\\n   */\\r\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\r\\n   * @param reserve The address of the underlying asset being borrowed\\r\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\r\\n   * initiator of the transaction on flashLoan()\\r\\n   * @param onBehalfOf The address that will be getting the debt\\r\\n   * @param amount The amount borrowed out\\r\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\r\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\r\\n   * @param referralCode The referral code used\\r\\n   */\\r\\n  event Borrow(\\r\\n    address indexed reserve,\\r\\n    address user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 amount,\\r\\n    DataTypes.InterestRateMode interestRateMode,\\r\\n    uint256 borrowRate,\\r\\n    uint16 indexed referralCode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on repay()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\r\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\r\\n   * @param amount The amount repaid\\r\\n   * @param useBTokens True if the repayment is done using bTokens, `false` if done with underlying asset directly\\r\\n   */\\r\\n  event Repay(\\r\\n    address indexed reserve,\\r\\n    address indexed user,\\r\\n    address indexed repayer,\\r\\n    uint256 amount,\\r\\n    bool useBTokens\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on swapBorrowRateMode()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user swapping his rate mode\\r\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\r\\n   */\\r\\n  event SwapBorrowRateMode(\\r\\n    address indexed reserve,\\r\\n    address indexed user,\\r\\n    DataTypes.InterestRateMode interestRateMode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param totalDebt The total isolation mode debt for the reserve\\r\\n   */\\r\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the user selects a certain asset category for eMode\\r\\n   * @param user The address of the user\\r\\n   * @param categoryId The category id\\r\\n   */\\r\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user enabling the usage as collateral\\r\\n   */\\r\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user enabling the usage as collateral\\r\\n   */\\r\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on rebalanceStableBorrowRate()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user for which the rebalance has been executed\\r\\n   */\\r\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on flashLoan()\\r\\n   * @param target The address of the flash loan receiver contract\\r\\n   * @param initiator The address initiating the flash loan\\r\\n   * @param asset The address of the asset being flash borrowed\\r\\n   * @param amount The amount flash borrowed\\r\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\r\\n   * @param premium The fee flash borrowed\\r\\n   * @param referralCode The referral code used\\r\\n   */\\r\\n  event FlashLoan(\\r\\n    address indexed target,\\r\\n    address initiator,\\r\\n    address indexed asset,\\r\\n    uint256 amount,\\r\\n    DataTypes.InterestRateMode interestRateMode,\\r\\n    uint256 premium,\\r\\n    uint16 indexed referralCode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a borrower is liquidated.\\r\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n   * @param user The address of the borrower getting liquidated\\r\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\r\\n   * @param liquidator The address of the liquidator\\r\\n   * @param receiveBToken True if the liquidators wants to receive the collateral bTokens, `false` if he wants\\r\\n   * to receive the underlying collateral asset directly\\r\\n   */\\r\\n  event LiquidationCall(\\r\\n    address indexed collateralAsset,\\r\\n    address indexed debtAsset,\\r\\n    address indexed user,\\r\\n    uint256 debtToCover,\\r\\n    uint256 liquidatedCollateralAmount,\\r\\n    address liquidator,\\r\\n    bool receiveBToken\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the state of a reserve is updated.\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param liquidityRate The next liquidity rate\\r\\n   * @param stableBorrowRate The next stable borrow rate\\r\\n   * @param variableBorrowRate The next variable borrow rate\\r\\n   * @param liquidityIndex The next liquidity index\\r\\n   * @param variableBorrowIndex The next variable borrow index\\r\\n   */\\r\\n  event ReserveDataUpdated(\\r\\n    address indexed reserve,\\r\\n    uint256 liquidityRate,\\r\\n    uint256 stableBorrowRate,\\r\\n    uint256 variableBorrowRate,\\r\\n    uint256 liquidityIndex,\\r\\n    uint256 variableBorrowIndex\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the protocol treasury receives minted bTokens from the accrued interest.\\r\\n   * @param reserve The address of the reserve\\r\\n   * @param amountMinted The amount minted to the treasury\\r\\n   */\\r\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\r\\n\\r\\n  /**\\r\\n   * @notice Mints an `amount` of bTokens to the `onBehalfOf`\\r\\n   * @param asset The address of the underlying asset to mint\\r\\n   * @param amount The amount to mint\\r\\n   * @param onBehalfOf The address that will receive the bTokens\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   */\\r\\n  function mintUnbacked(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address onBehalfOf,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\r\\n   * @param asset The address of the underlying asset to back\\r\\n   * @param amount The amount to back\\r\\n   * @param fee The amount paid in fees\\r\\n   * @return The backed amount\\r\\n   */\\r\\n  function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying bTokens.\\r\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\r\\n   * @param asset The address of the underlying asset to supply\\r\\n   * @param amount The amount to be supplied\\r\\n   * @param onBehalfOf The address that will receive the bTokens, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of bTokens\\r\\n   *   is a different wallet\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   */\\r\\n  function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\r\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\r\\n   * @param asset The address of the underlying asset to supply\\r\\n   * @param amount The amount to be supplied\\r\\n   * @param onBehalfOf The address that will receive the bTokens, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of bTokens\\r\\n   *   is a different wallet\\r\\n   * @param deadline The deadline timestamp that the permit is valid\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   * @param permitV The V parameter of ERC712 permit sig\\r\\n   * @param permitR The R parameter of ERC712 permit sig\\r\\n   * @param permitS The S parameter of ERC712 permit sig\\r\\n   */\\r\\n  function supplyWithPermit(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address onBehalfOf,\\r\\n    uint16 referralCode,\\r\\n    uint256 deadline,\\r\\n    uint8 permitV,\\r\\n    bytes32 permitR,\\r\\n    bytes32 permitS\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent bTokens owned\\r\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\r\\n   * @param asset The address of the underlying asset to withdraw\\r\\n   * @param amount The underlying amount to be withdrawn\\r\\n   *   - Send the value type(uint256).max in order to withdraw the whole bToken balance\\r\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\r\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n   *   different wallet\\r\\n   * @return The final amount withdrawn\\r\\n   */\\r\\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\r\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\r\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\r\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\r\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\r\\n   * @param asset The address of the underlying asset to borrow\\r\\n   * @param amount The amount to be borrowed\\r\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\r\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\r\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\r\\n   * if he has been given credit delegation allowance\\r\\n   */\\r\\n  function borrow(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 interestRateMode,\\r\\n    uint16 referralCode,\\r\\n    address onBehalfOf\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\r\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\r\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n   * @param amount The amount to repay\\r\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n   * other borrower whose debt should be removed\\r\\n   * @return The final amount repaid\\r\\n   */\\r\\n  function repay(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 interestRateMode,\\r\\n    address onBehalfOf\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\r\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\r\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n   * @param amount The amount to repay\\r\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n   * other borrower whose debt should be removed\\r\\n   * @param deadline The deadline timestamp that the permit is valid\\r\\n   * @param permitV The V parameter of ERC712 permit sig\\r\\n   * @param permitR The R parameter of ERC712 permit sig\\r\\n   * @param permitS The S parameter of ERC712 permit sig\\r\\n   * @return The final amount repaid\\r\\n   */\\r\\n  function repayWithPermit(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 interestRateMode,\\r\\n    address onBehalfOf,\\r\\n    uint256 deadline,\\r\\n    uint8 permitV,\\r\\n    bytes32 permitR,\\r\\n    bytes32 permitS\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve bTokens, burning the\\r\\n   * equivalent debt tokens\\r\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\r\\n   * @dev  Passing uint256.max as amount will clean up any residual bToken dust balance, if the user bToken\\r\\n   * balance is not enough to cover the whole debt\\r\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n   * @param amount The amount to repay\\r\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n   * @return The final amount repaid\\r\\n   */\\r\\n  function repayWithBTokens(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 interestRateMode\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\r\\n   * @param asset The address of the underlying asset borrowed\\r\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\r\\n   */\\r\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\r\\n   * - Users can be rebalanced if the following conditions are satisfied:\\r\\n   *     1. Usage ratio is above 95%\\r\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\r\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\r\\n   * @param asset The address of the underlying asset borrowed\\r\\n   * @param user The address of the user to be rebalanced\\r\\n   */\\r\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\r\\n   * @param asset The address of the underlying asset supplied\\r\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\r\\n   */\\r\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\r\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\r\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\r\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n   * @param user The address of the borrower getting liquidated\\r\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n   * @param receiveBToken True if the liquidators wants to receive the collateral bTokens, `false` if he wants\\r\\n   * to receive the underlying collateral asset directly\\r\\n   */\\r\\n  function liquidationCall(\\r\\n    address collateralAsset,\\r\\n    address debtAsset,\\r\\n    address user,\\r\\n    uint256 debtToCover,\\r\\n    bool receiveBToken\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n   * as long as the amount taken plus a fee is returned.\\r\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\r\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\r\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\r\\n   * @param assets The addresses of the assets being flash-borrowed\\r\\n   * @param amounts The amounts of the assets being flash-borrowed\\r\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\r\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\r\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\r\\n   * @param params Variadic packed params to pass to the receiver as extra information\\r\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   */\\r\\n  function flashLoan(\\r\\n    address receiverAddress,\\r\\n    address[] calldata assets,\\r\\n    uint256[] calldata amounts,\\r\\n    uint256[] calldata interestRateModes,\\r\\n    address onBehalfOf,\\r\\n    bytes calldata params,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n   * as long as the amount taken plus a fee is returned.\\r\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\r\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\r\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\r\\n   * @param asset The address of the asset being flash-borrowed\\r\\n   * @param amount The amount of the asset being flash-borrowed\\r\\n   * @param params Variadic packed params to pass to the receiver as extra information\\r\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   */\\r\\n  function flashLoanSimple(\\r\\n    address receiverAddress,\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    bytes calldata params,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the user account data across all the reserves\\r\\n   * @param user The address of the user\\r\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\r\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\r\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\r\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\r\\n   * @return ltv The loan to value of The user\\r\\n   * @return healthFactor The current health factor of the user\\r\\n   */\\r\\n  function getUserAccountData(\\r\\n    address user\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 totalCollateralBase,\\r\\n      uint256 totalDebtBase,\\r\\n      uint256 availableBorrowsBase,\\r\\n      uint256 currentLiquidationThreshold,\\r\\n      uint256 ltv,\\r\\n      uint256 healthFactor\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Initializes a reserve, activating it, assigning an bToken and debt tokens and an\\r\\n   * interest rate strategy\\r\\n   * @dev Only callable by the PoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param bTokenAddress The address of the bToken that will be assigned to the reserve\\r\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\r\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\r\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\r\\n   */\\r\\n  function initReserve(\\r\\n    address asset,\\r\\n    address bTokenAddress,\\r\\n    address stableDebtAddress,\\r\\n    address variableDebtAddress,\\r\\n    address interestRateStrategyAddress\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Drop a reserve\\r\\n   * @dev Only callable by the PoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   */\\r\\n  function dropReserve(address asset) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the interest rate strategy contract\\r\\n   * @dev Only callable by the PoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\r\\n   */\\r\\n  function setReserveInterestRateStrategyAddress(\\r\\n    address asset,\\r\\n    address rateStrategyAddress\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\r\\n   * @dev Only callable by the PoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param configuration The new configuration bitmap\\r\\n   */\\r\\n  function setConfiguration(\\r\\n    address asset,\\r\\n    DataTypes.ReserveConfigurationMap calldata configuration\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the configuration of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The configuration of the reserve\\r\\n   */\\r\\n  function getConfiguration(\\r\\n    address asset\\r\\n  ) external view returns (DataTypes.ReserveConfigurationMap memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the configuration of the user across all the reserves\\r\\n   * @param user The user address\\r\\n   * @return The configuration of the user\\r\\n   */\\r\\n  function getUserConfiguration(\\r\\n    address user\\r\\n  ) external view returns (DataTypes.UserConfigurationMap memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the normalized income of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The reserve's normalized income\\r\\n   */\\r\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the normalized variable debt per unit of asset\\r\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\r\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\r\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\r\\n   * combination with variable debt supply/balances.\\r\\n   * If using this function externally, consider that is possible to have an increasing normalized\\r\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\r\\n   * (e.g. only updates with non-zero variable debt supply)\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The reserve normalized variable debt\\r\\n   */\\r\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the state and configuration of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The state and configuration data of the reserve\\r\\n   */\\r\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Validates and finalizes an bToken transfer\\r\\n   * @dev Only callable by the overlying bToken of the `asset`\\r\\n   * @param asset The address of the underlying asset of the bToken\\r\\n   * @param from The user from which the bTokens are transferred\\r\\n   * @param to The user receiving the bTokens\\r\\n   * @param amount The amount being transferred/withdrawn\\r\\n   * @param balanceFromBefore The bToken balance of the `from` user before the transfer\\r\\n   * @param balanceToBefore The bToken balance of the `to` user before the transfer\\r\\n   */\\r\\n  function finalizeTransfer(\\r\\n    address asset,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    uint256 balanceFromBefore,\\r\\n    uint256 balanceToBefore\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\r\\n   * @dev It does not include dropped reserves\\r\\n   * @return The addresses of the underlying assets of the initialized reserves\\r\\n   */\\r\\n  function getReservesList() external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\r\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\r\\n   * @return The address of the reserve associated with id\\r\\n   */\\r\\n  function getReserveAddressById(uint16 id) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\r\\n   * @return The address of the PoolAddressesProvider\\r\\n   */\\r\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the protocol fee on the bridging\\r\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\r\\n   */\\r\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\r\\n   * - A part is sent to bToken holders as extra, one time accumulated interest\\r\\n   * - A part is collected by the protocol treasury\\r\\n   * @dev The total premium is calculated on the total borrowed amount\\r\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\r\\n   * @dev Only callable by the PoolConfigurator contract\\r\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\r\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\r\\n   */\\r\\n  function updateFlashloanPremiums(\\r\\n    uint128 flashLoanPremiumTotal,\\r\\n    uint128 flashLoanPremiumToProtocol\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Configures a new category for the eMode.\\r\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\r\\n   * The category 0 is reserved as it's the default for volatile assets\\r\\n   * @param id The id of the category\\r\\n   * @param config The configuration of the category\\r\\n   */\\r\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the data of an eMode category\\r\\n   * @param id The id of the category\\r\\n   * @return The configuration data of the category\\r\\n   */\\r\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Allows a user to use the protocol in eMode\\r\\n   * @param categoryId The id of the category\\r\\n   */\\r\\n  function setUserEMode(uint8 categoryId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the eMode the user is using\\r\\n   * @param user The address of the user\\r\\n   * @return The eMode id\\r\\n   */\\r\\n  function getUserEMode(address user) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\r\\n   * @dev It requires the given asset has zero debt ceiling\\r\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\r\\n   */\\r\\n  function resetIsolationModeTotalDebt(address asset) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\r\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\r\\n   */\\r\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the total fee on flash loans\\r\\n   * @return The total fee on flashloans\\r\\n   */\\r\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the part of the bridge fees sent to protocol\\r\\n   * @return The bridge fee sent to the protocol treasury\\r\\n   */\\r\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the part of the flashloan fees sent to protocol\\r\\n   * @return The flashloan fee sent to the protocol treasury\\r\\n   */\\r\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\r\\n   * @return The maximum number of reserves supported\\r\\n   */\\r\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\r\\n\\r\\n  /**\\r\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of bTokens\\r\\n   * @param assets The list of reserves for which the minting needs to be executed\\r\\n   */\\r\\n  function mintToTreasury(address[] calldata assets) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Rescue and transfer tokens locked in this contract\\r\\n   * @param token The address of the token\\r\\n   * @param to The address of the recipient\\r\\n   * @param amount The amount of token to transfer\\r\\n   */\\r\\n  function rescueTokens(address token, address to, uint256 amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying bTokens.\\r\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\r\\n   * @dev Deprecated: Use the `supply` function instead\\r\\n   * @param asset The address of the underlying asset to supply\\r\\n   * @param amount The amount to be supplied\\r\\n   * @param onBehalfOf The address that will receive the bTokens, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of bTokens\\r\\n   *   is a different wallet\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   */\\r\\n  function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x50cae9e90fb417353cb2690d924657d69c91d4c5a2dc09811f458f75386b6651\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IPoolAddressesProvider\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\r\\n */\\r\\ninterface IPoolAddressesProvider {\\r\\n  /**\\r\\n   * @dev Emitted when the market identifier is updated.\\r\\n   * @param oldMarketId The old id of the market\\r\\n   * @param newMarketId The new id of the market\\r\\n   */\\r\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pool is updated.\\r\\n   * @param oldAddress The old address of the Pool\\r\\n   * @param newAddress The new address of the Pool\\r\\n   */\\r\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pool configurator is updated.\\r\\n   * @param oldAddress The old address of the PoolConfigurator\\r\\n   * @param newAddress The new address of the PoolConfigurator\\r\\n   */\\r\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the price oracle is updated.\\r\\n   * @param oldAddress The old address of the PriceOracle\\r\\n   * @param newAddress The new address of the PriceOracle\\r\\n   */\\r\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the ACL manager is updated.\\r\\n   * @param oldAddress The old address of the ACLManager\\r\\n   * @param newAddress The new address of the ACLManager\\r\\n   */\\r\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the ACL admin is updated.\\r\\n   * @param oldAddress The old address of the ACLAdmin\\r\\n   * @param newAddress The new address of the ACLAdmin\\r\\n   */\\r\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the price oracle sentinel is updated.\\r\\n   * @param oldAddress The old address of the PriceOracleSentinel\\r\\n   * @param newAddress The new address of the PriceOracleSentinel\\r\\n   */\\r\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pool data provider is updated.\\r\\n   * @param oldAddress The old address of the PoolDataProvider\\r\\n   * @param newAddress The new address of the PoolDataProvider\\r\\n   */\\r\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a new proxy is created.\\r\\n   * @param id The identifier of the proxy\\r\\n   * @param proxyAddress The address of the created proxy contract\\r\\n   * @param implementationAddress The address of the implementation contract\\r\\n   */\\r\\n  event ProxyCreated(\\r\\n    bytes32 indexed id,\\r\\n    address indexed proxyAddress,\\r\\n    address indexed implementationAddress\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a new non-proxied contract address is registered.\\r\\n   * @param id The identifier of the contract\\r\\n   * @param oldAddress The address of the old contract\\r\\n   * @param newAddress The address of the new contract\\r\\n   */\\r\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\r\\n   * @param id The identifier of the contract\\r\\n   * @param proxyAddress The address of the proxy contract\\r\\n   * @param oldImplementationAddress The address of the old implementation contract\\r\\n   * @param newImplementationAddress The address of the new implementation contract\\r\\n   */\\r\\n  event AddressSetAsProxy(\\r\\n    bytes32 indexed id,\\r\\n    address indexed proxyAddress,\\r\\n    address oldImplementationAddress,\\r\\n    address indexed newImplementationAddress\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the id of the Aave market to which this contract points to.\\r\\n   * @return The market id\\r\\n   */\\r\\n  function getMarketId() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\r\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\r\\n   * identify and validate multiple Aave markets.\\r\\n   * @param newMarketId The market id\\r\\n   */\\r\\n  function setMarketId(string calldata newMarketId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns an address by its identifier.\\r\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\r\\n   * @dev It returns ZERO if there is no registered address with the given id\\r\\n   * @param id The id\\r\\n   * @return The address of the registered for the specified id\\r\\n   */\\r\\n  function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice General function to update the implementation of a proxy registered with\\r\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\r\\n   * set as implementation the `newImplementationAddress`.\\r\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\r\\n   * setter function, in order to avoid unexpected consequences\\r\\n   * @param id The id\\r\\n   * @param newImplementationAddress The address of the new implementation\\r\\n   */\\r\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\r\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\r\\n   * @param id The id\\r\\n   * @param newAddress The address to set\\r\\n   */\\r\\n  function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the Pool proxy.\\r\\n   * @return The Pool proxy address\\r\\n   */\\r\\n  function getPool() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\r\\n   * setting the new `pool` implementation when the function is called for the first time.\\r\\n   * @param newPoolImpl The new Pool implementation\\r\\n   */\\r\\n  function setPoolImpl(address newPoolImpl) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the PoolConfigurator proxy.\\r\\n   * @return The PoolConfigurator proxy address\\r\\n   */\\r\\n  function getPoolConfigurator() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\r\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\r\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\r\\n   */\\r\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the price oracle.\\r\\n   * @return The address of the PriceOracle\\r\\n   */\\r\\n  function getPriceOracle() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the price oracle.\\r\\n   * @param newPriceOracle The address of the new PriceOracle\\r\\n   */\\r\\n  function setPriceOracle(address newPriceOracle) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the ACL manager.\\r\\n   * @return The address of the ACLManager\\r\\n   */\\r\\n  function getACLManager() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the ACL manager.\\r\\n   * @param newAclManager The address of the new ACLManager\\r\\n   */\\r\\n  function setACLManager(address newAclManager) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the ACL admin.\\r\\n   * @return The address of the ACL admin\\r\\n   */\\r\\n  function getACLAdmin() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the ACL admin.\\r\\n   * @param newAclAdmin The address of the new ACL admin\\r\\n   */\\r\\n  function setACLAdmin(address newAclAdmin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the price oracle sentinel.\\r\\n   * @return The address of the PriceOracleSentinel\\r\\n   */\\r\\n  function getPriceOracleSentinel() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the price oracle sentinel.\\r\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\r\\n   */\\r\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the data provider.\\r\\n   * @return The address of the DataProvider\\r\\n   */\\r\\n  function getPoolDataProvider() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the data provider.\\r\\n   * @param newDataProvider The address of the new DataProvider\\r\\n   */\\r\\n  function setPoolDataProvider(address newDataProvider) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf37b9fdb389d45783acfc16664c06f28af953d4a409d1059bdf10b917d41fd4a\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IScaledBalanceToken\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for a scaled-balance token.\\r\\n */\\r\\ninterface IScaledBalanceToken {\\r\\n  /**\\r\\n   * @dev Emitted after the mint action\\r\\n   * @param caller The address performing the mint\\r\\n   * @param onBehalfOf The address of the user that will receive the minted tokens\\r\\n   * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\\r\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\\r\\n   * @param index The next liquidity index of the reserve\\r\\n   */\\r\\n  event Mint(\\r\\n    address indexed caller,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 value,\\r\\n    uint256 balanceIncrease,\\r\\n    uint256 index\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted after the burn action\\r\\n   * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\\r\\n   * @param from The address from which the tokens will be burned\\r\\n   * @param target The address that will receive the underlying, if any\\r\\n   * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\\r\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\\r\\n   * @param index The next liquidity index of the reserve\\r\\n   */\\r\\n  event Burn(\\r\\n    address indexed from,\\r\\n    address indexed target,\\r\\n    uint256 value,\\r\\n    uint256 balanceIncrease,\\r\\n    uint256 index\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the scaled balance of the user.\\r\\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\r\\n   * at the moment of the update\\r\\n   * @param user The user whose balance is calculated\\r\\n   * @return The scaled balance of the user\\r\\n   */\\r\\n  function scaledBalanceOf(address user) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the scaled balance of the user and the scaled total supply.\\r\\n   * @param user The address of the user\\r\\n   * @return The scaled balance of the user\\r\\n   * @return The scaled total supply\\r\\n   */\\r\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\r\\n   * @return The scaled total supply\\r\\n   */\\r\\n  function scaledTotalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns last index interest was accrued to the user's balance\\r\\n   * @param user The address of the user\\r\\n   * @return The last index interest was accrued to the user's balance, expressed in ray\\r\\n   */\\r\\n  function getPreviousIndex(address user) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf811b6f5f28cb114bf0157f5c29e4f3b6916cd07a2d199e41a6e095bf10e9274\",\"license\":\"AGPL-3.0\"},\"contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Errors library\\r\\n * @author Aave\\r\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\r\\n */\\r\\nlibrary Errors {\\r\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\r\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\r\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\r\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\r\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\r\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\r\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\r\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\r\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\r\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\r\\n  string public constant CALLER_NOT_BTOKEN = '11'; // 'The caller of the function is not an BToken'\\r\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\r\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\r\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\r\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\r\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\r\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\r\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\r\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\r\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\r\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\r\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\r\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\r\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\r\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\r\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\r\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\r\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\r\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\r\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\r\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\r\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\r\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\r\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\r\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\r\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\r\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\r\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\r\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\r\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\r\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\r\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\r\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\r\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\r\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\r\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\r\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\r\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\r\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\r\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\r\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\r\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\r\\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54'; // 'Claimable rights over underlying not zero (bToken supply or accruedToTreasury)'\\r\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\r\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\r\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\r\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\r\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\r\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\r\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\r\\n  string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = '62'; // 'User is in isolation mode or ltv is zero'\\r\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\r\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\r\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\r\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\r\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\r\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\r\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\r\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\r\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\r\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\r\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\r\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\r\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\r\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\r\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\r\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\r\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\r\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\r\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\r\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\r\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\r\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\r\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\r\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\r\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\r\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\r\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\r\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\r\\n  string public constant FLASHLOAN_DISABLED = '91'; // FlashLoaning for this asset is disabled\\r\\n}\\r\\n\",\"keccak256\":\"0x553d8e5e86ac2b489c2d2df18a730372881daae5e0cb47566dca8965efc0c134\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title WadRayMath library\\r\\n * @author Aave\\r\\n * @notice Provides functions to perform calculations with Wad and Ray units\\r\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\r\\n * with 27 digits of precision)\\r\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\r\\n */\\r\\nlibrary WadRayMath {\\r\\n  // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\r\\n  uint256 internal constant WAD = 1e18;\\r\\n  uint256 internal constant HALF_WAD = 0.5e18;\\r\\n\\r\\n  uint256 internal constant RAY = 1e27;\\r\\n  uint256 internal constant HALF_RAY = 0.5e27;\\r\\n\\r\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\r\\n\\r\\n  /**\\r\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\r\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n   * @param a Wad\\r\\n   * @param b Wad\\r\\n   * @return c = a*b, in wad\\r\\n   */\\r\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n    // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\r\\n    assembly {\\r\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\r\\n        revert(0, 0)\\r\\n      }\\r\\n\\r\\n      c := div(add(mul(a, b), HALF_WAD), WAD)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Divides two wad, rounding half up to the nearest wad\\r\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n   * @param a Wad\\r\\n   * @param b Wad\\r\\n   * @return c = a/b, in wad\\r\\n   */\\r\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\r\\n    assembly {\\r\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\r\\n        revert(0, 0)\\r\\n      }\\r\\n\\r\\n      c := div(add(mul(a, WAD), div(b, 2)), b)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Multiplies two ray, rounding half up to the nearest ray\\r\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n   * @param a Ray\\r\\n   * @param b Ray\\r\\n   * @return c = a raymul b\\r\\n   */\\r\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n    // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\r\\n    assembly {\\r\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\r\\n        revert(0, 0)\\r\\n      }\\r\\n\\r\\n      c := div(add(mul(a, b), HALF_RAY), RAY)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Divides two ray, rounding half up to the nearest ray\\r\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n   * @param a Ray\\r\\n   * @param b Ray\\r\\n   * @return c = a raydiv b\\r\\n   */\\r\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\r\\n    assembly {\\r\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\r\\n        revert(0, 0)\\r\\n      }\\r\\n\\r\\n      c := div(add(mul(a, RAY), div(b, 2)), b)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Casts ray down to wad\\r\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n   * @param a Ray\\r\\n   * @return b = a converted to wad, rounded half up to the nearest wad\\r\\n   */\\r\\n  function rayToWad(uint256 a) internal pure returns (uint256 b) {\\r\\n    assembly {\\r\\n      b := div(a, WAD_RAY_RATIO)\\r\\n      let remainder := mod(a, WAD_RAY_RATIO)\\r\\n      if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\r\\n        b := add(b, 1)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts wad up to ray\\r\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n   * @param a Wad\\r\\n   * @return b = a converted in ray\\r\\n   */\\r\\n  function wadToRay(uint256 a) internal pure returns (uint256 b) {\\r\\n    // to avoid overflow, b/WAD_RAY_RATIO == a\\r\\n    assembly {\\r\\n      b := mul(a, WAD_RAY_RATIO)\\r\\n\\r\\n      if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\r\\n        revert(0, 0)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x1fefec0fa31e0b2960c90dd1a637b69e5748fee962d3b5e6f2f6b0b5965a67b1\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary DataTypes {\\r\\n  struct ReserveData {\\r\\n    //stores the reserve configuration\\r\\n    ReserveConfigurationMap configuration;\\r\\n    //the liquidity index. Expressed in ray\\r\\n    uint128 liquidityIndex;\\r\\n    //the current supply rate. Expressed in ray\\r\\n    uint128 currentLiquidityRate;\\r\\n    //variable borrow index. Expressed in ray\\r\\n    uint128 variableBorrowIndex;\\r\\n    //the current variable borrow rate. Expressed in ray\\r\\n    uint128 currentVariableBorrowRate;\\r\\n    //the current stable borrow rate. Expressed in ray\\r\\n    uint128 currentStableBorrowRate;\\r\\n    //timestamp of last update\\r\\n    uint40 lastUpdateTimestamp;\\r\\n    //the id of the reserve. Represents the position in the list of the active reserves\\r\\n    uint16 id;\\r\\n    //bToken address\\r\\n    address bTokenAddress;\\r\\n    //stableDebtToken address\\r\\n    address stableDebtTokenAddress;\\r\\n    //variableDebtToken address\\r\\n    address variableDebtTokenAddress;\\r\\n    //address of the interest rate strategy\\r\\n    address interestRateStrategyAddress;\\r\\n    //the current treasury balance, scaled\\r\\n    uint128 accruedToTreasury;\\r\\n    //the outstanding unbacked bTokens minted through the bridging feature\\r\\n    uint128 unbacked;\\r\\n    //the outstanding debt borrowed against this asset in isolation mode\\r\\n    uint128 isolationModeTotalDebt;\\r\\n  }\\r\\n\\r\\n  struct ReserveConfigurationMap {\\r\\n    //bit 0-15: LTV\\r\\n    //bit 16-31: Liq. threshold\\r\\n    //bit 32-47: Liq. bonus\\r\\n    //bit 48-55: Decimals\\r\\n    //bit 56: reserve is active\\r\\n    //bit 57: reserve is frozen\\r\\n    //bit 58: borrowing is enabled\\r\\n    //bit 59: stable rate borrowing enabled\\r\\n    //bit 60: asset is paused\\r\\n    //bit 61: borrowing in isolation mode is enabled\\r\\n    //bit 62: siloed borrowing enabled\\r\\n    //bit 63: flashloaning enabled\\r\\n    //bit 64-79: reserve factor\\r\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\r\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\r\\n    //bit 152-167 liquidation protocol fee\\r\\n    //bit 168-175 eMode category\\r\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\r\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\r\\n    //bit 252-255 unused\\r\\n\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct UserConfigurationMap {\\r\\n    /**\\r\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\r\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\r\\n     * asset is borrowed by the user.\\r\\n     */\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct EModeCategory {\\r\\n    // each eMode category has a custom ltv and liquidation threshold\\r\\n    uint16 ltv;\\r\\n    uint16 liquidationThreshold;\\r\\n    uint16 liquidationBonus;\\r\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\r\\n    address priceSource;\\r\\n    string label;\\r\\n  }\\r\\n\\r\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\r\\n\\r\\n  struct ReserveCache {\\r\\n    uint256 currScaledVariableDebt;\\r\\n    uint256 nextScaledVariableDebt;\\r\\n    uint256 currPrincipalStableDebt;\\r\\n    uint256 currAvgStableBorrowRate;\\r\\n    uint256 currTotalStableDebt;\\r\\n    uint256 nextAvgStableBorrowRate;\\r\\n    uint256 nextTotalStableDebt;\\r\\n    uint256 currLiquidityIndex;\\r\\n    uint256 nextLiquidityIndex;\\r\\n    uint256 currVariableBorrowIndex;\\r\\n    uint256 nextVariableBorrowIndex;\\r\\n    uint256 currLiquidityRate;\\r\\n    uint256 currVariableBorrowRate;\\r\\n    uint256 reserveFactor;\\r\\n    ReserveConfigurationMap reserveConfiguration;\\r\\n    address bTokenAddress;\\r\\n    address stableDebtTokenAddress;\\r\\n    address variableDebtTokenAddress;\\r\\n    uint40 reserveLastUpdateTimestamp;\\r\\n    uint40 stableDebtLastUpdateTimestamp;\\r\\n  }\\r\\n\\r\\n  struct ExecuteLiquidationCallParams {\\r\\n    uint256 reservesCount;\\r\\n    uint256 debtToCover;\\r\\n    address collateralAsset;\\r\\n    address debtAsset;\\r\\n    address user;\\r\\n    bool receiveBToken;\\r\\n    address priceOracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct ExecuteSupplyParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address onBehalfOf;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct ExecuteBorrowParams {\\r\\n    address asset;\\r\\n    address user;\\r\\n    address onBehalfOf;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    uint16 referralCode;\\r\\n    bool releaseUnderlying;\\r\\n    uint256 maxStableRateBorrowSizePercent;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct ExecuteRepayParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    address onBehalfOf;\\r\\n    bool useBTokens;\\r\\n  }\\r\\n\\r\\n  struct ExecuteWithdrawParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address to;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct ExecuteSetUserEModeParams {\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 categoryId;\\r\\n  }\\r\\n\\r\\n  struct FinalizeTransferParams {\\r\\n    address asset;\\r\\n    address from;\\r\\n    address to;\\r\\n    uint256 amount;\\r\\n    uint256 balanceFromBefore;\\r\\n    uint256 balanceToBefore;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 fromEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct FlashloanParams {\\r\\n    address receiverAddress;\\r\\n    address[] assets;\\r\\n    uint256[] amounts;\\r\\n    uint256[] interestRateModes;\\r\\n    address onBehalfOf;\\r\\n    bytes params;\\r\\n    uint16 referralCode;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    uint256 flashLoanPremiumTotal;\\r\\n    uint256 maxStableRateBorrowSizePercent;\\r\\n    uint256 reservesCount;\\r\\n    address addressesProvider;\\r\\n    uint8 userEModeCategory;\\r\\n    bool isAuthorizedFlashBorrower;\\r\\n  }\\r\\n\\r\\n  struct FlashloanSimpleParams {\\r\\n    address receiverAddress;\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    bytes params;\\r\\n    uint16 referralCode;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    uint256 flashLoanPremiumTotal;\\r\\n  }\\r\\n\\r\\n  struct FlashLoanRepaymentParams {\\r\\n    uint256 amount;\\r\\n    uint256 totalPremium;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    address asset;\\r\\n    address receiverAddress;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct CalculateUserAccountDataParams {\\r\\n    UserConfigurationMap userConfig;\\r\\n    uint256 reservesCount;\\r\\n    address user;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct ValidateBorrowParams {\\r\\n    ReserveCache reserveCache;\\r\\n    UserConfigurationMap userConfig;\\r\\n    address asset;\\r\\n    address userAddress;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    uint256 maxStableLoanPercent;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n    bool isolationModeActive;\\r\\n    address isolationModeCollateralAddress;\\r\\n    uint256 isolationModeDebtCeiling;\\r\\n  }\\r\\n\\r\\n  struct ValidateLiquidationCallParams {\\r\\n    ReserveCache debtReserveCache;\\r\\n    uint256 totalDebt;\\r\\n    uint256 healthFactor;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct CalculateInterestRatesParams {\\r\\n    uint256 unbacked;\\r\\n    uint256 liquidityAdded;\\r\\n    uint256 liquidityTaken;\\r\\n    uint256 totalStableDebt;\\r\\n    uint256 totalVariableDebt;\\r\\n    uint256 averageStableBorrowRate;\\r\\n    uint256 reserveFactor;\\r\\n    address reserve;\\r\\n    address bToken;\\r\\n  }\\r\\n\\r\\n  struct InitReserveParams {\\r\\n    address asset;\\r\\n    address bTokenAddress;\\r\\n    address stableDebtAddress;\\r\\n    address variableDebtAddress;\\r\\n    address interestRateStrategyAddress;\\r\\n    uint16 reservesCount;\\r\\n    uint16 maxNumberReserves;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x521db3fab8031c6c8df8f45e293dd809e8f6389e588576a909ac87a4be1ca056\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/upgradeability/VersionedInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title VersionedInitializable\\r\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\r\\n * @notice Helper contract to implement initializer functions. To use it, replace\\r\\n * the constructor with a function that has the `initializer` modifier.\\r\\n * @dev WARNING: Unlike constructors, initializer functions must be manually\\r\\n * invoked. This applies both to deploying an Initializable contract, as well\\r\\n * as extending an Initializable contract via inheritance.\\r\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\r\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\r\\n * because this is not dealt with automatically as with constructors.\\r\\n */\\r\\nabstract contract VersionedInitializable {\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  uint256 private lastInitializedRevision = 0;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to use in the initializer function of a contract.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    uint256 revision = getRevision();\\r\\n    require(\\r\\n      initializing || isConstructor() || revision > lastInitializedRevision,\\r\\n      'Contract instance has already been initialized'\\r\\n    );\\r\\n\\r\\n    bool isTopLevelCall = !initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = true;\\r\\n      lastInitializedRevision = revision;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the revision number of the contract\\r\\n   * @dev Needs to be defined in the inherited class as a constant.\\r\\n   * @return The revision number\\r\\n   */\\r\\n  function getRevision() internal pure virtual returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns true if and only if the function is running in the constructor\\r\\n   * @return True if the function is running in the constructor\\r\\n   */\\r\\n  function isConstructor() private view returns (bool) {\\r\\n    // extcodesize checks the size of the code stored in an address, and\\r\\n    // address returns the current address. Since the code is still not\\r\\n    // deployed when running a constructor, any checks on its code size will\\r\\n    // yield zero, making it an effective way to detect if a contract is\\r\\n    // under construction or not.\\r\\n    uint256 cs;\\r\\n    //solium-disable-next-line\\r\\n    assembly {\\r\\n      cs := extcodesize(address())\\r\\n    }\\r\\n    return cs == 0;\\r\\n  }\\r\\n\\r\\n  // Reserved storage space to allow for layout changes in the future.\\r\\n  uint256[50] private ______gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x5f85255cef8377443dddcd32b57a1693da484320829282f78e471cd106d7615c\",\"license\":\"AGPL-3.0\"},\"contracts/protocol/tokenization/BToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';\\r\\nimport {GPv2SafeERC20} from '../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';\\r\\nimport {SafeCast} from '../../dependencies/openzeppelin/contracts/SafeCast.sol';\\r\\nimport {VersionedInitializable} from '../libraries/upgradeability/VersionedInitializable.sol';\\r\\nimport {Errors} from '../libraries/helpers/Errors.sol';\\r\\nimport {WadRayMath} from '../libraries/math/WadRayMath.sol';\\r\\nimport {IPool} from '../../interfaces/IPool.sol';\\r\\nimport {IBToken} from '../../interfaces/IBToken.sol';\\r\\nimport {IIncentivesController} from '../../interfaces/IIncentivesController.sol';\\r\\nimport {IInitializableBToken} from '../../interfaces/IInitializableBToken.sol';\\r\\nimport {ScaledBalanceTokenBase} from './base/ScaledBalanceTokenBase.sol';\\r\\nimport {IncentivizedERC20} from './base/IncentivizedERC20.sol';\\r\\nimport {EIP712Base} from './base/EIP712Base.sol';\\r\\n\\r\\n/**\\r\\n * @title Aave ERC20 BToken\\r\\n * @author Aave\\r\\n * @notice Implementation of the interest bearing token for the Aave protocol\\r\\n */\\r\\ncontract BToken is VersionedInitializable, ScaledBalanceTokenBase, EIP712Base, IBToken {\\r\\n  using WadRayMath for uint256;\\r\\n  using SafeCast for uint256;\\r\\n  using GPv2SafeERC20 for IERC20;\\r\\n\\r\\n  bytes32 public constant PERMIT_TYPEHASH =\\r\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\r\\n\\r\\n  uint256 public constant BTOKEN_REVISION = 0x1;\\r\\n\\r\\n  address internal _treasury;\\r\\n  address internal _underlyingAsset;\\r\\n\\r\\n  /// @inheritdoc VersionedInitializable\\r\\n  function getRevision() internal pure virtual override returns (uint256) {\\r\\n    return BTOKEN_REVISION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Constructor.\\r\\n   * @param pool The address of the Pool contract\\r\\n   */\\r\\n  constructor(\\r\\n    IPool pool\\r\\n  ) ScaledBalanceTokenBase(pool, 'BTOKEN_IMPL', 'BTOKEN_IMPL', 0) EIP712Base() {\\r\\n    // Intentionally left blank\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IInitializableBToken\\r\\n  function initialize(\\r\\n    IPool initializingPool,\\r\\n    address treasury,\\r\\n    address underlyingAsset,\\r\\n    IIncentivesController incentivesController,\\r\\n    uint8 bTokenDecimals,\\r\\n    string calldata bTokenName,\\r\\n    string calldata bTokenSymbol,\\r\\n    bytes calldata params\\r\\n  ) public virtual override initializer {\\r\\n    require(initializingPool == POOL, Errors.POOL_ADDRESSES_DO_NOT_MATCH);\\r\\n    _setName(bTokenName);\\r\\n    _setSymbol(bTokenSymbol);\\r\\n    _setDecimals(bTokenDecimals);\\r\\n\\r\\n    _treasury = treasury;\\r\\n    _underlyingAsset = underlyingAsset;\\r\\n    _incentivesController = incentivesController;\\r\\n\\r\\n    _domainSeparator = _calculateDomainSeparator();\\r\\n\\r\\n    emit Initialized(\\r\\n      underlyingAsset,\\r\\n      address(POOL),\\r\\n      treasury,\\r\\n      address(incentivesController),\\r\\n      bTokenDecimals,\\r\\n      bTokenName,\\r\\n      bTokenSymbol,\\r\\n      params\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IBToken\\r\\n  function mint(\\r\\n    address caller,\\r\\n    address onBehalfOf,\\r\\n    uint256 amount,\\r\\n    uint256 index\\r\\n  ) external virtual override onlyPool returns (bool) {\\r\\n    return _mintScaled(caller, onBehalfOf, amount, index);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IBToken\\r\\n  function burn(\\r\\n    address from,\\r\\n    address receiverOfUnderlying,\\r\\n    uint256 amount,\\r\\n    uint256 index\\r\\n  ) external virtual override onlyPool {\\r\\n    _burnScaled(from, receiverOfUnderlying, amount, index);\\r\\n    if (receiverOfUnderlying != address(this)) {\\r\\n      IERC20(_underlyingAsset).safeTransfer(receiverOfUnderlying, amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IBToken\\r\\n  function mintToTreasury(uint256 amount, uint256 index) external virtual override onlyPool {\\r\\n    if (amount == 0) {\\r\\n      return;\\r\\n    }\\r\\n    _mintScaled(address(POOL), _treasury, amount, index);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IBToken\\r\\n  function transferOnLiquidation(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) external virtual override onlyPool {\\r\\n    // Being a normal transfer, the Transfer() and BalanceTransfer() are emitted\\r\\n    // so no need to emit a specific event here\\r\\n    _transfer(from, to, value, false);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IERC20\\r\\n  function balanceOf(\\r\\n    address user\\r\\n  ) public view virtual override(IncentivizedERC20, IERC20) returns (uint256) {\\r\\n    return super.balanceOf(user).rayMul(POOL.getReserveNormalizedIncome(_underlyingAsset));\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IERC20\\r\\n  function totalSupply() public view virtual override(IncentivizedERC20, IERC20) returns (uint256) {\\r\\n    uint256 currentSupplyScaled = super.totalSupply();\\r\\n\\r\\n    if (currentSupplyScaled == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    return currentSupplyScaled.rayMul(POOL.getReserveNormalizedIncome(_underlyingAsset));\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IBToken\\r\\n  function RESERVE_TREASURY_ADDRESS() external view override returns (address) {\\r\\n    return _treasury;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IBToken\\r\\n  function UNDERLYING_ASSET_ADDRESS() external view override returns (address) {\\r\\n    return _underlyingAsset;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IBToken\\r\\n  function transferUnderlyingTo(address target, uint256 amount) external virtual override onlyPool {\\r\\n    IERC20(_underlyingAsset).safeTransfer(target, amount);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IBToken\\r\\n  function handleRepayment(\\r\\n    address user,\\r\\n    address onBehalfOf,\\r\\n    uint256 amount\\r\\n  ) external virtual override onlyPool {\\r\\n    // Intentionally left blank\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IBToken\\r\\n  function permit(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 value,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external override {\\r\\n    require(owner != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\r\\n    //solium-disable-next-line\\r\\n    require(block.timestamp <= deadline, Errors.INVALID_EXPIRATION);\\r\\n    uint256 currentValidNonce = _nonces[owner];\\r\\n    bytes32 digest = keccak256(\\r\\n      abi.encodePacked(\\r\\n        '\\\\x19\\\\x01',\\r\\n        DOMAIN_SEPARATOR(),\\r\\n        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\r\\n      )\\r\\n    );\\r\\n    require(owner == ecrecover(digest, v, r, s), Errors.INVALID_SIGNATURE);\\r\\n    _nonces[owner] = currentValidNonce + 1;\\r\\n    _approve(owner, spender, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers the bTokens between two users. Validates the transfer\\r\\n   * (ie checks for valid HF after the transfer) if required\\r\\n   * @param from The source address\\r\\n   * @param to The destination address\\r\\n   * @param amount The amount getting transferred\\r\\n   * @param validate True if the transfer needs to be validated, false otherwise\\r\\n   */\\r\\n  function _transfer(address from, address to, uint256 amount, bool validate) internal virtual {\\r\\n    address underlyingAsset = _underlyingAsset;\\r\\n\\r\\n    uint256 index = POOL.getReserveNormalizedIncome(underlyingAsset);\\r\\n\\r\\n    uint256 fromBalanceBefore = super.balanceOf(from).rayMul(index);\\r\\n    uint256 toBalanceBefore = super.balanceOf(to).rayMul(index);\\r\\n\\r\\n    super._transfer(from, to, amount, index);\\r\\n\\r\\n    if (validate) {\\r\\n      POOL.finalizeTransfer(underlyingAsset, from, to, amount, fromBalanceBefore, toBalanceBefore);\\r\\n    }\\r\\n\\r\\n    emit BalanceTransfer(from, to, amount.rayDiv(index), index);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Overrides the parent _transfer to force validated transfer() and transferFrom()\\r\\n   * @param from The source address\\r\\n   * @param to The destination address\\r\\n   * @param amount The amount getting transferred\\r\\n   */\\r\\n  function _transfer(address from, address to, uint128 amount) internal virtual override {\\r\\n    _transfer(from, to, amount, true);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Overrides the base function to fully implement IBToken\\r\\n   * @dev see `EIP712Base.DOMAIN_SEPARATOR()` for more detailed documentation\\r\\n   */\\r\\n  function DOMAIN_SEPARATOR() public view override(IBToken, EIP712Base) returns (bytes32) {\\r\\n    return super.DOMAIN_SEPARATOR();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Overrides the base function to fully implement IBToken\\r\\n   * @dev see `EIP712Base.nonces()` for more detailed documentation\\r\\n   */\\r\\n  function nonces(address owner) public view override(IBToken, EIP712Base) returns (uint256) {\\r\\n    return super.nonces(owner);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc EIP712Base\\r\\n  function _EIP712BaseId() internal view override returns (string memory) {\\r\\n    return name();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IBToken\\r\\n  function rescueTokens(address token, address to, uint256 amount) external override onlyPoolAdmin {\\r\\n    require(token != _underlyingAsset, Errors.UNDERLYING_CANNOT_BE_RESCUED);\\r\\n    IERC20(token).safeTransfer(to, amount);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xd34cb02935f39d14f37234bb1907608082153e9198f4599726b831feb49a7289\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/tokenization/base/EIP712Base.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @title EIP712Base\\r\\n * @author Aave\\r\\n * @notice Base contract implementation of EIP712.\\r\\n */\\r\\nabstract contract EIP712Base {\\r\\n  bytes public constant EIP712_REVISION = bytes('1');\\r\\n  bytes32 internal constant EIP712_DOMAIN =\\r\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\r\\n\\r\\n  // Map of address nonces (address => nonce)\\r\\n  mapping(address => uint256) internal _nonces;\\r\\n\\r\\n  bytes32 internal _domainSeparator;\\r\\n  uint256 internal immutable _chainId;\\r\\n\\r\\n  /**\\r\\n   * @dev Constructor.\\r\\n   */\\r\\n  constructor() {\\r\\n    _chainId = block.chainid;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Get the domain separator for the token\\r\\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\r\\n   * @return The domain separator of the token at current chain\\r\\n   */\\r\\n  function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\r\\n    if (block.chainid == _chainId) {\\r\\n      return _domainSeparator;\\r\\n    }\\r\\n    return _calculateDomainSeparator();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the nonce value for address specified as parameter\\r\\n   * @param owner The address for which the nonce is being returned\\r\\n   * @return The nonce value for the input address`\\r\\n   */\\r\\n  function nonces(address owner) public view virtual returns (uint256) {\\r\\n    return _nonces[owner];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Compute the current domain separator\\r\\n   * @return The domain separator for the token\\r\\n   */\\r\\n  function _calculateDomainSeparator() internal view returns (bytes32) {\\r\\n    return\\r\\n      keccak256(\\r\\n        abi.encode(\\r\\n          EIP712_DOMAIN,\\r\\n          keccak256(bytes(_EIP712BaseId())),\\r\\n          keccak256(EIP712_REVISION),\\r\\n          block.chainid,\\r\\n          address(this)\\r\\n        )\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the user readable name of signing domain (e.g. token name)\\r\\n   * @return The name of the signing domain\\r\\n   */\\r\\n  function _EIP712BaseId() internal view virtual returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x1d367909141cf1c6f103d69837ebd94013cd0f34a206cdb7692d4da3cdce60a3\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/tokenization/base/IncentivizedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {Context} from '../../../dependencies/openzeppelin/contracts/Context.sol';\\r\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\r\\nimport {IERC20Detailed} from '../../../dependencies/openzeppelin/contracts/IERC20Detailed.sol';\\r\\nimport {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';\\r\\nimport {WadRayMath} from '../../libraries/math/WadRayMath.sol';\\r\\nimport {Errors} from '../../libraries/helpers/Errors.sol';\\r\\nimport {IIncentivesController} from '../../../interfaces/IIncentivesController.sol';\\r\\nimport {IPoolAddressesProvider} from '../../../interfaces/IPoolAddressesProvider.sol';\\r\\nimport {IPool} from '../../../interfaces/IPool.sol';\\r\\nimport {IACLManager} from '../../../interfaces/IACLManager.sol';\\r\\n\\r\\n/**\\r\\n * @title IncentivizedERC20\\r\\n * @author Aave, inspired by the Openzeppelin ERC20 implementation\\r\\n * @notice Basic ERC20 implementation\\r\\n */\\r\\nabstract contract IncentivizedERC20 is Context, IERC20Detailed {\\r\\n  using WadRayMath for uint256;\\r\\n  using SafeCast for uint256;\\r\\n\\r\\n  /**\\r\\n   * @dev Only pool admin can call functions marked by this modifier.\\r\\n   */\\r\\n  modifier onlyPoolAdmin() {\\r\\n    IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());\\r\\n    require(aclManager.isPoolAdmin(msg.sender), Errors.CALLER_NOT_POOL_ADMIN);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Only pool can call functions marked by this modifier.\\r\\n   */\\r\\n  modifier onlyPool() {\\r\\n    require(_msgSender() == address(POOL), Errors.CALLER_MUST_BE_POOL);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev UserState - additionalData is a flexible field.\\r\\n   * BTokens and VariableDebtTokens use this field store the index of the\\r\\n   * user's last supply/withdrawal/borrow/repayment. StableDebtTokens use\\r\\n   * this field to store the user's stable rate.\\r\\n   */\\r\\n  struct UserState {\\r\\n    uint128 balance;\\r\\n    uint128 additionalData;\\r\\n  }\\r\\n  // Map of users address and their state data (userAddress => userStateData)\\r\\n  mapping(address => UserState) internal _userState;\\r\\n\\r\\n  // Map of allowances (delegator => delegatee => allowanceAmount)\\r\\n  mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n  uint256 internal _totalSupply;\\r\\n  string private _name;\\r\\n  string private _symbol;\\r\\n  uint8 private _decimals;\\r\\n  IIncentivesController internal _incentivesController;\\r\\n  IPoolAddressesProvider internal immutable _addressesProvider;\\r\\n  IPool public immutable POOL;\\r\\n\\r\\n  /**\\r\\n   * @dev Constructor.\\r\\n   * @param pool The reference to the main Pool contract\\r\\n   * @param name The name of the token\\r\\n   * @param symbol The symbol of the token\\r\\n   * @param decimals The number of decimals of the token\\r\\n   */\\r\\n  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals) {\\r\\n    _addressesProvider = pool.ADDRESSES_PROVIDER();\\r\\n    _name = name;\\r\\n    _symbol = symbol;\\r\\n    _decimals = decimals;\\r\\n    POOL = pool;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IERC20Detailed\\r\\n  function name() public view override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IERC20Detailed\\r\\n  function symbol() external view override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IERC20Detailed\\r\\n  function decimals() external view override returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IERC20\\r\\n  function totalSupply() public view virtual override returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IERC20\\r\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n    return _userState[account].balance;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the Incentives Controller contract\\r\\n   * @return The address of the Incentives Controller\\r\\n   */\\r\\n  function getIncentivesController() external view virtual returns (IIncentivesController) {\\r\\n    return _incentivesController;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets a new Incentives Controller\\r\\n   * @param controller the new Incentives controller\\r\\n   */\\r\\n  function setIncentivesController(IIncentivesController controller) external onlyPoolAdmin {\\r\\n    _incentivesController = controller;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IERC20\\r\\n  function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\\r\\n    uint128 castAmount = amount.toUint128();\\r\\n    _transfer(_msgSender(), recipient, castAmount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IERC20\\r\\n  function allowance(\\r\\n    address owner,\\r\\n    address spender\\r\\n  ) external view virtual override returns (uint256) {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IERC20\\r\\n  function approve(address spender, uint256 amount) external virtual override returns (bool) {\\r\\n    _approve(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IERC20\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external virtual override returns (bool) {\\r\\n    uint128 castAmount = amount.toUint128();\\r\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - castAmount);\\r\\n    _transfer(sender, recipient, castAmount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Increases the allowance of spender to spend _msgSender() tokens\\r\\n   * @param spender The user allowed to spend on behalf of _msgSender()\\r\\n   * @param addedValue The amount being added to the allowance\\r\\n   * @return `true`\\r\\n   */\\r\\n  function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Decreases the allowance of spender to spend _msgSender() tokens\\r\\n   * @param spender The user allowed to spend on behalf of _msgSender()\\r\\n   * @param subtractedValue The amount being subtracted to the allowance\\r\\n   * @return `true`\\r\\n   */\\r\\n  function decreaseAllowance(\\r\\n    address spender,\\r\\n    uint256 subtractedValue\\r\\n  ) external virtual returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers tokens between two users and apply incentives if defined.\\r\\n   * @param sender The source address\\r\\n   * @param recipient The destination address\\r\\n   * @param amount The amount getting transferred\\r\\n   */\\r\\n  function _transfer(address sender, address recipient, uint128 amount) internal virtual {\\r\\n    uint128 oldSenderBalance = _userState[sender].balance;\\r\\n    _userState[sender].balance = oldSenderBalance - amount;\\r\\n    uint128 oldRecipientBalance = _userState[recipient].balance;\\r\\n    _userState[recipient].balance = oldRecipientBalance + amount;\\r\\n\\r\\n    IIncentivesController incentivesControllerLocal = _incentivesController;\\r\\n    if (address(incentivesControllerLocal) != address(0)) {\\r\\n      uint256 currentTotalSupply = _totalSupply;\\r\\n      incentivesControllerLocal.handleAction(sender, currentTotalSupply, oldSenderBalance);\\r\\n      if (sender != recipient) {\\r\\n        incentivesControllerLocal.handleAction(recipient, currentTotalSupply, oldRecipientBalance);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Approve `spender` to use `amount` of `owner`s balance\\r\\n   * @param owner The address owning the tokens\\r\\n   * @param spender The address approved for spending\\r\\n   * @param amount The amount of tokens to approve spending of\\r\\n   */\\r\\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Update the name of the token\\r\\n   * @param newName The new name for the token\\r\\n   */\\r\\n  function _setName(string memory newName) internal {\\r\\n    _name = newName;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Update the symbol for the token\\r\\n   * @param newSymbol The new symbol for the token\\r\\n   */\\r\\n  function _setSymbol(string memory newSymbol) internal {\\r\\n    _symbol = newSymbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Update the number of decimals for the token\\r\\n   * @param newDecimals The new number of decimals for the token\\r\\n   */\\r\\n  function _setDecimals(uint8 newDecimals) internal {\\r\\n    _decimals = newDecimals;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x02bc5d7e34c807ea8c7397ef36da79be804e912f9c12103adb0355c8922d9e14\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/tokenization/base/MintableIncentivizedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {IIncentivesController} from '../../../interfaces/IIncentivesController.sol';\\r\\nimport {IPool} from '../../../interfaces/IPool.sol';\\r\\nimport {IncentivizedERC20} from './IncentivizedERC20.sol';\\r\\n\\r\\n/**\\r\\n * @title MintableIncentivizedERC20\\r\\n * @author Aave\\r\\n * @notice Implements mint and burn functions for IncentivizedERC20\\r\\n */\\r\\nabstract contract MintableIncentivizedERC20 is IncentivizedERC20 {\\r\\n  /**\\r\\n   * @dev Constructor.\\r\\n   * @param pool The reference to the main Pool contract\\r\\n   * @param name The name of the token\\r\\n   * @param symbol The symbol of the token\\r\\n   * @param decimals The number of decimals of the token\\r\\n   */\\r\\n  constructor(\\r\\n    IPool pool,\\r\\n    string memory name,\\r\\n    string memory symbol,\\r\\n    uint8 decimals\\r\\n  ) IncentivizedERC20(pool, name, symbol, decimals) {\\r\\n    // Intentionally left blank\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Mints tokens to an account and apply incentives if defined\\r\\n   * @param account The address receiving tokens\\r\\n   * @param amount The amount of tokens to mint\\r\\n   */\\r\\n  function _mint(address account, uint128 amount) internal virtual {\\r\\n    uint256 oldTotalSupply = _totalSupply;\\r\\n    _totalSupply = oldTotalSupply + amount;\\r\\n\\r\\n    uint128 oldAccountBalance = _userState[account].balance;\\r\\n    _userState[account].balance = oldAccountBalance + amount;\\r\\n\\r\\n    IIncentivesController incentivesControllerLocal = _incentivesController;\\r\\n    if (address(incentivesControllerLocal) != address(0)) {\\r\\n      incentivesControllerLocal.handleAction(account, oldTotalSupply, oldAccountBalance);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Burns tokens from an account and apply incentives if defined\\r\\n   * @param account The account whose tokens are burnt\\r\\n   * @param amount The amount of tokens to burn\\r\\n   */\\r\\n  function _burn(address account, uint128 amount) internal virtual {\\r\\n    uint256 oldTotalSupply = _totalSupply;\\r\\n    _totalSupply = oldTotalSupply - amount;\\r\\n\\r\\n    uint128 oldAccountBalance = _userState[account].balance;\\r\\n    _userState[account].balance = oldAccountBalance - amount;\\r\\n\\r\\n    IIncentivesController incentivesControllerLocal = _incentivesController;\\r\\n\\r\\n    if (address(incentivesControllerLocal) != address(0)) {\\r\\n      incentivesControllerLocal.handleAction(account, oldTotalSupply, oldAccountBalance);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe3d8c5ddc85b2eb8d1f103fae0f189bff840de90dc4ee4bb85dfea991d89e61\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/tokenization/base/ScaledBalanceTokenBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';\\r\\nimport {Errors} from '../../libraries/helpers/Errors.sol';\\r\\nimport {WadRayMath} from '../../libraries/math/WadRayMath.sol';\\r\\nimport {IPool} from '../../../interfaces/IPool.sol';\\r\\nimport {IScaledBalanceToken} from '../../../interfaces/IScaledBalanceToken.sol';\\r\\nimport {MintableIncentivizedERC20} from './MintableIncentivizedERC20.sol';\\r\\n\\r\\n/**\\r\\n * @title ScaledBalanceTokenBase\\r\\n * @author Aave\\r\\n * @notice Basic ERC20 implementation of scaled balance token\\r\\n */\\r\\nabstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBalanceToken {\\r\\n  using WadRayMath for uint256;\\r\\n  using SafeCast for uint256;\\r\\n\\r\\n  /**\\r\\n   * @dev Constructor.\\r\\n   * @param pool The reference to the main Pool contract\\r\\n   * @param name The name of the token\\r\\n   * @param symbol The symbol of the token\\r\\n   * @param decimals The number of decimals of the token\\r\\n   */\\r\\n  constructor(\\r\\n    IPool pool,\\r\\n    string memory name,\\r\\n    string memory symbol,\\r\\n    uint8 decimals\\r\\n  ) MintableIncentivizedERC20(pool, name, symbol, decimals) {\\r\\n    // Intentionally left blank\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IScaledBalanceToken\\r\\n  function scaledBalanceOf(address user) external view override returns (uint256) {\\r\\n    return super.balanceOf(user);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IScaledBalanceToken\\r\\n  function getScaledUserBalanceAndSupply(\\r\\n    address user\\r\\n  ) external view override returns (uint256, uint256) {\\r\\n    return (super.balanceOf(user), super.totalSupply());\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IScaledBalanceToken\\r\\n  function scaledTotalSupply() public view virtual override returns (uint256) {\\r\\n    return super.totalSupply();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IScaledBalanceToken\\r\\n  function getPreviousIndex(address user) external view virtual override returns (uint256) {\\r\\n    return _userState[user].additionalData;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Implements the basic logic to mint a scaled balance token.\\r\\n   * @param caller The address performing the mint\\r\\n   * @param onBehalfOf The address of the user that will receive the scaled tokens\\r\\n   * @param amount The amount of tokens getting minted\\r\\n   * @param index The next liquidity index of the reserve\\r\\n   * @return `true` if the the previous balance of the user was 0\\r\\n   */\\r\\n  function _mintScaled(\\r\\n    address caller,\\r\\n    address onBehalfOf,\\r\\n    uint256 amount,\\r\\n    uint256 index\\r\\n  ) internal returns (bool) {\\r\\n    uint256 amountScaled = amount.rayDiv(index);\\r\\n    require(amountScaled != 0, Errors.INVALID_MINT_AMOUNT);\\r\\n\\r\\n    uint256 scaledBalance = super.balanceOf(onBehalfOf);\\r\\n    uint256 balanceIncrease = scaledBalance.rayMul(index) -\\r\\n      scaledBalance.rayMul(_userState[onBehalfOf].additionalData);\\r\\n\\r\\n    _userState[onBehalfOf].additionalData = index.toUint128();\\r\\n\\r\\n    _mint(onBehalfOf, amountScaled.toUint128());\\r\\n\\r\\n    uint256 amountToMint = amount + balanceIncrease;\\r\\n    emit Transfer(address(0), onBehalfOf, amountToMint);\\r\\n    emit Mint(caller, onBehalfOf, amountToMint, balanceIncrease, index);\\r\\n\\r\\n    return (scaledBalance == 0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Implements the basic logic to burn a scaled balance token.\\r\\n   * @dev In some instances, a burn transaction will emit a mint event\\r\\n   * if the amount to burn is less than the interest that the user accrued\\r\\n   * @param user The user which debt is burnt\\r\\n   * @param target The address that will receive the underlying, if any\\r\\n   * @param amount The amount getting burned\\r\\n   * @param index The variable debt index of the reserve\\r\\n   */\\r\\n  function _burnScaled(address user, address target, uint256 amount, uint256 index) internal {\\r\\n    uint256 amountScaled = amount.rayDiv(index);\\r\\n    require(amountScaled != 0, Errors.INVALID_BURN_AMOUNT);\\r\\n\\r\\n    uint256 scaledBalance = super.balanceOf(user);\\r\\n    uint256 balanceIncrease = scaledBalance.rayMul(index) -\\r\\n      scaledBalance.rayMul(_userState[user].additionalData);\\r\\n\\r\\n    _userState[user].additionalData = index.toUint128();\\r\\n\\r\\n    _burn(user, amountScaled.toUint128());\\r\\n\\r\\n    if (balanceIncrease > amount) {\\r\\n      uint256 amountToMint = balanceIncrease - amount;\\r\\n      emit Transfer(address(0), user, amountToMint);\\r\\n      emit Mint(user, user, amountToMint, balanceIncrease, index);\\r\\n    } else {\\r\\n      uint256 amountToBurn = amount - balanceIncrease;\\r\\n      emit Transfer(user, address(0), amountToBurn);\\r\\n      emit Burn(user, target, amountToBurn, balanceIncrease, index);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Implements the basic logic to transfer scaled balance tokens between two users\\r\\n   * @dev It emits a mint event with the interest accrued per user\\r\\n   * @param sender The source address\\r\\n   * @param recipient The destination address\\r\\n   * @param amount The amount getting transferred\\r\\n   * @param index The next liquidity index of the reserve\\r\\n   */\\r\\n  function _transfer(address sender, address recipient, uint256 amount, uint256 index) internal {\\r\\n    uint256 senderScaledBalance = super.balanceOf(sender);\\r\\n    uint256 senderBalanceIncrease = senderScaledBalance.rayMul(index) -\\r\\n      senderScaledBalance.rayMul(_userState[sender].additionalData);\\r\\n\\r\\n    uint256 recipientScaledBalance = super.balanceOf(recipient);\\r\\n    uint256 recipientBalanceIncrease = recipientScaledBalance.rayMul(index) -\\r\\n      recipientScaledBalance.rayMul(_userState[recipient].additionalData);\\r\\n\\r\\n    _userState[sender].additionalData = index.toUint128();\\r\\n    _userState[recipient].additionalData = index.toUint128();\\r\\n\\r\\n    super._transfer(sender, recipient, amount.rayDiv(index).toUint128());\\r\\n\\r\\n    if (senderBalanceIncrease > 0) {\\r\\n      emit Transfer(address(0), sender, senderBalanceIncrease);\\r\\n      emit Mint(_msgSender(), sender, senderBalanceIncrease, senderBalanceIncrease, index);\\r\\n    }\\r\\n\\r\\n    if (sender != recipient && recipientBalanceIncrease > 0) {\\r\\n      emit Transfer(address(0), recipient, recipientBalanceIncrease);\\r\\n      emit Mint(_msgSender(), recipient, recipientBalanceIncrease, recipientBalanceIncrease, index);\\r\\n    }\\r\\n\\r\\n    emit Transfer(sender, recipient, amount);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xac257c1adc7fa5cfb9a2705f5bb9c9f0a4cf11ef63fd9e9750081f67d1abca55\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Aave",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "BalanceTransfer(address,address,uint256,uint256)": {
        "details": "Emitted during the transfer action",
        "params": {
          "from": "The user whose tokens are being transferred",
          "index": "The next liquidity index of the reserve",
          "to": "The recipient",
          "value": "The scaled amount being transferred"
        }
      },
      "Burn(address,address,uint256,uint256,uint256)": {
        "details": "Emitted after the burn actionIf the burn function does not involve a transfer of the underlying asset, the target defaults to zero address",
        "params": {
          "balanceIncrease": "The increase in scaled-up balance since the last action of 'from'",
          "from": "The address from which the tokens will be burned",
          "index": "The next liquidity index of the reserve",
          "target": "The address that will receive the underlying, if any",
          "value": "The scaled-up amount being burned (user entered amount - balance increase from interest)"
        }
      },
      "Initialized(address,address,address,address,uint8,string,string,bytes)": {
        "details": "Emitted when an bToken is initialized",
        "params": {
          "bTokenDecimals": "The decimals of the underlying",
          "bTokenName": "The name of the bToken",
          "bTokenSymbol": "The symbol of the bToken",
          "incentivesController": "The address of the incentives controller for this bToken",
          "params": "A set of encoded parameters for additional initialization",
          "pool": "The address of the associated pool",
          "treasury": "The address of the treasury",
          "underlyingAsset": "The address of the underlying asset"
        }
      },
      "Mint(address,address,uint256,uint256,uint256)": {
        "details": "Emitted after the mint action",
        "params": {
          "balanceIncrease": "The increase in scaled-up balance since the last action of 'onBehalfOf'",
          "caller": "The address performing the mint",
          "index": "The next liquidity index of the reserve",
          "onBehalfOf": "The address of the user that will receive the minted tokens",
          "value": "The scaled-up amount being minted (based on user entered amount and balance increase from interest)"
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Overrides the base function to fully implement IBTokensee `EIP712Base.DOMAIN_SEPARATOR()` for more detailed documentation"
      },
      "RESERVE_TREASURY_ADDRESS()": {
        "returns": {
          "_0": "Address of the Aave treasury"
        }
      },
      "UNDERLYING_ASSET_ADDRESS()": {
        "returns": {
          "_0": "The address of the underlying asset"
        }
      },
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "burn(address,address,uint256,uint256)": {
        "details": "In some instances, the mint event could be emitted from a burn transaction if the amount to burn is less than the interest that the user accrued",
        "params": {
          "amount": "The amount being burned",
          "from": "The address from which the bTokens will be burned",
          "index": "The next liquidity index of the reserve",
          "receiverOfUnderlying": "The address that will receive the underlying"
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "pool": "The address of the Pool contract"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "params": {
          "spender": "The user allowed to spend on behalf of _msgSender()",
          "subtractedValue": "The amount being subtracted to the allowance"
        },
        "returns": {
          "_0": "`true`"
        }
      },
      "getIncentivesController()": {
        "returns": {
          "_0": "The address of the Incentives Controller"
        }
      },
      "getPreviousIndex(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The last index interest was accrued to the user's balance, expressed in ray"
        }
      },
      "getScaledUserBalanceAndSupply(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The scaled balance of the user",
          "_1": "The scaled total supply"
        }
      },
      "handleRepayment(address,address,uint256)": {
        "details": "The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the transfer is concluded. However in the future there may be bTokens that allow for example to stake the underlying to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.",
        "params": {
          "amount": "The amount getting repaid",
          "onBehalfOf": "The address of the user who will get his debt reduced/removed",
          "user": "The user executing the repayment"
        }
      },
      "increaseAllowance(address,uint256)": {
        "params": {
          "addedValue": "The amount being added to the allowance",
          "spender": "The user allowed to spend on behalf of _msgSender()"
        },
        "returns": {
          "_0": "`true`"
        }
      },
      "initialize(address,address,address,address,uint8,string,string,bytes)": {
        "params": {
          "bTokenDecimals": "The decimals of the bToken, same as the underlying asset's",
          "bTokenName": "The name of the bToken",
          "bTokenSymbol": "The symbol of the bToken",
          "incentivesController": "The smart contract managing potential incentives distribution",
          "params": "A set of encoded parameters for additional initialization",
          "pool": "The pool contract that is initializing this contract",
          "treasury": "The address of the Aave treasury, receiving the fees on this bToken",
          "underlyingAsset": "The address of the underlying asset of this bToken (E.g. WETH for aWETH)"
        }
      },
      "mint(address,address,uint256,uint256)": {
        "params": {
          "amount": "The amount of tokens getting minted",
          "caller": "The address performing the mint",
          "index": "The next liquidity index of the reserve",
          "onBehalfOf": "The address of the user that will receive the minted bTokens"
        },
        "returns": {
          "_0": "`true` if the the previous balance of the user was 0"
        }
      },
      "mintToTreasury(uint256,uint256)": {
        "params": {
          "amount": "The amount of tokens getting minted",
          "index": "The next liquidity index of the reserve"
        }
      },
      "nonces(address)": {
        "details": "Overrides the base function to fully implement IBTokensee `EIP712Base.nonces()` for more detailed documentation"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md",
        "params": {
          "deadline": "The deadline timestamp, type(uint256).max for max deadline",
          "owner": "The owner of the funds",
          "r": "Signature param",
          "s": "Signature param",
          "spender": "The spender",
          "v": "Signature param",
          "value": "The amount"
        }
      },
      "rescueTokens(address,address,uint256)": {
        "params": {
          "amount": "The amount of token to transfer",
          "to": "The address of the recipient",
          "token": "The address of the token"
        }
      },
      "scaledBalanceOf(address)": {
        "details": "The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index at the moment of the update",
        "params": {
          "user": "The user whose balance is calculated"
        },
        "returns": {
          "_0": "The scaled balance of the user"
        }
      },
      "scaledTotalSupply()": {
        "returns": {
          "_0": "The scaled total supply"
        }
      },
      "setIncentivesController(address)": {
        "params": {
          "controller": "the new Incentives controller"
        }
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferOnLiquidation(address,address,uint256)": {
        "params": {
          "from": "The address getting liquidated, current owner of the bTokens",
          "to": "The recipient",
          "value": "The amount of tokens getting transferred"
        }
      },
      "transferUnderlyingTo(address,uint256)": {
        "details": "Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()",
        "params": {
          "amount": "The amount getting transferred",
          "target": "The recipient of the underlying"
        }
      }
    },
    "title": "Aave ERC20 BToken",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "RESERVE_TREASURY_ADDRESS()": {
        "notice": "Returns the address of the Aave treasury, receiving the fees on this bToken."
      },
      "UNDERLYING_ASSET_ADDRESS()": {
        "notice": "Returns the address of the underlying asset of this bToken (E.g. WETH for aWETH)"
      },
      "burn(address,address,uint256,uint256)": {
        "notice": "Burns bTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Decreases the allowance of spender to spend _msgSender() tokens"
      },
      "getIncentivesController()": {
        "notice": "Returns the address of the Incentives Controller contract"
      },
      "getPreviousIndex(address)": {
        "notice": "Returns last index interest was accrued to the user's balance"
      },
      "getScaledUserBalanceAndSupply(address)": {
        "notice": "Returns the scaled balance of the user and the scaled total supply."
      },
      "handleRepayment(address,address,uint256)": {
        "notice": "Handles the underlying received by the bToken after the transfer has been completed."
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Increases the allowance of spender to spend _msgSender() tokens"
      },
      "initialize(address,address,address,address,uint8,string,string,bytes)": {
        "notice": "Initializes the bToken"
      },
      "mint(address,address,uint256,uint256)": {
        "notice": "Mints `amount` bTokens to `user`"
      },
      "mintToTreasury(uint256,uint256)": {
        "notice": "Mints bTokens to the reserve treasury"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Allow passing a signed message to approve spending"
      },
      "rescueTokens(address,address,uint256)": {
        "notice": "Rescue and transfer tokens locked in this contract"
      },
      "scaledBalanceOf(address)": {
        "notice": "Returns the scaled balance of the user."
      },
      "scaledTotalSupply()": {
        "notice": "Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)"
      },
      "setIncentivesController(address)": {
        "notice": "Sets a new Incentives Controller"
      },
      "transferOnLiquidation(address,address,uint256)": {
        "notice": "Transfers bTokens in the event of a borrow being liquidated, in case the liquidators reclaims the bToken"
      },
      "transferUnderlyingTo(address,uint256)": {
        "notice": "Transfers the underlying asset to `target`."
      }
    },
    "notice": "Implementation of the interest bearing token for the Aave protocol",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 36854,
        "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 36857,
        "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
        "label": "initializing",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 36927,
        "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
        "label": "______gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 43559,
        "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
        "label": "_userState",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_struct(UserState)43554_storage)"
      },
      {
        "astId": 43565,
        "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 43567,
        "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 43569,
        "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
        "label": "_name",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 43571,
        "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "56",
        "type": "t_string_storage"
      },
      {
        "astId": 43573,
        "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
        "label": "_decimals",
        "offset": 0,
        "slot": "57",
        "type": "t_uint8"
      },
      {
        "astId": 43576,
        "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
        "label": "_incentivesController",
        "offset": 1,
        "slot": "57",
        "type": "t_contract(IIncentivesController)4176"
      },
      {
        "astId": 43392,
        "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
        "label": "_nonces",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 43394,
        "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
        "label": "_domainSeparator",
        "offset": 0,
        "slot": "59",
        "type": "t_bytes32"
      },
      {
        "astId": 41044,
        "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
        "label": "_treasury",
        "offset": 0,
        "slot": "60",
        "type": "t_address"
      },
      {
        "astId": 41046,
        "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
        "label": "_underlyingAsset",
        "offset": 0,
        "slot": "61",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IIncentivesController)4176": {
        "encoding": "inplace",
        "label": "contract IIncentivesController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserState)43554_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IncentivizedERC20.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)43554_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(UserState)43554_storage": {
        "encoding": "inplace",
        "label": "struct IncentivizedERC20.UserState",
        "members": [
          {
            "astId": 43551,
            "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 43553,
            "contract": "contracts/protocol/tokenization/BToken.sol:BToken",
            "label": "additionalData",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Protocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Protocol must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Protocol", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get_in_block("Protocol", id));
  }

  static load(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get("Protocol", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pools(): PoolLoader {
    return new PoolLoader("Protocol", this.get("id")!.toString(), "pools");
  }
}

export class ContractToPoolMapping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ContractToPoolMapping entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContractToPoolMapping must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ContractToPoolMapping", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ContractToPoolMapping | null {
    return changetype<ContractToPoolMapping | null>(
      store.get_in_block("ContractToPoolMapping", id),
    );
  }

  static load(id: string): ContractToPoolMapping | null {
    return changetype<ContractToPoolMapping | null>(
      store.get("ContractToPoolMapping", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Pool | null {
    return changetype<Pool | null>(store.get_in_block("Pool", id));
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get addressProviderId(): BigInt {
    let value = this.get("addressProviderId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set addressProviderId(value: BigInt) {
    this.set("addressProviderId", Value.fromBigInt(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get pool(): Bytes | null {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes | null) {
    if (!value) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromBytes(<Bytes>value));
    }
  }

  get poolCollateralManager(): Bytes | null {
    let value = this.get("poolCollateralManager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set poolCollateralManager(value: Bytes | null) {
    if (!value) {
      this.unset("poolCollateralManager");
    } else {
      this.set("poolCollateralManager", Value.fromBytes(<Bytes>value));
    }
  }

  get poolConfiguratorImpl(): Bytes | null {
    let value = this.get("poolConfiguratorImpl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set poolConfiguratorImpl(value: Bytes | null) {
    if (!value) {
      this.unset("poolConfiguratorImpl");
    } else {
      this.set("poolConfiguratorImpl", Value.fromBytes(<Bytes>value));
    }
  }

  get poolImpl(): Bytes | null {
    let value = this.get("poolImpl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set poolImpl(value: Bytes | null) {
    if (!value) {
      this.unset("poolImpl");
    } else {
      this.set("poolImpl", Value.fromBytes(<Bytes>value));
    }
  }

  get poolDataProviderImpl(): Bytes | null {
    let value = this.get("poolDataProviderImpl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set poolDataProviderImpl(value: Bytes | null) {
    if (!value) {
      this.unset("poolDataProviderImpl");
    } else {
      this.set("poolDataProviderImpl", Value.fromBytes(<Bytes>value));
    }
  }

  get poolConfigurator(): Bytes | null {
    let value = this.get("poolConfigurator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set poolConfigurator(value: Bytes | null) {
    if (!value) {
      this.unset("poolConfigurator");
    } else {
      this.set("poolConfigurator", Value.fromBytes(<Bytes>value));
    }
  }

  get proxyPriceProvider(): Bytes | null {
    let value = this.get("proxyPriceProvider");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proxyPriceProvider(value: Bytes | null) {
    if (!value) {
      this.unset("proxyPriceProvider");
    } else {
      this.set("proxyPriceProvider", Value.fromBytes(<Bytes>value));
    }
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }

  get bridgeProtocolFee(): BigInt | null {
    let value = this.get("bridgeProtocolFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bridgeProtocolFee(value: BigInt | null) {
    if (!value) {
      this.unset("bridgeProtocolFee");
    } else {
      this.set("bridgeProtocolFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get flashloanPremiumTotal(): BigInt | null {
    let value = this.get("flashloanPremiumTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set flashloanPremiumTotal(value: BigInt | null) {
    if (!value) {
      this.unset("flashloanPremiumTotal");
    } else {
      this.set("flashloanPremiumTotal", Value.fromBigInt(<BigInt>value));
    }
  }

  get flashloanPremiumToProtocol(): BigInt | null {
    let value = this.get("flashloanPremiumToProtocol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set flashloanPremiumToProtocol(value: BigInt | null) {
    if (!value) {
      this.unset("flashloanPremiumToProtocol");
    } else {
      this.set("flashloanPremiumToProtocol", Value.fromBigInt(<BigInt>value));
    }
  }

  get reserves(): ReserveLoader {
    return new ReserveLoader("Pool", this.get("id")!.toString(), "reserves");
  }

  get supplyHistory(): SupplyLoader {
    return new SupplyLoader(
      "Pool",
      this.get("id")!.toString(),
      "supplyHistory",
    );
  }

  get mintUnbackedHistory(): MintUnbackedLoader {
    return new MintUnbackedLoader(
      "Pool",
      this.get("id")!.toString(),
      "mintUnbackedHistory",
    );
  }

  get backUnbackedHistory(): BackUnbackedLoader {
    return new BackUnbackedLoader(
      "Pool",
      this.get("id")!.toString(),
      "backUnbackedHistory",
    );
  }

  get mintedToTreasuryHistory(): MintedToTreasuryLoader {
    return new MintedToTreasuryLoader(
      "Pool",
      this.get("id")!.toString(),
      "mintedToTreasuryHistory",
    );
  }

  get isolationModeTotalDebtUpdatedHistory(): IsolationModeTotalDebtUpdatedLoader {
    return new IsolationModeTotalDebtUpdatedLoader(
      "Pool",
      this.get("id")!.toString(),
      "isolationModeTotalDebtUpdatedHistory",
    );
  }

  get redeemUnderlyingHistory(): RedeemUnderlyingLoader {
    return new RedeemUnderlyingLoader(
      "Pool",
      this.get("id")!.toString(),
      "redeemUnderlyingHistory",
    );
  }

  get borrowHistory(): BorrowLoader {
    return new BorrowLoader(
      "Pool",
      this.get("id")!.toString(),
      "borrowHistory",
    );
  }

  get swapHistory(): SwapBorrowRateLoader {
    return new SwapBorrowRateLoader(
      "Pool",
      this.get("id")!.toString(),
      "swapHistory",
    );
  }

  get usageAsCollateralHistory(): UsageAsCollateralLoader {
    return new UsageAsCollateralLoader(
      "Pool",
      this.get("id")!.toString(),
      "usageAsCollateralHistory",
    );
  }

  get rebalanceStableBorrowRateHistory(): RebalanceStableBorrowRateLoader {
    return new RebalanceStableBorrowRateLoader(
      "Pool",
      this.get("id")!.toString(),
      "rebalanceStableBorrowRateHistory",
    );
  }

  get repayHistory(): RepayLoader {
    return new RepayLoader("Pool", this.get("id")!.toString(), "repayHistory");
  }

  get flashLoanHistory(): FlashLoanLoader {
    return new FlashLoanLoader(
      "Pool",
      this.get("id")!.toString(),
      "flashLoanHistory",
    );
  }

  get liquidationCallHistory(): LiquidationCallLoader {
    return new LiquidationCallLoader(
      "Pool",
      this.get("id")!.toString(),
      "liquidationCallHistory",
    );
  }

  get active(): boolean {
    let value = this.get("active");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get paused(): boolean {
    let value = this.get("paused");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set paused(value: boolean) {
    this.set("paused", Value.fromBoolean(value));
  }
}

export class PriceHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PriceHistoryItem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PriceHistoryItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PriceHistoryItem", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PriceHistoryItem | null {
    return changetype<PriceHistoryItem | null>(
      store.get_in_block("PriceHistoryItem", id),
    );
  }

  static load(id: string): PriceHistoryItem | null {
    return changetype<PriceHistoryItem | null>(
      store.get("PriceHistoryItem", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class UsdEthPriceHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UsdEthPriceHistoryItem entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UsdEthPriceHistoryItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UsdEthPriceHistoryItem", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UsdEthPriceHistoryItem | null {
    return changetype<UsdEthPriceHistoryItem | null>(
      store.get_in_block("UsdEthPriceHistoryItem", id),
    );
  }

  static load(id: string): UsdEthPriceHistoryItem | null {
    return changetype<UsdEthPriceHistoryItem | null>(
      store.get("UsdEthPriceHistoryItem", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oracle(): string {
    let value = this.get("oracle");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set oracle(value: string) {
    this.set("oracle", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class ChainlinkAggregator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ChainlinkAggregator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ChainlinkAggregator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ChainlinkAggregator", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ChainlinkAggregator | null {
    return changetype<ChainlinkAggregator | null>(
      store.get_in_block("ChainlinkAggregator", id),
    );
  }

  static load(id: string): ChainlinkAggregator | null {
    return changetype<ChainlinkAggregator | null>(
      store.get("ChainlinkAggregator", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oracleAsset(): string {
    let value = this.get("oracleAsset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set oracleAsset(value: string) {
    this.set("oracleAsset", Value.fromString(value));
  }
}

export class PriceOracleAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PriceOracleAsset entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PriceOracleAsset must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PriceOracleAsset", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PriceOracleAsset | null {
    return changetype<PriceOracleAsset | null>(
      store.get_in_block("PriceOracleAsset", id),
    );
  }

  static load(id: string): PriceOracleAsset | null {
    return changetype<PriceOracleAsset | null>(
      store.get("PriceOracleAsset", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oracle(): string {
    let value = this.get("oracle");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set oracle(value: string) {
    this.set("oracle", Value.fromString(value));
  }

  get priceInEth(): BigInt {
    let value = this.get("priceInEth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set priceInEth(value: BigInt) {
    this.set("priceInEth", Value.fromBigInt(value));
  }

  get priceSource(): Bytes {
    let value = this.get("priceSource");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set priceSource(value: Bytes) {
    this.set("priceSource", Value.fromBytes(value));
  }

  get isFallbackRequired(): boolean {
    let value = this.get("isFallbackRequired");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isFallbackRequired(value: boolean) {
    this.set("isFallbackRequired", Value.fromBoolean(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get dependentAssets(): Array<string> {
    let value = this.get("dependentAssets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set dependentAssets(value: Array<string>) {
    this.set("dependentAssets", Value.fromStringArray(value));
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }

  get priceHistory(): PriceHistoryItemLoader {
    return new PriceHistoryItemLoader(
      "PriceOracleAsset",
      this.get("id")!.toString(),
      "priceHistory",
    );
  }

  get fromChainlinkSourcesRegistry(): boolean {
    let value = this.get("fromChainlinkSourcesRegistry");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set fromChainlinkSourcesRegistry(value: boolean) {
    this.set("fromChainlinkSourcesRegistry", Value.fromBoolean(value));
  }
}

export class PriceOracle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PriceOracle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PriceOracle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PriceOracle", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PriceOracle | null {
    return changetype<PriceOracle | null>(
      store.get_in_block("PriceOracle", id),
    );
  }

  static load(id: string): PriceOracle | null {
    return changetype<PriceOracle | null>(store.get("PriceOracle", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proxyPriceProvider(): Bytes {
    let value = this.get("proxyPriceProvider");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set proxyPriceProvider(value: Bytes) {
    this.set("proxyPriceProvider", Value.fromBytes(value));
  }

  get usdPriceEth(): BigInt {
    let value = this.get("usdPriceEth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdPriceEth(value: BigInt) {
    this.set("usdPriceEth", Value.fromBigInt(value));
  }

  get usdPriceEthMainSource(): Bytes {
    let value = this.get("usdPriceEthMainSource");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set usdPriceEthMainSource(value: Bytes) {
    this.set("usdPriceEthMainSource", Value.fromBytes(value));
  }

  get usdPriceEthFallbackRequired(): boolean {
    let value = this.get("usdPriceEthFallbackRequired");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set usdPriceEthFallbackRequired(value: boolean) {
    this.set("usdPriceEthFallbackRequired", Value.fromBoolean(value));
  }

  get usdDependentAssets(): Array<string> {
    let value = this.get("usdDependentAssets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set usdDependentAssets(value: Array<string>) {
    this.set("usdDependentAssets", Value.fromStringArray(value));
  }

  get fallbackPriceOracle(): Bytes {
    let value = this.get("fallbackPriceOracle");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set fallbackPriceOracle(value: Bytes) {
    this.set("fallbackPriceOracle", Value.fromBytes(value));
  }

  get tokens(): PriceOracleAssetLoader {
    return new PriceOracleAssetLoader(
      "PriceOracle",
      this.get("id")!.toString(),
      "tokens",
    );
  }

  get usdPriceEthHistory(): UsdEthPriceHistoryItemLoader {
    return new UsdEthPriceHistoryItemLoader(
      "PriceOracle",
      this.get("id")!.toString(),
      "usdPriceEthHistory",
    );
  }

  get tokensWithFallback(): Array<string> {
    let value = this.get("tokensWithFallback");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set tokensWithFallback(value: Array<string>) {
    this.set("tokensWithFallback", Value.fromStringArray(value));
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }

  get version(): i32 {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }

  get baseCurrency(): Bytes {
    let value = this.get("baseCurrency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set baseCurrency(value: Bytes) {
    this.set("baseCurrency", Value.fromBytes(value));
  }

  get baseCurrencyUnit(): BigInt {
    let value = this.get("baseCurrencyUnit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set baseCurrencyUnit(value: BigInt) {
    this.set("baseCurrencyUnit", Value.fromBigInt(value));
  }
}

export class SubToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SubToken", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SubToken | null {
    return changetype<SubToken | null>(store.get_in_block("SubToken", id));
  }

  static load(id: string): SubToken | null {
    return changetype<SubToken | null>(store.get("SubToken", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get tokenContractImpl(): Bytes | null {
    let value = this.get("tokenContractImpl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenContractImpl(value: Bytes | null) {
    if (!value) {
      this.unset("tokenContractImpl");
    } else {
      this.set("tokenContractImpl", Value.fromBytes(<Bytes>value));
    }
  }

  get underlyingAssetAddress(): Bytes {
    let value = this.get("underlyingAssetAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set underlyingAssetAddress(value: Bytes) {
    this.set("underlyingAssetAddress", Value.fromBytes(value));
  }

  get underlyingAssetDecimals(): i32 {
    let value = this.get("underlyingAssetDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set underlyingAssetDecimals(value: i32) {
    this.set("underlyingAssetDecimals", Value.fromI32(value));
  }

  get rewards(): RewardLoader {
    return new RewardLoader("SubToken", this.get("id")!.toString(), "rewards");
  }
}

export class Referrer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Referrer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Referrer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Referrer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Referrer | null {
    return changetype<Referrer | null>(store.get_in_block("Referrer", id));
  }

  static load(id: string): Referrer | null {
    return changetype<Referrer | null>(store.get("Referrer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get supplies(): SupplyLoader {
    return new SupplyLoader("Referrer", this.get("id")!.toString(), "supplies");
  }

  get borrows(): BorrowLoader {
    return new BorrowLoader("Referrer", this.get("id")!.toString(), "borrows");
  }
}

export class Supply extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Supply entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Supply must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Supply", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Supply | null {
    return changetype<Supply | null>(store.get_in_block("Supply", id));
  }

  static load(id: string): Supply | null {
    return changetype<Supply | null>(store.get("Supply", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get action(): string {
    let value = this.get("action");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get caller(): string {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set caller(value: string) {
    this.set("caller", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get referrer(): string | null {
    let value = this.get("referrer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set referrer(value: string | null) {
    if (!value) {
      this.unset("referrer");
    } else {
      this.set("referrer", Value.fromString(<string>value));
    }
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get assetPriceUSD(): BigDecimal {
    let value = this.get("assetPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set assetPriceUSD(value: BigDecimal) {
    this.set("assetPriceUSD", Value.fromBigDecimal(value));
  }
}

export class RedeemUnderlying extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RedeemUnderlying entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RedeemUnderlying must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RedeemUnderlying", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RedeemUnderlying | null {
    return changetype<RedeemUnderlying | null>(
      store.get_in_block("RedeemUnderlying", id),
    );
  }

  static load(id: string): RedeemUnderlying | null {
    return changetype<RedeemUnderlying | null>(
      store.get("RedeemUnderlying", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get action(): string {
    let value = this.get("action");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get assetPriceUSD(): BigDecimal {
    let value = this.get("assetPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set assetPriceUSD(value: BigDecimal) {
    this.set("assetPriceUSD", Value.fromBigDecimal(value));
  }
}

export class Borrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Borrow entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Borrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Borrow", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Borrow | null {
    return changetype<Borrow | null>(store.get_in_block("Borrow", id));
  }

  static load(id: string): Borrow | null {
    return changetype<Borrow | null>(store.get("Borrow", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get action(): string {
    let value = this.get("action");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get caller(): string {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set caller(value: string) {
    this.set("caller", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get borrowRate(): BigInt {
    let value = this.get("borrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set borrowRate(value: BigInt) {
    this.set("borrowRate", Value.fromBigInt(value));
  }

  get borrowRateMode(): i32 {
    let value = this.get("borrowRateMode");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowRateMode(value: i32) {
    this.set("borrowRateMode", Value.fromI32(value));
  }

  get referrer(): string | null {
    let value = this.get("referrer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set referrer(value: string | null) {
    if (!value) {
      this.unset("referrer");
    } else {
      this.set("referrer", Value.fromString(<string>value));
    }
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get stableTokenDebt(): BigInt {
    let value = this.get("stableTokenDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stableTokenDebt(value: BigInt) {
    this.set("stableTokenDebt", Value.fromBigInt(value));
  }

  get variableTokenDebt(): BigInt {
    let value = this.get("variableTokenDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set variableTokenDebt(value: BigInt) {
    this.set("variableTokenDebt", Value.fromBigInt(value));
  }

  get assetPriceUSD(): BigDecimal {
    let value = this.get("assetPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set assetPriceUSD(value: BigDecimal) {
    this.set("assetPriceUSD", Value.fromBigDecimal(value));
  }
}

export class SwapBorrowRate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapBorrowRate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SwapBorrowRate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SwapBorrowRate", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SwapBorrowRate | null {
    return changetype<SwapBorrowRate | null>(
      store.get_in_block("SwapBorrowRate", id),
    );
  }

  static load(id: string): SwapBorrowRate | null {
    return changetype<SwapBorrowRate | null>(store.get("SwapBorrowRate", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get action(): string {
    let value = this.get("action");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get borrowRateModeFrom(): i32 {
    let value = this.get("borrowRateModeFrom");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowRateModeFrom(value: i32) {
    this.set("borrowRateModeFrom", Value.fromI32(value));
  }

  get borrowRateModeTo(): i32 {
    let value = this.get("borrowRateModeTo");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowRateModeTo(value: i32) {
    this.set("borrowRateModeTo", Value.fromI32(value));
  }

  get stableBorrowRate(): BigInt {
    let value = this.get("stableBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stableBorrowRate(value: BigInt) {
    this.set("stableBorrowRate", Value.fromBigInt(value));
  }

  get variableBorrowRate(): BigInt {
    let value = this.get("variableBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set variableBorrowRate(value: BigInt) {
    this.set("variableBorrowRate", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class UsageAsCollateral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UsageAsCollateral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UsageAsCollateral must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UsageAsCollateral", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UsageAsCollateral | null {
    return changetype<UsageAsCollateral | null>(
      store.get_in_block("UsageAsCollateral", id),
    );
  }

  static load(id: string): UsageAsCollateral | null {
    return changetype<UsageAsCollateral | null>(
      store.get("UsageAsCollateral", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get action(): string {
    let value = this.get("action");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get fromState(): boolean {
    let value = this.get("fromState");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set fromState(value: boolean) {
    this.set("fromState", Value.fromBoolean(value));
  }

  get toState(): boolean {
    let value = this.get("toState");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set toState(value: boolean) {
    this.set("toState", Value.fromBoolean(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class RebalanceStableBorrowRate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RebalanceStableBorrowRate entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RebalanceStableBorrowRate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RebalanceStableBorrowRate", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RebalanceStableBorrowRate | null {
    return changetype<RebalanceStableBorrowRate | null>(
      store.get_in_block("RebalanceStableBorrowRate", id),
    );
  }

  static load(id: string): RebalanceStableBorrowRate | null {
    return changetype<RebalanceStableBorrowRate | null>(
      store.get("RebalanceStableBorrowRate", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get action(): string {
    let value = this.get("action");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get borrowRateFrom(): BigInt {
    let value = this.get("borrowRateFrom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set borrowRateFrom(value: BigInt) {
    this.set("borrowRateFrom", Value.fromBigInt(value));
  }

  get borrowRateTo(): BigInt {
    let value = this.get("borrowRateTo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set borrowRateTo(value: BigInt) {
    this.set("borrowRateTo", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Repay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Repay entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Repay must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Repay", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Repay | null {
    return changetype<Repay | null>(store.get_in_block("Repay", id));
  }

  static load(id: string): Repay | null {
    return changetype<Repay | null>(store.get("Repay", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get action(): string {
    let value = this.get("action");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get repayer(): string {
    let value = this.get("repayer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set repayer(value: string) {
    this.set("repayer", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get useBTokens(): boolean {
    let value = this.get("useBTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set useBTokens(value: boolean) {
    this.set("useBTokens", Value.fromBoolean(value));
  }

  get assetPriceUSD(): BigDecimal {
    let value = this.get("assetPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set assetPriceUSD(value: BigDecimal) {
    this.set("assetPriceUSD", Value.fromBigDecimal(value));
  }
}

export class IsolationModeTotalDebtUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save IsolationModeTotalDebtUpdated entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type IsolationModeTotalDebtUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("IsolationModeTotalDebtUpdated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): IsolationModeTotalDebtUpdated | null {
    return changetype<IsolationModeTotalDebtUpdated | null>(
      store.get_in_block("IsolationModeTotalDebtUpdated", id),
    );
  }

  static load(id: string): IsolationModeTotalDebtUpdated | null {
    return changetype<IsolationModeTotalDebtUpdated | null>(
      store.get("IsolationModeTotalDebtUpdated", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get isolatedDebt(): BigInt {
    let value = this.get("isolatedDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set isolatedDebt(value: BigInt) {
    this.set("isolatedDebt", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class FlashLoan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FlashLoan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FlashLoan must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FlashLoan", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FlashLoan | null {
    return changetype<FlashLoan | null>(store.get_in_block("FlashLoan", id));
  }

  static load(id: string): FlashLoan | null {
    return changetype<FlashLoan | null>(store.get("FlashLoan", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get totalFee(): BigInt {
    let value = this.get("totalFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalFee(value: BigInt) {
    this.set("totalFee", Value.fromBigInt(value));
  }

  get lpFee(): BigInt {
    let value = this.get("lpFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lpFee(value: BigInt) {
    this.set("lpFee", Value.fromBigInt(value));
  }

  get protocolFee(): BigInt {
    let value = this.get("protocolFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set protocolFee(value: BigInt) {
    this.set("protocolFee", Value.fromBigInt(value));
  }

  get initiator(): string {
    let value = this.get("initiator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set initiator(value: string) {
    this.set("initiator", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get assetPriceUSD(): BigDecimal {
    let value = this.get("assetPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set assetPriceUSD(value: BigDecimal) {
    this.set("assetPriceUSD", Value.fromBigDecimal(value));
  }
}

export class LiquidationCall extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidationCall entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidationCall must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("LiquidationCall", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LiquidationCall | null {
    return changetype<LiquidationCall | null>(
      store.get_in_block("LiquidationCall", id),
    );
  }

  static load(id: string): LiquidationCall | null {
    return changetype<LiquidationCall | null>(store.get("LiquidationCall", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get action(): string {
    let value = this.get("action");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get collateralReserve(): string {
    let value = this.get("collateralReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateralReserve(value: string) {
    this.set("collateralReserve", Value.fromString(value));
  }

  get collateralUserReserve(): string {
    let value = this.get("collateralUserReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateralUserReserve(value: string) {
    this.set("collateralUserReserve", Value.fromString(value));
  }

  get collateralAmount(): BigInt {
    let value = this.get("collateralAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collateralAmount(value: BigInt) {
    this.set("collateralAmount", Value.fromBigInt(value));
  }

  get principalReserve(): string {
    let value = this.get("principalReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set principalReserve(value: string) {
    this.set("principalReserve", Value.fromString(value));
  }

  get principalUserReserve(): string {
    let value = this.get("principalUserReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set principalUserReserve(value: string) {
    this.set("principalUserReserve", Value.fromString(value));
  }

  get principalAmount(): BigInt {
    let value = this.get("principalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principalAmount(value: BigInt) {
    this.set("principalAmount", Value.fromBigInt(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get collateralAssetPriceUSD(): BigDecimal {
    let value = this.get("collateralAssetPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralAssetPriceUSD(value: BigDecimal) {
    this.set("collateralAssetPriceUSD", Value.fromBigDecimal(value));
  }

  get borrowAssetPriceUSD(): BigDecimal {
    let value = this.get("borrowAssetPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set borrowAssetPriceUSD(value: BigDecimal) {
    this.set("borrowAssetPriceUSD", Value.fromBigDecimal(value));
  }
}

export class MintUnbacked extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MintUnbacked entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MintUnbacked must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MintUnbacked", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MintUnbacked | null {
    return changetype<MintUnbacked | null>(
      store.get_in_block("MintUnbacked", id),
    );
  }

  static load(id: string): MintUnbacked | null {
    return changetype<MintUnbacked | null>(store.get("MintUnbacked", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get caller(): string {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set caller(value: string) {
    this.set("caller", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get referral(): i32 {
    let value = this.get("referral");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set referral(value: i32) {
    this.set("referral", Value.fromI32(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class BackUnbacked extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BackUnbacked entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BackUnbacked must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BackUnbacked", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BackUnbacked | null {
    return changetype<BackUnbacked | null>(
      store.get_in_block("BackUnbacked", id),
    );
  }

  static load(id: string): BackUnbacked | null {
    return changetype<BackUnbacked | null>(store.get("BackUnbacked", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get backer(): string {
    let value = this.get("backer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set backer(value: string) {
    this.set("backer", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get lpFee(): BigInt {
    let value = this.get("lpFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lpFee(value: BigInt) {
    this.set("lpFee", Value.fromBigInt(value));
  }

  get protocolFee(): BigInt {
    let value = this.get("protocolFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set protocolFee(value: BigInt) {
    this.set("protocolFee", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class MintedToTreasury extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MintedToTreasury entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MintedToTreasury must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MintedToTreasury", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MintedToTreasury | null {
    return changetype<MintedToTreasury | null>(
      store.get_in_block("MintedToTreasury", id),
    );
  }

  static load(id: string): MintedToTreasury | null {
    return changetype<MintedToTreasury | null>(
      store.get("MintedToTreasury", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class UserEModeSet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserEModeSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserEModeSet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UserEModeSet", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserEModeSet | null {
    return changetype<UserEModeSet | null>(
      store.get_in_block("UserEModeSet", id),
    );
  }

  static load(id: string): UserEModeSet | null {
    return changetype<UserEModeSet | null>(store.get("UserEModeSet", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get action(): string {
    let value = this.get("action");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get categoryId(): i32 {
    let value = this.get("categoryId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set categoryId(value: i32) {
    this.set("categoryId", Value.fromI32(value));
  }
}

export class ReserveConfigurationHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveConfigurationHistoryItem entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveConfigurationHistoryItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ReserveConfigurationHistoryItem", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ReserveConfigurationHistoryItem | null {
    return changetype<ReserveConfigurationHistoryItem | null>(
      store.get_in_block("ReserveConfigurationHistoryItem", id),
    );
  }

  static load(id: string): ReserveConfigurationHistoryItem | null {
    return changetype<ReserveConfigurationHistoryItem | null>(
      store.get("ReserveConfigurationHistoryItem", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get usageAsCollateralEnabled(): boolean {
    let value = this.get("usageAsCollateralEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set usageAsCollateralEnabled(value: boolean) {
    this.set("usageAsCollateralEnabled", Value.fromBoolean(value));
  }

  get borrowingEnabled(): boolean {
    let value = this.get("borrowingEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set borrowingEnabled(value: boolean) {
    this.set("borrowingEnabled", Value.fromBoolean(value));
  }

  get stableBorrowRateEnabled(): boolean {
    let value = this.get("stableBorrowRateEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set stableBorrowRateEnabled(value: boolean) {
    this.set("stableBorrowRateEnabled", Value.fromBoolean(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get isFrozen(): boolean {
    let value = this.get("isFrozen");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isFrozen(value: boolean) {
    this.set("isFrozen", Value.fromBoolean(value));
  }

  get reserveInterestRateStrategy(): Bytes {
    let value = this.get("reserveInterestRateStrategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set reserveInterestRateStrategy(value: Bytes) {
    this.set("reserveInterestRateStrategy", Value.fromBytes(value));
  }

  get baseLTVasCollateral(): BigInt {
    let value = this.get("baseLTVasCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set baseLTVasCollateral(value: BigInt) {
    this.set("baseLTVasCollateral", Value.fromBigInt(value));
  }

  get reserveLiquidationThreshold(): BigInt {
    let value = this.get("reserveLiquidationThreshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reserveLiquidationThreshold(value: BigInt) {
    this.set("reserveLiquidationThreshold", Value.fromBigInt(value));
  }

  get reserveLiquidationBonus(): BigInt {
    let value = this.get("reserveLiquidationBonus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reserveLiquidationBonus(value: BigInt) {
    this.set("reserveLiquidationBonus", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class ReserveParamsHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveParamsHistoryItem entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveParamsHistoryItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ReserveParamsHistoryItem", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ReserveParamsHistoryItem | null {
    return changetype<ReserveParamsHistoryItem | null>(
      store.get_in_block("ReserveParamsHistoryItem", id),
    );
  }

  static load(id: string): ReserveParamsHistoryItem | null {
    return changetype<ReserveParamsHistoryItem | null>(
      store.get("ReserveParamsHistoryItem", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get variableBorrowRate(): BigInt {
    let value = this.get("variableBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set variableBorrowRate(value: BigInt) {
    this.set("variableBorrowRate", Value.fromBigInt(value));
  }

  get variableBorrowIndex(): BigInt {
    let value = this.get("variableBorrowIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set variableBorrowIndex(value: BigInt) {
    this.set("variableBorrowIndex", Value.fromBigInt(value));
  }

  get utilizationRate(): BigDecimal {
    let value = this.get("utilizationRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set utilizationRate(value: BigDecimal) {
    this.set("utilizationRate", Value.fromBigDecimal(value));
  }

  get stableBorrowRate(): BigInt {
    let value = this.get("stableBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stableBorrowRate(value: BigInt) {
    this.set("stableBorrowRate", Value.fromBigInt(value));
  }

  get averageStableBorrowRate(): BigInt {
    let value = this.get("averageStableBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set averageStableBorrowRate(value: BigInt) {
    this.set("averageStableBorrowRate", Value.fromBigInt(value));
  }

  get liquidityIndex(): BigInt {
    let value = this.get("liquidityIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityIndex(value: BigInt) {
    this.set("liquidityIndex", Value.fromBigInt(value));
  }

  get liquidityRate(): BigInt {
    let value = this.get("liquidityRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityRate(value: BigInt) {
    this.set("liquidityRate", Value.fromBigInt(value));
  }

  get totalLiquidity(): BigInt {
    let value = this.get("totalLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLiquidity(value: BigInt) {
    this.set("totalLiquidity", Value.fromBigInt(value));
  }

  get totalBTokenSupply(): BigInt {
    let value = this.get("totalBTokenSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBTokenSupply(value: BigInt) {
    this.set("totalBTokenSupply", Value.fromBigInt(value));
  }

  get totalLiquidityAsCollateral(): BigInt {
    let value = this.get("totalLiquidityAsCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLiquidityAsCollateral(value: BigInt) {
    this.set("totalLiquidityAsCollateral", Value.fromBigInt(value));
  }

  get availableLiquidity(): BigInt {
    let value = this.get("availableLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set availableLiquidity(value: BigInt) {
    this.set("availableLiquidity", Value.fromBigInt(value));
  }

  get priceInEth(): BigInt {
    let value = this.get("priceInEth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set priceInEth(value: BigInt) {
    this.set("priceInEth", Value.fromBigInt(value));
  }

  get priceInUsd(): BigDecimal {
    let value = this.get("priceInUsd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set priceInUsd(value: BigDecimal) {
    this.set("priceInUsd", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get accruedToTreasury(): BigInt {
    let value = this.get("accruedToTreasury");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accruedToTreasury(value: BigInt) {
    this.set("accruedToTreasury", Value.fromBigInt(value));
  }

  get totalScaledVariableDebt(): BigInt {
    let value = this.get("totalScaledVariableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalScaledVariableDebt(value: BigInt) {
    this.set("totalScaledVariableDebt", Value.fromBigInt(value));
  }

  get totalCurrentVariableDebt(): BigInt {
    let value = this.get("totalCurrentVariableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCurrentVariableDebt(value: BigInt) {
    this.set("totalCurrentVariableDebt", Value.fromBigInt(value));
  }

  get totalPrincipalStableDebt(): BigInt {
    let value = this.get("totalPrincipalStableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPrincipalStableDebt(value: BigInt) {
    this.set("totalPrincipalStableDebt", Value.fromBigInt(value));
  }

  get lifetimePrincipalStableDebt(): BigInt {
    let value = this.get("lifetimePrincipalStableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimePrincipalStableDebt(value: BigInt) {
    this.set("lifetimePrincipalStableDebt", Value.fromBigInt(value));
  }

  get lifetimeScaledVariableDebt(): BigInt {
    let value = this.get("lifetimeScaledVariableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeScaledVariableDebt(value: BigInt) {
    this.set("lifetimeScaledVariableDebt", Value.fromBigInt(value));
  }

  get lifetimeCurrentVariableDebt(): BigInt {
    let value = this.get("lifetimeCurrentVariableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeCurrentVariableDebt(value: BigInt) {
    this.set("lifetimeCurrentVariableDebt", Value.fromBigInt(value));
  }

  get lifetimeLiquidity(): BigInt {
    let value = this.get("lifetimeLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeLiquidity(value: BigInt) {
    this.set("lifetimeLiquidity", Value.fromBigInt(value));
  }

  get lifetimeRepayments(): BigInt {
    let value = this.get("lifetimeRepayments");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeRepayments(value: BigInt) {
    this.set("lifetimeRepayments", Value.fromBigInt(value));
  }

  get lifetimeWithdrawals(): BigInt {
    let value = this.get("lifetimeWithdrawals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeWithdrawals(value: BigInt) {
    this.set("lifetimeWithdrawals", Value.fromBigInt(value));
  }

  get lifetimeBorrows(): BigInt {
    let value = this.get("lifetimeBorrows");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeBorrows(value: BigInt) {
    this.set("lifetimeBorrows", Value.fromBigInt(value));
  }

  get lifetimeLiquidated(): BigInt {
    let value = this.get("lifetimeLiquidated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeLiquidated(value: BigInt) {
    this.set("lifetimeLiquidated", Value.fromBigInt(value));
  }

  get lifetimeFlashLoans(): BigInt {
    let value = this.get("lifetimeFlashLoans");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeFlashLoans(value: BigInt) {
    this.set("lifetimeFlashLoans", Value.fromBigInt(value));
  }

  get lifetimeFlashLoanPremium(): BigInt {
    let value = this.get("lifetimeFlashLoanPremium");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeFlashLoanPremium(value: BigInt) {
    this.set("lifetimeFlashLoanPremium", Value.fromBigInt(value));
  }

  get lifetimeFlashLoanLPPremium(): BigInt {
    let value = this.get("lifetimeFlashLoanLPPremium");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeFlashLoanLPPremium(value: BigInt) {
    this.set("lifetimeFlashLoanLPPremium", Value.fromBigInt(value));
  }

  get lifetimeFlashLoanProtocolPremium(): BigInt {
    let value = this.get("lifetimeFlashLoanProtocolPremium");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeFlashLoanProtocolPremium(value: BigInt) {
    this.set("lifetimeFlashLoanProtocolPremium", Value.fromBigInt(value));
  }

  get lifetimeReserveFactorAccrued(): BigInt {
    let value = this.get("lifetimeReserveFactorAccrued");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeReserveFactorAccrued(value: BigInt) {
    this.set("lifetimeReserveFactorAccrued", Value.fromBigInt(value));
  }

  get lifetimePortalLPFee(): BigInt {
    let value = this.get("lifetimePortalLPFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimePortalLPFee(value: BigInt) {
    this.set("lifetimePortalLPFee", Value.fromBigInt(value));
  }

  get lifetimePortalProtocolFee(): BigInt {
    let value = this.get("lifetimePortalProtocolFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimePortalProtocolFee(value: BigInt) {
    this.set("lifetimePortalProtocolFee", Value.fromBigInt(value));
  }

  get lifetimeSuppliersInterestEarned(): BigInt {
    let value = this.get("lifetimeSuppliersInterestEarned");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeSuppliersInterestEarned(value: BigInt) {
    this.set("lifetimeSuppliersInterestEarned", Value.fromBigInt(value));
  }
}

export class RewardFeedOracle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardFeedOracle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RewardFeedOracle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RewardFeedOracle", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RewardFeedOracle | null {
    return changetype<RewardFeedOracle | null>(
      store.get_in_block("RewardFeedOracle", id),
    );
  }

  static load(id: string): RewardFeedOracle | null {
    return changetype<RewardFeedOracle | null>(
      store.get("RewardFeedOracle", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rewardFeedAddress(): Bytes {
    let value = this.get("rewardFeedAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set rewardFeedAddress(value: Bytes) {
    this.set("rewardFeedAddress", Value.fromBytes(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }
}

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Reward must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Reward", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Reward | null {
    return changetype<Reward | null>(store.get_in_block("Reward", id));
  }

  static load(id: string): Reward | null {
    return changetype<Reward | null>(store.get("Reward", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rewardToken(): Bytes {
    let value = this.get("rewardToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set rewardToken(value: Bytes) {
    this.set("rewardToken", Value.fromBytes(value));
  }

  get asset(): string {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get rewardTokenDecimals(): i32 {
    let value = this.get("rewardTokenDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set rewardTokenDecimals(value: i32) {
    this.set("rewardTokenDecimals", Value.fromI32(value));
  }

  get rewardFeedOracle(): string {
    let value = this.get("rewardFeedOracle");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rewardFeedOracle(value: string) {
    this.set("rewardFeedOracle", Value.fromString(value));
  }

  get rewardTokenSymbol(): string {
    let value = this.get("rewardTokenSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rewardTokenSymbol(value: string) {
    this.set("rewardTokenSymbol", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get precision(): i32 {
    let value = this.get("precision");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set precision(value: i32) {
    this.set("precision", Value.fromI32(value));
  }

  get distributionEnd(): i32 {
    let value = this.get("distributionEnd");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set distributionEnd(value: i32) {
    this.set("distributionEnd", Value.fromI32(value));
  }

  get emissionsPerSecond(): BigInt {
    let value = this.get("emissionsPerSecond");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set emissionsPerSecond(value: BigInt) {
    this.set("emissionsPerSecond", Value.fromBigInt(value));
  }

  get rewardsController(): string {
    let value = this.get("rewardsController");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rewardsController(value: string) {
    this.set("rewardsController", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }
}

export class UserReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserReward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserReward must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UserReward", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserReward | null {
    return changetype<UserReward | null>(store.get_in_block("UserReward", id));
  }

  static load(id: string): UserReward | null {
    return changetype<UserReward | null>(store.get("UserReward", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get reward(): string {
    let value = this.get("reward");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reward(value: string) {
    this.set("reward", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }
}

export class RewardsController extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardsController entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RewardsController must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RewardsController", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RewardsController | null {
    return changetype<RewardsController | null>(
      store.get_in_block("RewardsController", id),
    );
  }

  static load(id: string): RewardsController | null {
    return changetype<RewardsController | null>(
      store.get("RewardsController", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rewards(): RewardLoader {
    return new RewardLoader(
      "RewardsController",
      this.get("id")!.toString(),
      "rewards",
    );
  }

  get rewardedActions(): RewardedActionLoader {
    return new RewardedActionLoader(
      "RewardsController",
      this.get("id")!.toString(),
      "rewardedActions",
    );
  }

  get claimIncentives(): ClaimRewardsCallLoader {
    return new ClaimRewardsCallLoader(
      "RewardsController",
      this.get("id")!.toString(),
      "claimIncentives",
    );
  }
}

export class RewardedAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardedAction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RewardedAction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RewardedAction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RewardedAction | null {
    return changetype<RewardedAction | null>(
      store.get_in_block("RewardedAction", id),
    );
  }

  static load(id: string): RewardedAction | null {
    return changetype<RewardedAction | null>(store.get("RewardedAction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rewardsController(): string {
    let value = this.get("rewardsController");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rewardsController(value: string) {
    this.set("rewardsController", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class ClaimRewardsCall extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimRewardsCall entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ClaimRewardsCall must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ClaimRewardsCall", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ClaimRewardsCall | null {
    return changetype<ClaimRewardsCall | null>(
      store.get_in_block("ClaimRewardsCall", id),
    );
  }

  static load(id: string): ClaimRewardsCall | null {
    return changetype<ClaimRewardsCall | null>(
      store.get("ClaimRewardsCall", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get caller(): string {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set caller(value: string) {
    this.set("caller", Value.fromString(value));
  }

  get rewardsController(): string {
    let value = this.get("rewardsController");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rewardsController(value: string) {
    this.set("rewardsController", Value.fromString(value));
  }

  get action(): string {
    let value = this.get("action");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class EModeCategory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EModeCategory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EModeCategory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("EModeCategory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): EModeCategory | null {
    return changetype<EModeCategory | null>(
      store.get_in_block("EModeCategory", id),
    );
  }

  static load(id: string): EModeCategory | null {
    return changetype<EModeCategory | null>(store.get("EModeCategory", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ltv(): BigInt {
    let value = this.get("ltv");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ltv(value: BigInt) {
    this.set("ltv", Value.fromBigInt(value));
  }

  get liquidationThreshold(): BigInt {
    let value = this.get("liquidationThreshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidationThreshold(value: BigInt) {
    this.set("liquidationThreshold", Value.fromBigInt(value));
  }

  get liquidationBonus(): BigInt {
    let value = this.get("liquidationBonus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidationBonus(value: BigInt) {
    this.set("liquidationBonus", Value.fromBigInt(value));
  }

  get oracle(): Bytes {
    let value = this.get("oracle");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set oracle(value: Bytes) {
    this.set("oracle", Value.fromBytes(value));
  }

  get label(): string {
    let value = this.get("label");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set label(value: string) {
    this.set("label", Value.fromString(value));
  }
}

export class MapAssetPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MapAssetPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MapAssetPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MapAssetPool", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MapAssetPool | null {
    return changetype<MapAssetPool | null>(
      store.get_in_block("MapAssetPool", id),
    );
  }

  static load(id: string): MapAssetPool | null {
    return changetype<MapAssetPool | null>(store.get("MapAssetPool", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get underlyingAsset(): Bytes {
    let value = this.get("underlyingAsset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set underlyingAsset(value: Bytes) {
    this.set("underlyingAsset", Value.fromBytes(value));
  }
}

export class Reserve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reserve entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Reserve must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Reserve", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Reserve | null {
    return changetype<Reserve | null>(store.get_in_block("Reserve", id));
  }

  static load(id: string): Reserve | null {
    return changetype<Reserve | null>(store.get("Reserve", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlyingAsset(): Bytes {
    let value = this.get("underlyingAsset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set underlyingAsset(value: Bytes) {
    this.set("underlyingAsset", Value.fromBytes(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get usageAsCollateralEnabled(): boolean {
    let value = this.get("usageAsCollateralEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set usageAsCollateralEnabled(value: boolean) {
    this.set("usageAsCollateralEnabled", Value.fromBoolean(value));
  }

  get borrowingEnabled(): boolean {
    let value = this.get("borrowingEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set borrowingEnabled(value: boolean) {
    this.set("borrowingEnabled", Value.fromBoolean(value));
  }

  get stableBorrowRateEnabled(): boolean {
    let value = this.get("stableBorrowRateEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set stableBorrowRateEnabled(value: boolean) {
    this.set("stableBorrowRateEnabled", Value.fromBoolean(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get isFrozen(): boolean {
    let value = this.get("isFrozen");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isFrozen(value: boolean) {
    this.set("isFrozen", Value.fromBoolean(value));
  }

  get price(): string {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set price(value: string) {
    this.set("price", Value.fromString(value));
  }

  get reserveInterestRateStrategy(): Bytes {
    let value = this.get("reserveInterestRateStrategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set reserveInterestRateStrategy(value: Bytes) {
    this.set("reserveInterestRateStrategy", Value.fromBytes(value));
  }

  get optimalUtilisationRate(): BigInt {
    let value = this.get("optimalUtilisationRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set optimalUtilisationRate(value: BigInt) {
    this.set("optimalUtilisationRate", Value.fromBigInt(value));
  }

  get variableRateSlope1(): BigInt {
    let value = this.get("variableRateSlope1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set variableRateSlope1(value: BigInt) {
    this.set("variableRateSlope1", Value.fromBigInt(value));
  }

  get variableRateSlope2(): BigInt {
    let value = this.get("variableRateSlope2");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set variableRateSlope2(value: BigInt) {
    this.set("variableRateSlope2", Value.fromBigInt(value));
  }

  get stableRateSlope1(): BigInt {
    let value = this.get("stableRateSlope1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stableRateSlope1(value: BigInt) {
    this.set("stableRateSlope1", Value.fromBigInt(value));
  }

  get stableRateSlope2(): BigInt {
    let value = this.get("stableRateSlope2");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stableRateSlope2(value: BigInt) {
    this.set("stableRateSlope2", Value.fromBigInt(value));
  }

  get baseVariableBorrowRate(): BigInt {
    let value = this.get("baseVariableBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set baseVariableBorrowRate(value: BigInt) {
    this.set("baseVariableBorrowRate", Value.fromBigInt(value));
  }

  get baseLTVasCollateral(): BigInt {
    let value = this.get("baseLTVasCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set baseLTVasCollateral(value: BigInt) {
    this.set("baseLTVasCollateral", Value.fromBigInt(value));
  }

  get reserveLiquidationThreshold(): BigInt {
    let value = this.get("reserveLiquidationThreshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reserveLiquidationThreshold(value: BigInt) {
    this.set("reserveLiquidationThreshold", Value.fromBigInt(value));
  }

  get reserveLiquidationBonus(): BigInt {
    let value = this.get("reserveLiquidationBonus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reserveLiquidationBonus(value: BigInt) {
    this.set("reserveLiquidationBonus", Value.fromBigInt(value));
  }

  get utilizationRate(): BigDecimal {
    let value = this.get("utilizationRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set utilizationRate(value: BigDecimal) {
    this.set("utilizationRate", Value.fromBigDecimal(value));
  }

  get totalLiquidity(): BigInt {
    let value = this.get("totalLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLiquidity(value: BigInt) {
    this.set("totalLiquidity", Value.fromBigInt(value));
  }

  get totalBTokenSupply(): BigInt {
    let value = this.get("totalBTokenSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBTokenSupply(value: BigInt) {
    this.set("totalBTokenSupply", Value.fromBigInt(value));
  }

  get totalLiquidityAsCollateral(): BigInt {
    let value = this.get("totalLiquidityAsCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLiquidityAsCollateral(value: BigInt) {
    this.set("totalLiquidityAsCollateral", Value.fromBigInt(value));
  }

  get availableLiquidity(): BigInt {
    let value = this.get("availableLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set availableLiquidity(value: BigInt) {
    this.set("availableLiquidity", Value.fromBigInt(value));
  }

  get totalPrincipalStableDebt(): BigInt {
    let value = this.get("totalPrincipalStableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPrincipalStableDebt(value: BigInt) {
    this.set("totalPrincipalStableDebt", Value.fromBigInt(value));
  }

  get totalScaledVariableDebt(): BigInt {
    let value = this.get("totalScaledVariableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalScaledVariableDebt(value: BigInt) {
    this.set("totalScaledVariableDebt", Value.fromBigInt(value));
  }

  get totalCurrentVariableDebt(): BigInt {
    let value = this.get("totalCurrentVariableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCurrentVariableDebt(value: BigInt) {
    this.set("totalCurrentVariableDebt", Value.fromBigInt(value));
  }

  get totalSupplies(): BigInt {
    let value = this.get("totalSupplies");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSupplies(value: BigInt) {
    this.set("totalSupplies", Value.fromBigInt(value));
  }

  get liquidityRate(): BigInt {
    let value = this.get("liquidityRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityRate(value: BigInt) {
    this.set("liquidityRate", Value.fromBigInt(value));
  }

  get accruedToTreasury(): BigInt {
    let value = this.get("accruedToTreasury");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accruedToTreasury(value: BigInt) {
    this.set("accruedToTreasury", Value.fromBigInt(value));
  }

  get averageStableRate(): BigInt {
    let value = this.get("averageStableRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set averageStableRate(value: BigInt) {
    this.set("averageStableRate", Value.fromBigInt(value));
  }

  get variableBorrowRate(): BigInt {
    let value = this.get("variableBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set variableBorrowRate(value: BigInt) {
    this.set("variableBorrowRate", Value.fromBigInt(value));
  }

  get stableBorrowRate(): BigInt {
    let value = this.get("stableBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stableBorrowRate(value: BigInt) {
    this.set("stableBorrowRate", Value.fromBigInt(value));
  }

  get liquidityIndex(): BigInt {
    let value = this.get("liquidityIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityIndex(value: BigInt) {
    this.set("liquidityIndex", Value.fromBigInt(value));
  }

  get variableBorrowIndex(): BigInt {
    let value = this.get("variableBorrowIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set variableBorrowIndex(value: BigInt) {
    this.set("variableBorrowIndex", Value.fromBigInt(value));
  }

  get bToken(): string {
    let value = this.get("bToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bToken(value: string) {
    this.set("bToken", Value.fromString(value));
  }

  get vToken(): string {
    let value = this.get("vToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vToken(value: string) {
    this.set("vToken", Value.fromString(value));
  }

  get sToken(): string {
    let value = this.get("sToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set sToken(value: string) {
    this.set("sToken", Value.fromString(value));
  }

  get reserveFactor(): BigInt {
    let value = this.get("reserveFactor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reserveFactor(value: BigInt) {
    this.set("reserveFactor", Value.fromBigInt(value));
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }

  get stableDebtLastUpdateTimestamp(): i32 {
    let value = this.get("stableDebtLastUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set stableDebtLastUpdateTimestamp(value: i32) {
    this.set("stableDebtLastUpdateTimestamp", Value.fromI32(value));
  }

  get isPaused(): boolean {
    let value = this.get("isPaused");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isPaused(value: boolean) {
    this.set("isPaused", Value.fromBoolean(value));
  }

  get isDropped(): boolean {
    let value = this.get("isDropped");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isDropped(value: boolean) {
    this.set("isDropped", Value.fromBoolean(value));
  }

  get borrowCap(): BigInt | null {
    let value = this.get("borrowCap");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set borrowCap(value: BigInt | null) {
    if (!value) {
      this.unset("borrowCap");
    } else {
      this.set("borrowCap", Value.fromBigInt(<BigInt>value));
    }
  }

  get supplyCap(): BigInt | null {
    let value = this.get("supplyCap");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set supplyCap(value: BigInt | null) {
    if (!value) {
      this.unset("supplyCap");
    } else {
      this.set("supplyCap", Value.fromBigInt(<BigInt>value));
    }
  }

  get debtCeiling(): BigInt | null {
    let value = this.get("debtCeiling");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set debtCeiling(value: BigInt | null) {
    if (!value) {
      this.unset("debtCeiling");
    } else {
      this.set("debtCeiling", Value.fromBigInt(<BigInt>value));
    }
  }

  get unbackedMintCap(): BigInt | null {
    let value = this.get("unbackedMintCap");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set unbackedMintCap(value: BigInt | null) {
    if (!value) {
      this.unset("unbackedMintCap");
    } else {
      this.set("unbackedMintCap", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidationProtocolFee(): BigInt | null {
    let value = this.get("liquidationProtocolFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidationProtocolFee(value: BigInt | null) {
    if (!value) {
      this.unset("liquidationProtocolFee");
    } else {
      this.set("liquidationProtocolFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get borrowableInIsolation(): boolean {
    let value = this.get("borrowableInIsolation");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set borrowableInIsolation(value: boolean) {
    this.set("borrowableInIsolation", Value.fromBoolean(value));
  }

  get eMode(): string | null {
    let value = this.get("eMode");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eMode(value: string | null) {
    if (!value) {
      this.unset("eMode");
    } else {
      this.set("eMode", Value.fromString(<string>value));
    }
  }

  get siloedBorrowing(): boolean {
    let value = this.get("siloedBorrowing");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set siloedBorrowing(value: boolean) {
    this.set("siloedBorrowing", Value.fromBoolean(value));
  }

  get lifetimeLiquidity(): BigInt {
    let value = this.get("lifetimeLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeLiquidity(value: BigInt) {
    this.set("lifetimeLiquidity", Value.fromBigInt(value));
  }

  get lifetimePrincipalStableDebt(): BigInt {
    let value = this.get("lifetimePrincipalStableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimePrincipalStableDebt(value: BigInt) {
    this.set("lifetimePrincipalStableDebt", Value.fromBigInt(value));
  }

  get lifetimeScaledVariableDebt(): BigInt {
    let value = this.get("lifetimeScaledVariableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeScaledVariableDebt(value: BigInt) {
    this.set("lifetimeScaledVariableDebt", Value.fromBigInt(value));
  }

  get lifetimeCurrentVariableDebt(): BigInt {
    let value = this.get("lifetimeCurrentVariableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeCurrentVariableDebt(value: BigInt) {
    this.set("lifetimeCurrentVariableDebt", Value.fromBigInt(value));
  }

  get lifetimeRepayments(): BigInt {
    let value = this.get("lifetimeRepayments");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeRepayments(value: BigInt) {
    this.set("lifetimeRepayments", Value.fromBigInt(value));
  }

  get lifetimeWithdrawals(): BigInt {
    let value = this.get("lifetimeWithdrawals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeWithdrawals(value: BigInt) {
    this.set("lifetimeWithdrawals", Value.fromBigInt(value));
  }

  get lifetimeBorrows(): BigInt {
    let value = this.get("lifetimeBorrows");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeBorrows(value: BigInt) {
    this.set("lifetimeBorrows", Value.fromBigInt(value));
  }

  get lifetimeLiquidated(): BigInt {
    let value = this.get("lifetimeLiquidated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeLiquidated(value: BigInt) {
    this.set("lifetimeLiquidated", Value.fromBigInt(value));
  }

  get lifetimeFlashLoans(): BigInt {
    let value = this.get("lifetimeFlashLoans");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeFlashLoans(value: BigInt) {
    this.set("lifetimeFlashLoans", Value.fromBigInt(value));
  }

  get lifetimeFlashLoanPremium(): BigInt {
    let value = this.get("lifetimeFlashLoanPremium");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeFlashLoanPremium(value: BigInt) {
    this.set("lifetimeFlashLoanPremium", Value.fromBigInt(value));
  }

  get lifetimeFlashLoanLPPremium(): BigInt {
    let value = this.get("lifetimeFlashLoanLPPremium");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeFlashLoanLPPremium(value: BigInt) {
    this.set("lifetimeFlashLoanLPPremium", Value.fromBigInt(value));
  }

  get lifetimeFlashLoanProtocolPremium(): BigInt {
    let value = this.get("lifetimeFlashLoanProtocolPremium");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeFlashLoanProtocolPremium(value: BigInt) {
    this.set("lifetimeFlashLoanProtocolPremium", Value.fromBigInt(value));
  }

  get lifetimePortalLPFee(): BigInt {
    let value = this.get("lifetimePortalLPFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimePortalLPFee(value: BigInt) {
    this.set("lifetimePortalLPFee", Value.fromBigInt(value));
  }

  get lifetimePortalProtocolFee(): BigInt {
    let value = this.get("lifetimePortalProtocolFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimePortalProtocolFee(value: BigInt) {
    this.set("lifetimePortalProtocolFee", Value.fromBigInt(value));
  }

  get lifetimeSuppliersInterestEarned(): BigInt {
    let value = this.get("lifetimeSuppliersInterestEarned");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeSuppliersInterestEarned(value: BigInt) {
    this.set("lifetimeSuppliersInterestEarned", Value.fromBigInt(value));
  }

  get lifetimeReserveFactorAccrued(): BigInt {
    let value = this.get("lifetimeReserveFactorAccrued");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeReserveFactorAccrued(value: BigInt) {
    this.set("lifetimeReserveFactorAccrued", Value.fromBigInt(value));
  }

  get userReserves(): UserReserveLoader {
    return new UserReserveLoader(
      "Reserve",
      this.get("id")!.toString(),
      "userReserves",
    );
  }

  get supplyHistory(): SupplyLoader {
    return new SupplyLoader(
      "Reserve",
      this.get("id")!.toString(),
      "supplyHistory",
    );
  }

  get mintUnbackedHistory(): MintUnbackedLoader {
    return new MintUnbackedLoader(
      "Reserve",
      this.get("id")!.toString(),
      "mintUnbackedHistory",
    );
  }

  get backUnbackedHistory(): BackUnbackedLoader {
    return new BackUnbackedLoader(
      "Reserve",
      this.get("id")!.toString(),
      "backUnbackedHistory",
    );
  }

  get mintedToTreasuryHistory(): MintedToTreasuryLoader {
    return new MintedToTreasuryLoader(
      "Reserve",
      this.get("id")!.toString(),
      "mintedToTreasuryHistory",
    );
  }

  get isolationModeTotalDebtUpdatedHistory(): IsolationModeTotalDebtUpdatedLoader {
    return new IsolationModeTotalDebtUpdatedLoader(
      "Reserve",
      this.get("id")!.toString(),
      "isolationModeTotalDebtUpdatedHistory",
    );
  }

  get redeemUnderlyingHistory(): RedeemUnderlyingLoader {
    return new RedeemUnderlyingLoader(
      "Reserve",
      this.get("id")!.toString(),
      "redeemUnderlyingHistory",
    );
  }

  get borrowHistory(): BorrowLoader {
    return new BorrowLoader(
      "Reserve",
      this.get("id")!.toString(),
      "borrowHistory",
    );
  }

  get usageAsCollateralHistory(): UsageAsCollateralLoader {
    return new UsageAsCollateralLoader(
      "Reserve",
      this.get("id")!.toString(),
      "usageAsCollateralHistory",
    );
  }

  get swapHistory(): SwapBorrowRateLoader {
    return new SwapBorrowRateLoader(
      "Reserve",
      this.get("id")!.toString(),
      "swapHistory",
    );
  }

  get rebalanceStableBorrowRateHistory(): RebalanceStableBorrowRateLoader {
    return new RebalanceStableBorrowRateLoader(
      "Reserve",
      this.get("id")!.toString(),
      "rebalanceStableBorrowRateHistory",
    );
  }

  get repayHistory(): RepayLoader {
    return new RepayLoader(
      "Reserve",
      this.get("id")!.toString(),
      "repayHistory",
    );
  }

  get flashLoanHistory(): FlashLoanLoader {
    return new FlashLoanLoader(
      "Reserve",
      this.get("id")!.toString(),
      "flashLoanHistory",
    );
  }

  get liquidationCallHistory(): LiquidationCallLoader {
    return new LiquidationCallLoader(
      "Reserve",
      this.get("id")!.toString(),
      "liquidationCallHistory",
    );
  }

  get paramsHistory(): ReserveParamsHistoryItemLoader {
    return new ReserveParamsHistoryItemLoader(
      "Reserve",
      this.get("id")!.toString(),
      "paramsHistory",
    );
  }

  get configurationHistory(): ReserveConfigurationHistoryItemLoader {
    return new ReserveConfigurationHistoryItemLoader(
      "Reserve",
      this.get("id")!.toString(),
      "configurationHistory",
    );
  }

  get supplies(): SupplyLoader {
    return new SupplyLoader("Reserve", this.get("id")!.toString(), "supplies");
  }
}

export class BTokenBalanceHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save BTokenBalanceHistoryItem entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BTokenBalanceHistoryItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BTokenBalanceHistoryItem", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BTokenBalanceHistoryItem | null {
    return changetype<BTokenBalanceHistoryItem | null>(
      store.get_in_block("BTokenBalanceHistoryItem", id),
    );
  }

  static load(id: string): BTokenBalanceHistoryItem | null {
    return changetype<BTokenBalanceHistoryItem | null>(
      store.get("BTokenBalanceHistoryItem", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get scaledBTokenBalance(): BigInt {
    let value = this.get("scaledBTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set scaledBTokenBalance(value: BigInt) {
    this.set("scaledBTokenBalance", Value.fromBigInt(value));
  }

  get currentBTokenBalance(): BigInt {
    let value = this.get("currentBTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentBTokenBalance(value: BigInt) {
    this.set("currentBTokenBalance", Value.fromBigInt(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }
}

export class VTokenBalanceHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save VTokenBalanceHistoryItem entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VTokenBalanceHistoryItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("VTokenBalanceHistoryItem", id.toString(), this);
    }
  }

  static loadInBlock(id: string): VTokenBalanceHistoryItem | null {
    return changetype<VTokenBalanceHistoryItem | null>(
      store.get_in_block("VTokenBalanceHistoryItem", id),
    );
  }

  static load(id: string): VTokenBalanceHistoryItem | null {
    return changetype<VTokenBalanceHistoryItem | null>(
      store.get("VTokenBalanceHistoryItem", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get scaledVariableDebt(): BigInt {
    let value = this.get("scaledVariableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set scaledVariableDebt(value: BigInt) {
    this.set("scaledVariableDebt", Value.fromBigInt(value));
  }

  get currentVariableDebt(): BigInt {
    let value = this.get("currentVariableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentVariableDebt(value: BigInt) {
    this.set("currentVariableDebt", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }
}

export class STokenBalanceHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save STokenBalanceHistoryItem entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type STokenBalanceHistoryItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("STokenBalanceHistoryItem", id.toString(), this);
    }
  }

  static loadInBlock(id: string): STokenBalanceHistoryItem | null {
    return changetype<STokenBalanceHistoryItem | null>(
      store.get_in_block("STokenBalanceHistoryItem", id),
    );
  }

  static load(id: string): STokenBalanceHistoryItem | null {
    return changetype<STokenBalanceHistoryItem | null>(
      store.get("STokenBalanceHistoryItem", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get principalStableDebt(): BigInt {
    let value = this.get("principalStableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principalStableDebt(value: BigInt) {
    this.set("principalStableDebt", Value.fromBigInt(value));
  }

  get currentStableDebt(): BigInt {
    let value = this.get("currentStableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentStableDebt(value: BigInt) {
    this.set("currentStableDebt", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get avgStableBorrowRate(): BigInt {
    let value = this.get("avgStableBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set avgStableBorrowRate(value: BigInt) {
    this.set("avgStableBorrowRate", Value.fromBigInt(value));
  }
}

export class StableTokenDelegatedAllowance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save StableTokenDelegatedAllowance entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StableTokenDelegatedAllowance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("StableTokenDelegatedAllowance", id.toString(), this);
    }
  }

  static loadInBlock(id: string): StableTokenDelegatedAllowance | null {
    return changetype<StableTokenDelegatedAllowance | null>(
      store.get_in_block("StableTokenDelegatedAllowance", id),
    );
  }

  static load(id: string): StableTokenDelegatedAllowance | null {
    return changetype<StableTokenDelegatedAllowance | null>(
      store.get("StableTokenDelegatedAllowance", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromUser(): string {
    let value = this.get("fromUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fromUser(value: string) {
    this.set("fromUser", Value.fromString(value));
  }

  get toUser(): string {
    let value = this.get("toUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set toUser(value: string) {
    this.set("toUser", Value.fromString(value));
  }

  get amountAllowed(): BigInt {
    let value = this.get("amountAllowed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountAllowed(value: BigInt) {
    this.set("amountAllowed", Value.fromBigInt(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }
}

export class VariableTokenDelegatedAllowance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save VariableTokenDelegatedAllowance entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VariableTokenDelegatedAllowance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("VariableTokenDelegatedAllowance", id.toString(), this);
    }
  }

  static loadInBlock(id: string): VariableTokenDelegatedAllowance | null {
    return changetype<VariableTokenDelegatedAllowance | null>(
      store.get_in_block("VariableTokenDelegatedAllowance", id),
    );
  }

  static load(id: string): VariableTokenDelegatedAllowance | null {
    return changetype<VariableTokenDelegatedAllowance | null>(
      store.get("VariableTokenDelegatedAllowance", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromUser(): string {
    let value = this.get("fromUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fromUser(value: string) {
    this.set("fromUser", Value.fromString(value));
  }

  get toUser(): string {
    let value = this.get("toUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set toUser(value: string) {
    this.set("toUser", Value.fromString(value));
  }

  get amountAllowed(): BigInt {
    let value = this.get("amountAllowed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountAllowed(value: BigInt) {
    this.set("amountAllowed", Value.fromBigInt(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }
}

export class UserReserve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserReserve entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserReserve must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UserReserve", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserReserve | null {
    return changetype<UserReserve | null>(
      store.get_in_block("UserReserve", id),
    );
  }

  static load(id: string): UserReserve | null {
    return changetype<UserReserve | null>(store.get("UserReserve", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get usageAsCollateralEnabledOnUser(): boolean {
    let value = this.get("usageAsCollateralEnabledOnUser");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set usageAsCollateralEnabledOnUser(value: boolean) {
    this.set("usageAsCollateralEnabledOnUser", Value.fromBoolean(value));
  }

  get scaledBTokenBalance(): BigInt {
    let value = this.get("scaledBTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set scaledBTokenBalance(value: BigInt) {
    this.set("scaledBTokenBalance", Value.fromBigInt(value));
  }

  get currentBTokenBalance(): BigInt {
    let value = this.get("currentBTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentBTokenBalance(value: BigInt) {
    this.set("currentBTokenBalance", Value.fromBigInt(value));
  }

  get scaledVariableDebt(): BigInt {
    let value = this.get("scaledVariableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set scaledVariableDebt(value: BigInt) {
    this.set("scaledVariableDebt", Value.fromBigInt(value));
  }

  get currentVariableDebt(): BigInt {
    let value = this.get("currentVariableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentVariableDebt(value: BigInt) {
    this.set("currentVariableDebt", Value.fromBigInt(value));
  }

  get principalStableDebt(): BigInt {
    let value = this.get("principalStableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principalStableDebt(value: BigInt) {
    this.set("principalStableDebt", Value.fromBigInt(value));
  }

  get currentStableDebt(): BigInt {
    let value = this.get("currentStableDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentStableDebt(value: BigInt) {
    this.set("currentStableDebt", Value.fromBigInt(value));
  }

  get currentTotalDebt(): BigInt {
    let value = this.get("currentTotalDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentTotalDebt(value: BigInt) {
    this.set("currentTotalDebt", Value.fromBigInt(value));
  }

  get stableBorrowRate(): BigInt {
    let value = this.get("stableBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stableBorrowRate(value: BigInt) {
    this.set("stableBorrowRate", Value.fromBigInt(value));
  }

  get oldStableBorrowRate(): BigInt {
    let value = this.get("oldStableBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set oldStableBorrowRate(value: BigInt) {
    this.set("oldStableBorrowRate", Value.fromBigInt(value));
  }

  get liquidityRate(): BigInt {
    let value = this.get("liquidityRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityRate(value: BigInt) {
    this.set("liquidityRate", Value.fromBigInt(value));
  }

  get stableBorrowLastUpdateTimestamp(): i32 {
    let value = this.get("stableBorrowLastUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set stableBorrowLastUpdateTimestamp(value: i32) {
    this.set("stableBorrowLastUpdateTimestamp", Value.fromI32(value));
  }

  get variableBorrowIndex(): BigInt {
    let value = this.get("variableBorrowIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set variableBorrowIndex(value: BigInt) {
    this.set("variableBorrowIndex", Value.fromBigInt(value));
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }

  get stableTokenDelegatedAllowances(): StableTokenDelegatedAllowanceLoader {
    return new StableTokenDelegatedAllowanceLoader(
      "UserReserve",
      this.get("id")!.toString(),
      "stableTokenDelegatedAllowances",
    );
  }

  get variableTokenDelegatedAllowances(): VariableTokenDelegatedAllowanceLoader {
    return new VariableTokenDelegatedAllowanceLoader(
      "UserReserve",
      this.get("id")!.toString(),
      "variableTokenDelegatedAllowances",
    );
  }

  get bTokenBalanceHistory(): BTokenBalanceHistoryItemLoader {
    return new BTokenBalanceHistoryItemLoader(
      "UserReserve",
      this.get("id")!.toString(),
      "bTokenBalanceHistory",
    );
  }

  get vTokenBalanceHistory(): VTokenBalanceHistoryItemLoader {
    return new VTokenBalanceHistoryItemLoader(
      "UserReserve",
      this.get("id")!.toString(),
      "vTokenBalanceHistory",
    );
  }

  get sTokenBalanceHistory(): STokenBalanceHistoryItemLoader {
    return new STokenBalanceHistoryItemLoader(
      "UserReserve",
      this.get("id")!.toString(),
      "sTokenBalanceHistory",
    );
  }

  get usageAsCollateralHistory(): UsageAsCollateralLoader {
    return new UsageAsCollateralLoader(
      "UserReserve",
      this.get("id")!.toString(),
      "usageAsCollateralHistory",
    );
  }

  get supplyHistory(): SupplyLoader {
    return new SupplyLoader(
      "UserReserve",
      this.get("id")!.toString(),
      "supplyHistory",
    );
  }

  get mintUnbackedHistory(): MintUnbackedLoader {
    return new MintUnbackedLoader(
      "UserReserve",
      this.get("id")!.toString(),
      "mintUnbackedHistory",
    );
  }

  get backUnbackedHistory(): BackUnbackedLoader {
    return new BackUnbackedLoader(
      "UserReserve",
      this.get("id")!.toString(),
      "backUnbackedHistory",
    );
  }

  get redeemUnderlyingHistory(): RedeemUnderlyingLoader {
    return new RedeemUnderlyingLoader(
      "UserReserve",
      this.get("id")!.toString(),
      "redeemUnderlyingHistory",
    );
  }

  get borrowHistory(): BorrowLoader {
    return new BorrowLoader(
      "UserReserve",
      this.get("id")!.toString(),
      "borrowHistory",
    );
  }

  get swapHistory(): SwapBorrowRateLoader {
    return new SwapBorrowRateLoader(
      "UserReserve",
      this.get("id")!.toString(),
      "swapHistory",
    );
  }

  get rebalanceStableBorrowRateHistory(): RebalanceStableBorrowRateLoader {
    return new RebalanceStableBorrowRateLoader(
      "UserReserve",
      this.get("id")!.toString(),
      "rebalanceStableBorrowRateHistory",
    );
  }

  get repayHistory(): RepayLoader {
    return new RepayLoader(
      "UserReserve",
      this.get("id")!.toString(),
      "repayHistory",
    );
  }

  get liquidationCallHistory(): LiquidationCallLoader {
    return new LiquidationCallLoader(
      "UserReserve",
      this.get("id")!.toString(),
      "liquidationCallHistory",
    );
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrowedReservesCount(): i32 {
    let value = this.get("borrowedReservesCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowedReservesCount(value: i32) {
    this.set("borrowedReservesCount", Value.fromI32(value));
  }

  get unclaimedRewards(): BigInt {
    let value = this.get("unclaimedRewards");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set unclaimedRewards(value: BigInt) {
    this.set("unclaimedRewards", Value.fromBigInt(value));
  }

  get lifetimeRewards(): BigInt {
    let value = this.get("lifetimeRewards");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lifetimeRewards(value: BigInt) {
    this.set("lifetimeRewards", Value.fromBigInt(value));
  }

  get rewardsLastUpdated(): i32 {
    let value = this.get("rewardsLastUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set rewardsLastUpdated(value: i32) {
    this.set("rewardsLastUpdated", Value.fromI32(value));
  }

  get rewards(): UserRewardLoader {
    return new UserRewardLoader("User", this.get("id")!.toString(), "rewards");
  }

  get eModeCategoryId(): string | null {
    let value = this.get("eModeCategoryId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eModeCategoryId(value: string | null) {
    if (!value) {
      this.unset("eModeCategoryId");
    } else {
      this.set("eModeCategoryId", Value.fromString(<string>value));
    }
  }

  get reserves(): UserReserveLoader {
    return new UserReserveLoader(
      "User",
      this.get("id")!.toString(),
      "reserves",
    );
  }

  get supplyHistory(): SupplyLoader {
    return new SupplyLoader(
      "User",
      this.get("id")!.toString(),
      "supplyHistory",
    );
  }

  get mintUnbackedHistory(): MintUnbackedLoader {
    return new MintUnbackedLoader(
      "User",
      this.get("id")!.toString(),
      "mintUnbackedHistory",
    );
  }

  get backUnbackedHistory(): BackUnbackedLoader {
    return new BackUnbackedLoader(
      "User",
      this.get("id")!.toString(),
      "backUnbackedHistory",
    );
  }

  get userEmodeSetHistory(): UserEModeSetLoader {
    return new UserEModeSetLoader(
      "User",
      this.get("id")!.toString(),
      "userEmodeSetHistory",
    );
  }

  get redeemUnderlyingHistory(): RedeemUnderlyingLoader {
    return new RedeemUnderlyingLoader(
      "User",
      this.get("id")!.toString(),
      "redeemUnderlyingHistory",
    );
  }

  get usageAsCollateralHistory(): UsageAsCollateralLoader {
    return new UsageAsCollateralLoader(
      "User",
      this.get("id")!.toString(),
      "usageAsCollateralHistory",
    );
  }

  get borrowHistory(): BorrowLoader {
    return new BorrowLoader(
      "User",
      this.get("id")!.toString(),
      "borrowHistory",
    );
  }

  get swapHistory(): SwapBorrowRateLoader {
    return new SwapBorrowRateLoader(
      "User",
      this.get("id")!.toString(),
      "swapHistory",
    );
  }

  get rebalanceStableBorrowRateHistory(): RebalanceStableBorrowRateLoader {
    return new RebalanceStableBorrowRateLoader(
      "User",
      this.get("id")!.toString(),
      "rebalanceStableBorrowRateHistory",
    );
  }

  get repayHistory(): RepayLoader {
    return new RepayLoader("User", this.get("id")!.toString(), "repayHistory");
  }

  get liquidationCallHistory(): LiquidationCallLoader {
    return new LiquidationCallLoader(
      "User",
      this.get("id")!.toString(),
      "liquidationCallHistory",
    );
  }

  get rewardedActions(): RewardedActionLoader {
    return new RewardedActionLoader(
      "User",
      this.get("id")!.toString(),
      "rewardedActions",
    );
  }

  get claimRewards(): ClaimRewardsCallLoader {
    return new ClaimRewardsCallLoader(
      "User",
      this.get("id")!.toString(),
      "claimRewards",
    );
  }
}

export class SwapHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SwapHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SwapHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SwapHistory | null {
    return changetype<SwapHistory | null>(
      store.get_in_block("SwapHistory", id),
    );
  }

  static load(id: string): SwapHistory | null {
    return changetype<SwapHistory | null>(store.get("SwapHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromAsset(): string {
    let value = this.get("fromAsset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fromAsset(value: string) {
    this.set("fromAsset", Value.fromString(value));
  }

  get toAsset(): string {
    let value = this.get("toAsset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set toAsset(value: string) {
    this.set("toAsset", Value.fromString(value));
  }

  get fromAmount(): BigInt {
    let value = this.get("fromAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fromAmount(value: BigInt) {
    this.set("fromAmount", Value.fromBigInt(value));
  }

  get receivedAmount(): BigInt {
    let value = this.get("receivedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set receivedAmount(value: BigInt) {
    this.set("receivedAmount", Value.fromBigInt(value));
  }

  get swapType(): string {
    let value = this.get("swapType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set swapType(value: string) {
    this.set("swapType", Value.fromString(value));
  }
}

export class PoolLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Pool[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Pool[]>(value);
  }
}

export class ReserveLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Reserve[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Reserve[]>(value);
  }
}

export class SupplyLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Supply[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Supply[]>(value);
  }
}

export class MintUnbackedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): MintUnbacked[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<MintUnbacked[]>(value);
  }
}

export class BackUnbackedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): BackUnbacked[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<BackUnbacked[]>(value);
  }
}

export class MintedToTreasuryLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): MintedToTreasury[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<MintedToTreasury[]>(value);
  }
}

export class IsolationModeTotalDebtUpdatedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): IsolationModeTotalDebtUpdated[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<IsolationModeTotalDebtUpdated[]>(value);
  }
}

export class RedeemUnderlyingLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RedeemUnderlying[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RedeemUnderlying[]>(value);
  }
}

export class BorrowLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Borrow[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Borrow[]>(value);
  }
}

export class SwapBorrowRateLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): SwapBorrowRate[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<SwapBorrowRate[]>(value);
  }
}

export class UsageAsCollateralLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UsageAsCollateral[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UsageAsCollateral[]>(value);
  }
}

export class RebalanceStableBorrowRateLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RebalanceStableBorrowRate[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RebalanceStableBorrowRate[]>(value);
  }
}

export class RepayLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Repay[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Repay[]>(value);
  }
}

export class FlashLoanLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): FlashLoan[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<FlashLoan[]>(value);
  }
}

export class LiquidationCallLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): LiquidationCall[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<LiquidationCall[]>(value);
  }
}

export class PriceHistoryItemLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PriceHistoryItem[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PriceHistoryItem[]>(value);
  }
}

export class PriceOracleAssetLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PriceOracleAsset[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PriceOracleAsset[]>(value);
  }
}

export class UsdEthPriceHistoryItemLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UsdEthPriceHistoryItem[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UsdEthPriceHistoryItem[]>(value);
  }
}

export class RewardLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Reward[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Reward[]>(value);
  }
}

export class RewardedActionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RewardedAction[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RewardedAction[]>(value);
  }
}

export class ClaimRewardsCallLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ClaimRewardsCall[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ClaimRewardsCall[]>(value);
  }
}

export class UserReserveLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserReserve[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserReserve[]>(value);
  }
}

export class ReserveParamsHistoryItemLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ReserveParamsHistoryItem[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ReserveParamsHistoryItem[]>(value);
  }
}

export class ReserveConfigurationHistoryItemLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ReserveConfigurationHistoryItem[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ReserveConfigurationHistoryItem[]>(value);
  }
}

export class StableTokenDelegatedAllowanceLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): StableTokenDelegatedAllowance[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<StableTokenDelegatedAllowance[]>(value);
  }
}

export class VariableTokenDelegatedAllowanceLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): VariableTokenDelegatedAllowance[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<VariableTokenDelegatedAllowance[]>(value);
  }
}

export class BTokenBalanceHistoryItemLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): BTokenBalanceHistoryItem[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<BTokenBalanceHistoryItem[]>(value);
  }
}

export class VTokenBalanceHistoryItemLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): VTokenBalanceHistoryItem[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<VTokenBalanceHistoryItem[]>(value);
  }
}

export class STokenBalanceHistoryItemLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): STokenBalanceHistoryItem[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<STokenBalanceHistoryItem[]>(value);
  }
}

export class UserRewardLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserReward[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserReward[]>(value);
  }
}

export class UserEModeSetLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserEModeSet[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserEModeSet[]>(value);
  }
}
